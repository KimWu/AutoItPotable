And?4
ByRef?4
Case?4
Const?4
ContinueCase?4
ContinueLoop?4
Default?4
Dim?4
Do?4
Else?4
ElseIf?4
EndFunc?4
EndIf?4
EndSelect?4
EndSwitch?4
EndWith?4
Enum?4
Exit?4
ExitLoop?4
False?4
For?4
Func?4
Global?4
If?4
In?4
Local?4
Next?4
Not?4
Null?4
Or?4
ReDim?4
Return?4
Select?4
Static?4
Step?4
Switch?4
Then?4
To?4
True?4
Until?4
Volatile?4
WEnd?4
While?4
With?4
#ce?2
#comments-end?2
#comments-start?2
#cs?2
#include?2
#include-once?2
#NoTrayIcon?2
#OnAutoItStartRegister?2
#RequireAdmin?2
#EndRegion?1
#forcedef?1
#forceref?1
#ignorefunc?1
#pragma?1
#Region?1
@AppDataCommonDir?3
@AppDataDir?3
@AutoItExe?3
@AutoItPID?3
@AutoItVersion?3
@AutoItX64?3
@COM_EventObj?3
@CommonFilesDir?3
@Compiled?3
@ComputerName?3
@ComSpec?3
@CPUArch?3
@CR?3
@CRLF?3
@DesktopCommonDir?3
@DesktopDepth?3
@DesktopDir?3
@DesktopHeight?3
@DesktopRefresh?3
@DesktopWidth?3
@DocumentsCommonDir?3
@error?3
@exitCode?3
@exitMethod?3
@extended?3
@FavoritesCommonDir?3
@FavoritesDir?3
@GUI_CtrlHandle?3
@GUI_CtrlId?3
@GUI_DragFile?3
@GUI_DragId?3
@GUI_DropId?3
@GUI_WinHandle?3
@HomeDrive?3
@HomePath?3
@HomeShare?3
@HotKeyPressed?3
@HOUR?3
@IPAddress1?3
@IPAddress2?3
@IPAddress3?3
@IPAddress4?3
@KBLayout?3
@LF?3
@LocalAppDataDir?3
@LogonDNSDomain?3
@LogonDomain?3
@LogonServer?3
@MDAY?3
@MIN?3
@MON?3
@MSEC?3
@MUILang?3
@MyDocumentsDir?3
@NumParams?3
@OSArch?3
@OSBuild?3
@OSLang?3
@OSServicePack?3
@OSType?3
@OSVersion?3
@ProgramFilesDir?3
@ProgramsCommonDir?3
@ProgramsDir?3
@ScriptDir?3
@ScriptFullPath?3
@ScriptLineNumber?3
@ScriptName?3
@SEC?3
@StartMenuCommonDir?3
@StartMenuDir?3
@StartupCommonDir?3
@StartupDir?3
@SW_DISABLE?3
@SW_ENABLE?3
@SW_HIDE?3
@SW_LOCK?3
@SW_MAXIMIZE?3
@SW_MINIMIZE?3
@SW_RESTORE?3
@SW_SHOW?3
@SW_SHOWDEFAULT?3
@SW_SHOWMAXIMIZED?3
@SW_SHOWMINIMIZED?3
@SW_SHOWMINNOACTIVE?3
@SW_SHOWNA?3
@SW_SHOWNOACTIVATE?3
@SW_SHOWNORMAL?3
@SW_UNLOCK?3
@SystemDir?3
@TAB?3
@TempDir?3
@TRAY_ID?3
@TrayIconFlashing?3
@TrayIconVisible?3
@UserName?3
@UserProfileDir?3
@WDAY?3
@WindowsDir?3
@WorkingDir?3
@YDAY?3
@YEAR?3
Abs(表达式) 计算数的绝对值.
ACos(表达式) 计算数的反余弦值.
AdlibRegister("函数"[, 时间 = 250]) 注册 Adlib 函数.
AdlibUnRegister(["函数"]) 注销 Adlib 函数.
Asc("字符") 返回字符的 ASCII 码.
AscW("字符") 返回字符的 Unicode 代码.
ASin(表达式) 计算数的反正弦值.
Assign("变量名", "数据"[, 标志 = 0]) 给变量赋值.
ATan(表达式) 计算数的反正切值.
AutoItSetOption("选项"[, 参数]) 调整 Autoit 函数或参数的操作方式.
AutoItSetOption ( "ExpandEnvStrings" [, param ] ) <a id="ExpandEnvStrings"></a>Changes how literal strings and % symbols are interpreted. By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., "The temp directory is: %temp%". 0 = (default) do not expand environment variables 1 = expand environment variables Without this option the usual way would be: 	"The temp directory is: " & <a href="EnvGet.htm">EnvGet</a>("temp") 
AutoItSetOption ( "ExpandVarStrings" [, param ] ) <a id="ExpandVarStrings"></a>Changes how literal strings and variable/macro ($ and @) symbols are interpreted. By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., "The value of var1 is $var1$". 0 = (default) do not expand variables 1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: "This is a single dollar $$ sign". 
AutoItSetOption ( "GUICloseOnESC" [, param ] ) <a id="GUICloseOnESC"></a>When ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent. This option toggles this behavior on and off. 0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed. 1 = (default) <a href="Send.htm">Send()</a> the $GUI_EVENT_CLOSE message when ESC is pressed. 
AutoItSetOption ( "GUICoordMode" [, param ] ) <a id="GUICoordMode"></a>Alters the position of a control defined by <a href="GUICtrlSetPos.htm">GUICtrlSetPos()</a>. 0 = relative position to the start of the last control (upper left corner). 1 = (default) absolute coordinates still relative to the dialog box. 2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start. So next line is -1, offset; next cell is offset,-1; current cell is -1,-1. Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back. 
AutoItSetOption ( "GUIDataSeparatorChar" [, param ] ) <a id="GUIDataSeparatorChar"></a>Define the character which delimits subitems in <a href="GUICtrlSetData.htm">GUICtrlSetData()</a>. The default character is '|'. 
AutoItSetOption ( "GUIOnEventMode" [, param ] ) <a id="GUIOnEventMode"></a>Enable/disable OnEvent functions notifications. 0 = (default) disable. 1 = enable. 
AutoItSetOption ( "GUIResizeMode" [, param ] ) <a id="GUIResizeMode"></a>Change default resizing for a control. 0 = (default) keep default control resizing. &lt;1024 = any type of resizing see <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing()</a>. 
AutoItSetOption ( "GUIEventOptions" [, param ] ) <a id="GUIEventOptions"></a>Change special event behavior or GUI function return values. 0 = (default) Windows behavior on click on Minimize,Restore, Maximize, Resize. 1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification. 
AutoItSetOption ( "MouseClickDelay" [, param ] ) <a id="MouseClickDelay"></a>Alters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10). 
AutoItSetOption ( "MouseClickDownDelay" [, param ] ) <a id="MouseClickDownDelay"></a>Alters the length a click is held down before release. Time in milliseconds to pause (default=10). 
AutoItSetOption ( "MouseClickDragDelay" [, param ] ) <a id="MouseClickDragDelay"></a>Alters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250). 
AutoItSetOption ( "MouseCoordMode" [, param ] ) <a id="MouseCoordMode"></a>Sets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = (default) absolute screen coordinates 2 = relative coords to the client area of the active window 
AutoItSetOption ( "MustDeclareVars" [, param ] ) <a id="MustDeclareVars"></a>If this option is used then all variables must be pre-declared with Local, Global or in some cases Dim before they can be used - removes the chance for misspelled variables causing bugs. 0 = (default) Variables don't need to be pre-declared 1 = Variables must be pre-declared. See <a href="../keywords/Dim.htm">Dim / Global / Local / Const</a> for details on declaring variables. 
AutoItSetOption ( "PixelCoordMode" [, param ] ) <a id="PixelCoordMode"></a>Sets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window): 0 = relative coords to the defined window 1 = (default) absolute screen coordinates 2 = relative coords to the client area of the defined window 
AutoItSetOption ( "SendAttachMode" [, param ] ) <a id="SendAttachMode"></a>Specifies if AutoIt attaches input threads when using <a href="Send.htm">Send()</a> function. When not attaching (default mode=0) detecting the state of capslock/scrolllock and numlock can be unreliable under NT4. However, when you specify attach mode=1 the <a href="Send.htm">Send</a>("{... down/up}") syntax will not work and there may be problems with sending keys to "hung" windows. <a href="ControlSend.htm">ControlSend()</a> ALWAYS attaches and is not affected by this mode. 0 = (default) don't attach 1 = attach 
AutoItSetOption ( "SendCapslockMode" [, param ] ) <a id="SendCapslockMode"></a>Specifies if AutoIt should store the state of capslock before a <a href="Send.htm">Send()</a> function and restore it afterwards. 0 = don't store/restore 1 = (default) store and restore 
AutoItSetOption ( "SendKeyDelay" [, param ] ) <a id="SendKeyDelay"></a>Alters the length of the brief pause in between sent keystrokes. A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption ( "SendKeyDownDelay" [, param ] ) <a id="SendKeyDownDelay"></a>Alters the length of time a key is held down before being released during a keystroke. For applications that take a while to register keypresses you may need to raise this value from the default. A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption ( "TCPTimeout" [, param ] ) <a id="TCPTimeout"></a>Defines the time before TCP functions stop if no communication. Time in milliseconds before timeout (default=100). 
AutoItSetOption ( "TrayAutoPause" [, param ] ) <a id="TrayAutoPause"></a>Script pauses when click on tray icon. 0 = no pause 1 = (default) pause. If there is no DefaultMenu no pause will occurs. 
AutoItSetOption ( "TrayIconDebug" [, param ] ) <a id="TrayIconDebug"></a>If enabled shows the current script line in the tray icon tip to help debugging. 0 = (default) no debug information 1 = show debug 
AutoItSetOption ( "TrayIconHide" [, param ] ) <a id="TrayIconHide"></a>Hides the AutoIt tray icon. Note: The icon will still initially appear for ~750 milliseconds. 0 = (default) show icon 1 = hide icon 
AutoItSetOption ( "TrayMenuMode" [, param ] ) <a id="TrayMenuMode"></a>Extend the behaviour of the script tray icon/menu. This can be done with a combination (adding) of the following values. 0 = (default) default menu items (Script Paused/Exit) are appended to the usercreated menu; items will automatically be checked/unchecked when clicked; double clicking the tray icon returns the controlID of the $TRAY_DEFAULT item. 1 = no default menu 2 = items will not automatically check/uncheck when clicked 4 = do not return the $TRAY_DEFAULT item controlID when the tray icon is double clicked 8 = turn off auto check of radio item groups 
AutoItSetOption ( "TrayOnEventMode" [, param ] ) <a id="TrayOnEventMode"></a>Enable/disable OnEvent functions notifications for the tray. 0 = (default) disable 1 = enable 
AutoItSetOption ( "WinDetectHiddenText" [, param ] ) <a id="WinDetectHiddenText"></a>Specifies if hidden window text can be "seen" by the window matching functions. 0 = (default) Do not detect hidden text 1 = Detect hidden text 
AutoItSetOption ( "WinSearchChildren" [, param ] ) <a id="WinSearchChildren"></a>Allows the window search routines to search child windows as well as top-level windows. 0 = (default) Only search top-level windows 1 = Search top-level and child windows 
AutoItSetOption ( "WinTextMatchMode" [, param ] ) <a id="WinTextMatchMode"></a>Alters the method that is used to match window text during search operations. 1 = (default) Complete / Slow mode 2 = Quick mode In quick mode AutoIt can usually only "see" dialog text, button text and the captions of some controls. In the default mode much more text can be seen (for instance the contents of the Notepad window). If you are having performance problems when performing many window searches then changing to the "quick" mode may help. 
AutoItSetOption ( "WinTitleMatchMode" [, param ] ) <a id="WinTitleMatchMode"></a>Alters the method that is used to match window titles during search operations. 1 = (default) Match the title from the start 2 = Match any substring in the title 3 = Exact title match 4 = Advanced mode (retained for backwards compatibility only - see <a href="../intro/windowsadvanced.htm">Window Titles & Text (Advanced)</a>) -1 to -4 = Case insensitive match according to the other type of match. 
AutoItSetOption ( "WinWaitDelay" [, param ] ) <a id="WinWaitDelay"></a>Alters how long a script should briefly pause after a successful window-related operation. Time in milliseconds to pause (default=250). 
AutoItWinGetTitle (  ) 获取 AutoIt 窗口的标题.
AutoItWinSetTitle("新文本") 修改 AutoIt 窗口标题.
Beep([频率 = 500[, 延迟 = 1000]]) 播放提示音.
Binary(表达式) 返回表达式的二进制值.
BinaryLen ( 二进制变量 )  返回二进制变量的字节数.
BinaryMid(二进制数据, 开始[, 数量]) 提取二进制变量的若干字节.
BinaryToString(表达式[, 标志 = 1]) 转换二进制变量为字符串.
BitAND(值 1, 值 2[, 值 n]) 执行逐位 AND(与)运算.
BitNOT ( 值 ) 执行逐位 NOT(取反) 运算.
BitOR(值 1, 值 2[, 值 n]) 执行逐位 OR(或) 运算.
BitRotate(值[, 移位 = 1[, 大小 = "W"]]) 执行旋转移位运算.
BitShift ( 值, 移位 ) 执行移位运算.
BitXOR(值 1, 值 2[, 值 n]) 执行逐位 OR(XOR) 异或运算.
BlockInput ( 标志 ) 禁用/启用鼠标和键盘.
Break ( 模式 ) 允许或禁止用户从托盘菜单中退出脚本程序.
Call("函数"[, 参数 1[, 参数 2[, 参数 N]]]) 调用用户定义函数, 或包含在第一个参数中的内置函数.
CDTray("驱动器", "操作") 弹出或关闭光驱托盘.
Ceiling(表达式) 返回某数只入不舍的整数值.
Chr ( ASCII 代码 ) 返回 ASCII 码的对应字符.
ChrW ( UNICODE 代码 ) 返回 Unicode 码的对应字符.
ClipGet (  ) 获取剪贴板的文本.
ClipPut("值") 写入文本到剪贴板.
ConsoleRead([取数 = false[, 二进制 = false]]) 读 AutoIt 脚本进程中的 STDIN.
ConsoleWrite("数据") 写入数据到 STDOUT(标准输出流). 某些文本编辑器可以读取这个流作为其它程序可接受的数据.
ConsoleWriteError("数据") 写入数据到 STDERR. 一些文本编辑器可以读取这个流作为其它程序可接受的数据.
ControlClick("标题", "文本", 控件 ID[, 按钮 = "left"[, 点击次数 = 1[, X 坐标[, Y 坐标]]]]) 发送鼠标点击命令到指定控件.
ControlCommand ( "title", "text", "classnameNN", "IsVisible", "" ) Returns 1 if Control is visible, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "IsEnabled", "" ) Returns 1 if Control is enabled, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "ShowDropDown", "" ) Displays the ComboBox dropdown
ControlCommand ( "title", "text", "classnameNN", "HideDropDown", "" ) Hides the ComboBox dropdown
ControlCommand ( "title", "text", "classnameNN", "AddString", 'string' ) Adds a string to the end in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "DelString", occurrence ) Deletes a string according to occurrence in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "FindString", 'string' ) Returns occurrence ref of the exact string in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "SetCurrentSelection", occurrence ) Sets selection to occurrence ref in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "SelectString", 'string' ) Sets selection according to string in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "IsChecked", "" ) Returns 1 if Button is checked, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "Check", "" ) Checks radio or check Button
ControlCommand ( "title", "text", "classnameNN", "UnCheck", "" ) Unchecks radio or check Button
ControlCommand ( "title", "text", "classnameNN", "GetCurrentLine", "" ) Returns the line # where the caret is in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetCurrentCol", "" ) Returns the column # where the caret is in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetCurrentSelection", "" ) Returns name of the currently selected item in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "GetLineCount", "" ) Returns # of lines in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetLine", line# ) Returns text at line # passed of an Edit
ControlCommand ( "title", "text", "classnameNN", "GetSelected", "" ) Returns selected text of an Edit
ControlCommand ( "title", "text", "classnameNN", "EditPaste", 'string' ) Pastes the 'string' at the Edit's caret position
ControlCommand ( "title", "text", "classnameNN", "CurrentTab", "" ) Returns the current Tab shown of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "TabRight", "" ) Moves to the next tab to the right of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "TabLeft", "" ) Moves to the next tab to the left of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "SendCommandID", Command ID ) Simulates the WM_COMMAND message. Usually used for ToolbarWindow32 controls - use the ToolBar tab of Au3Info to get the Command ID.
ControlCommand("标题", "文本", 控件ID, "命令"[, "选项"]) 发送命令到控件.
ControlDisable("标题", "文本", 控件ID) 禁用或"灰显"控件.
ControlEnable("标题", "文本", 控件ID) 启用"灰显"的控件.
ControlFocus("标题", "文本", 控件ID) 设置输入焦点到窗口的指定控件.
ControlGetFocus("标题"[, "文本"]) 返回指定窗口键盘焦点控件的类别名.(Ref#-控件号).
ControlGetHandle("标题", "文本", 控件ID) 获取控件的内部句柄.
ControlGetPos("标题", "文本", 控件ID) 获取控件相对其窗口的坐标位置和大小.
ControlGetText("标题", "文本", 控件ID) 获取控件文本.
ControlHide("标题", "文本", 控件ID) 隐藏控件.
ControlListView("标题", "文本", 控件ID, "命令"[, 选项 1[, 选项 2]]) 发送命令到 ListView32 控件.
ControlMove("标题", "文本", 控件ID, x坐标, Y坐标[, 宽度[, 高度]]) 移动窗口内的控件.
ControlSend("标题", "文本", 控件 ID, "字符串"[, 标志 = 0]) 发送字符串到字符控件.
ControlSetText( "标题", "文本", 控件ID, "新文本"[, 标志 = 0]) 设置控件文本.
ControlShow("标题", "文本", 控件ID) 显示隐藏的控件.
ControlTreeView("标题", "文本", 控件ID, "命令"[, 选项1) 发送命令到 TreeView32 控件.
Cos(表达式) 计算数的余弦值.
Dec("字符串"[, 标志 = 0]) 返回十六进制字符串的数字值.
DirCopy("源目录", "目标目录"[, 标志 = 0]) 复制目录及其所有子目录和文件(类似 xcopy 命令).
DirCreate("路径") 创建目录/文件夹.
DirGetSize("路径"[, 标志 = 0]) 返回指定目录的大小(字节).
DirMove("源目录", "目的目录"[, 标志 = 0]) 移动目录及其所有子目录和文件.
DirRemove("路径"[, 递归 = 0]) 删除目录/文件夹.
DllCall("文件", "返回类型", "函数"[, "类型 1", 参数 1[, "类型 n", 参数 n]]) 调用 DLL 文件中的函数.
 动态调用特定内存地址的函数.
DllCallbackFree(句柄) 释放 DllCallbackRegister 创建的句柄.
DllCallbackGetPtr(句柄) 返回传递给 Win32 API 的回调函数指针.
DllCallbackRegister("函数", "返回类型", "参数") 创建自定义 DLL 回调函数.
DllClose ( dll 句柄 ) 关闭打开的 DLL 文件.
DllOpen("文件名") 打开供 DllCall 函数使用的 DLL 文件.
DllStructCreate(结构[, 指针]) 创建 C/C++ 数据结构供 DllCall 使用.
DllStructGetData(结构, 元素[, 索引 = Default]) 返回数据结构的元素数据.
DllStructGetPtr(结构[, 元素]) 返回数据结构指针,或者数据结构的一个元素.
DllStructGetSize ( 结构 ) 返回数据结构的大小(字节)
DllStructSetData(结构, 元素, 值[, 索引]) 设置结构元素的数据.
DriveGetDrive("类型") 返回枚举驱动器的数组.
DriveGetFileSystem("路径") 返回驱动器的文件系统类型.
DriveGetLabel("路径") 返回驱动器的卷标(如果存在).
DriveGetSerial("路径") 返回驱动器序列号.
DriveGetType("路径"[, 操作 = 1]) 返回驱动器类型.
DriveMapAdd("设备", "远程共享"[, 标志 = 0[, "用户名"[, "密码"]]]) 映射网络驱动器.
DriveMapDel("设备") 断开网络驱动器.
DriveMapGet("设备") 获取映射驱动器的详细资料.
DriveSetLabel("路径", "卷标") 修改驱动器卷标.
DriveSpaceFree("路径") 返回路径磁盘的可用空间(MB).
DriveSpaceTotal("路径") 返回路径磁盘的总空间(MB).
DriveStatus("路径") 返回驱动器的状态.
EnvGet("环境变量") 返回环境变量.
EnvSet("环境变量"[, "值"]) 写环境变量.
EnvUpdate (  ) 刷新操作系统的环境变量.
Eval ( 字符串 ) 返回字符串变量的值.
Execute ( 字符串 ) 执行表达式.
Exp(表达式) 计算 e 的幂运算结果.
FileChangeDir("路径") 更改当前工作目录.
FileClose(句柄) 关闭先前打开的文件.
FileCopy("源文件", "目的路径"[, 标志 = 0]) 复制一或多个文件.
FileCreateNTFSLink("源路径", "硬链接"[, 标志 = 0]) 创建 NTFS 硬连接到文件或目录
FileCreateShortcut("文件", "lnk文件"[, "工作目录"[, "参数"[, "描述"[, "图标文件"[, "快捷键"[, 图标编号[, 状态]]]]]]]) 创建文件的快捷方式(.lnk).
FileDelete("文件名") 删除一或多个文件.
FileExists("路径") 检查文件或目录是否存在.
FileFindFirstFile("文件名") 指定路径和文件掩码创建搜索句柄.
FileFindNextFile(搜索[, 标志 = 0]) 返回搜索句柄指定的下一个文件名.
FileFlush(句柄) 刷新缓冲区文件到磁盘.
FileGetAttrib("文件名") 返回文件的属性代码.
FileGetEncoding("文件句柄/文件名"[, 模式 = 1]) 检测文件使用的文本编码.
FileGetLongName("文件名"[, 标志 = 0]) 返回完整路径名称.
FileGetPos(句柄) 检索当前文件的位置.
FileGetShortcut("lnk 文件") 获取快捷方式的详细资料.
FileGetShortName("文件名"[, 标志 = 0]) 返回 8.3 格式短路径名称.
FileGetSize("文件名") 返回文件的字节大小.
FileGetTime("文件名"[, 选项 = 0[, 格式 = 0]]) 返回文件的时间和日期信息.
FileGetVersion("文件名"[, "名称字符串"]) 返回文件存储的版本信息.
FileInstall("源文件", "释放路径"[, 标志 = 0]) 包含并装入文件到编译脚本.
FileMove("源文件", "目的路径"[, 标志 = 0]) 移动一或多个文件.
FileOpen("文件名"[, 模式 = 0]) 打开文件以供读取或写入.
FileOpenDialog("标题", "初始目录", "文件类型"[, 选项 = 0[, "默认文件名"[, 句柄]]]) 启动打开文件对话框.
FileRead("文件句柄/文件名"[, 数量]) 读取先前打开文本文件中指定数量的字符.
FileReadLine( "文件句柄/文件名"[, 行号 = 1]) 读取文本文件指定行的文本.
FileReadToArray("文件句柄/文件名") 读取指定文件到一个数组中.
FileRecycle("源文件") 删除文件或目录到回收站.
FileRecycleEmpty(["路径"]) 清空回收站.
FileSaveDialog("标题", "起始目录", "文件类型"[, 选项 = 0[, "默认文件名"[, 句柄]]]) 启动保存文件对话框.
FileSelectFolder("提示文本", "根目录"[, 标志 = 0[, "起始目录"[, 句柄]]]) 启动浏览文件夹对话框.
FileSetAttrib("文件", "+-属性代码"[, 递归 = 0]) 设置一或多个文件或目录的属性.
FileSetEnd("文件句柄") 在当前文件位置设置文件结束.
FileSetPos(文件句柄, 偏移量, 起点) 设置当前文件的位置.
FileSetTime("文件名", "时间"[, 类型 = 0[, 递归 = 0]]) 设置一或多个文件的时间戳.
FileWrite("文件句柄/文件名", "文本/数据") 写文本/数据到先前打开的文件.
FileWriteLine("文件句柄/文件名", "文本") 添加一行文本到打开的文本文件尾部.
Floor(表达式) 返回数只舍不入到最接近的整数.
FtpSetProxy(模式 = 0[, "代理:端口"[, "用户名"[, "密码"]]]) 设置 FTP 访问互联网的代理.
FuncName ( 函数变量 ) 返回存储在一个变量中的函数的名称
GUICreate("标题"[, 宽度[, 高度[, 左侧 -1[, 顶部 = -1[, 样式 = -1[, 扩展样式 = -1[, 父窗 = 0]]]]]]]) 创建 GUI 窗口.
GUICtrlCreateAvi(文件名, 子文件, 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建 AVI 视频控件.
GUICtrlCreateButton("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建按钮(Button)控件.
GUICtrlCreateCheckbox("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建复选框(Checkbox)控件.
GUICtrlCreateCombo("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建下拉组合框(ComboBox)控件.
GUICtrlCreateContextMenu([控件ID]) 创建控件或 GUI 的上下文菜单主控件.
GUICtrlCreateDate("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建日期控件.
GUICtrlCreateDummy (  ) 创建虚拟(Dummy)控件.
GUICtrlCreateEdit("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建编辑(Edit)控件.
GUICtrlCreateGraphic(左距, 顶距[, 宽度[, 高度[, 样式]]]) 创建图形(Graphic)控件.
GUICtrlCreateGroup("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建组框(Group)控件.
GUICtrlCreateIcon(文件名, 图标名, 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建图标(Icon)控件.
GUICtrlCreateInput("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建输入框(Input)控件.
GUICtrlCreateLabel("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建静态标记(Label)控件.
GUICtrlCreateList("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建列表(List)控件.
GUICtrlCreateListView("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建列表视图(ListView)控件.
GUICtrlCreateListViewItem ( "文本", 控件 ID ) 创建 ListView 控件的项目.
GUICtrlCreateMenu("子菜单文本"[, 菜单ID = -1[, 菜单序号 = -1]]) 创建菜单(Menu)控件.
GUICtrlCreateMenuItem("文本", 菜单ID[, 菜单序号 = -1[, 菜单类型 = 0]]) 创建菜单项目(MenuItem)控件.
GUICtrlCreateMonthCal("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建月历(month)控件.
GUICtrlCreateObj(对象变量, 左距, 顶距[, 宽度[, 高度]]) 创建 ActiveX 控件.
GUICtrlCreatePic(文件名, 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建图片(Picture)控件.
GUICtrlCreateProgress(左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建进度条(Progress)控件.
GUICtrlCreateRadio("文本", 左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建单选框(Radio)控件.
GUICtrlCreateSlider(左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建滑动条(Slider)控件.
GUICtrlCreateTab(左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建选项卡(Tab)控件.
GUICtrlCreateTabItem("文本") 在现有选项卡控件内创建标签页(TabItem)控件.
GUICtrlCreateTreeView(左距, 顶距[, 宽度[, 高度[, 样式 = -1[, 扩展样式 = -1]]]]) 创建树视图(TreeView)控件.
GUICtrlCreateTreeViewItem ( "文本", 控件 ID ) 创建树视图项目(TreeViewItem)控件.
GUICtrlCreateUpdown(控件ID [,样式 = -1]) 创建上下箭头按钮(UpDown)控件.
GUICtrlDelete(控件ID) 删除控件.
GUICtrlGetHandle(控件ID) 返回控件或特定项目(Menu, ContextMenu, TreeViewItem)的句柄.
GUICtrlGetState(控件ID) 获取控件的当前状态.
GUICtrlRead(控件ID[, 高级 = 0]) 读取控件的状态或数据.
GUICtrlRecvMsg(控件ID , msg(消息)[, wParam(参数)[, lParam(参数类型)]]) 发送消息到控件,并检索 lParam(参数)信息.
GUICtrlRegisterListViewSort(控件ID, "函数") 注册 ListView 控件内部排序的自定义回调函数.
GUICtrlSendMsg(控件ID, msg(消息) , wParam(参数), lParam(参数)) 发送消息到控件.
GUICtrlSendToDummy(控件ID[, 状态]) 发送消息到虚拟控件.
GUICtrlSetBkColor(控件ID, 背景色) 设置控件的背景颜色.
GUICtrlSetColor(控件ID, 文本颜色) 设置控件的文本颜色.
GUICtrlSetCursor( 控件ID, 光标ID) 设置特定控件的鼠标光标.
GUICtrlSetData( 控件ID, 数据[, 默认值]) 修改控件数据.
GUICtrlSetDefBkColor(背景色[, 句柄]) 设置 GUI 窗口所有控件的默认背景色.
GUICtrlSetDefColor(颜色[, 句柄]) 设置 GUI 窗口所有控件文本默认颜色.
GUICtrlSetFont(控件ID, 大小[, 粗细[, 属性[, 字体名[, 质量]]]]) 设置控件的字体.
GUICtrlSetGraphic(控件ID, 类型[, par1[, ... par6]]) 修改图形控件数据.
GUICtrlSetImage(控件ID, 文件名[, 图标名[, 图标类型]]) 设置控件的位图或图标.
GUICtrlSetLimit( 控件ID, 最大值[, 最小值 = 0]) 设置控件的字符或象素数量限制.
GUICtrlSetOnEvent(控件ID, "函数") 设置控件点击事件的自定义函数.
GUICtrlSetPos(控件ID, 左距, 顶距[, 宽度[, 高度]]]) 调整控件在窗口中的位置和(或)大小.
GUICtrlSetResizing(控件ID, 调整方式) 设置窗口缩放时控件位置/大小的调整方式.
GUICtrlSetState(控件ID, 状态) 调整控件状态.
GUICtrlSetStyle(控件ID, 样式[, 扩展样式]) 调整控件的样式.
GUICtrlSetTip(控件ID, 提示文本[, "标题"[, 图标[, 选项]]]) 设置控件关联的提示文本.
GUIDelete([窗口句柄]) 删除窗口及其所有控件.
GUIGetCursorInfo([窗口句柄]) 获取鼠标光标相对于 GUI 窗口的位置.
GUIGetMsg([高级模式 = 0]) 获取窗口事件消息.
GUIGetStyle([窗口句柄]) 返回 GUI 窗口样式.
GUIRegisterMsg(消息ID, "函数") 注册 Windows 消息 ID (WM_MSG) 的自定义函数.
GUISetAccelerators(加速键 [, 句柄]) 设置窗口的快捷方式.
GUISetBkColor(背景色[, 句柄]) 设置 GUI 窗口背景颜色.
GUISetCoord(左距, 顶距[, 宽度[, 高度[, 句柄]]]) 设置下一个控件的绝对坐标.
GUISetCursor([光标 ID[, 替换 = 0[, 句柄]]]]) 设置 GUI 窗口鼠标光标的图标.
GUISetFont(大小[, 粗细[, 属性[, 字体名[, 窗口句柄[, 质量]]]]]) 设置窗口默认字体.
GUISetHelp(文件[, 句柄]) 设置点击 F1 时运行的可执行文件.
GUISetIcon(图标文件[, 图标 ID[, 句柄]]) 设置窗口图标.
GUISetOnEvent(专用ID, "函数名"[, 句柄]) 设置系统按钮点击事件的自定义函数.
GUISetState([标志[, 句柄]]) 调整窗口状态.
GUISetStyle(样式[, 扩展样式[, 句柄]]) 调整窗口样式.
GUIStartGroup([句柄]) 使此后所有被创建的控件都归为一组.
GUISwitch(句柄[, 标签项目ID]) 切换 GUI 函数的当前窗口.
Hex(表达式[, 长度]) 返回整数的字符串表达式, 或者二进制表达式的十六进制值.
HotKeySet("热键"[, "函数"]) 设置调用用户函数的热键.
HttpSetProxy(模式 = 0[, "代理:端口"[, "用户名"[, "密码"]]]) 设置 HTTP 访问互联网的代理.
HttpSetUserAgent("用户代理") 设置发送网络请求的用户代理.
HWnd(表达式) 转换表达式为 HWND 句柄.
InetClose(句柄) 关闭 InetGet() 返回的句柄.
InetGet("URL(网址)"[, "文件名"[, 选项 = 0[, 后台 = 0]]]) 使用 HTTP,HTTPS 或 FTP 协议下载文件.
InetGetInfo([句柄[, 索引 = -1]]) 获取 InetGet() 返回句柄的详细数据.
InetGetSize("URL(网址)"[, 选项 = 0]) 返回互联网上文件的字节大小.
InetRead("URL(网址)"[, 选项 = 0]) 使用 HTTP,HTTPS 或 FTP 协议下载文件.
IniDelete("文件名", "字段名"[, "关键字"]) 删除配置文件(*.ini)的值.
IniRead("文件名", "字段名", "关键字", "默认值") 读配置文件(*.ini)的值.
IniReadSection("文件名", "字段名") 读配置文件(*.ini)字段的全部关键字与值.
IniReadSectionNames("文件名") 读配置文件(*.ini)的全部字段信息.
IniRenameSection("文件名", "字段", "新字段"[, 标志 = 0]) 重命名配置文件(*.ini)的字段名.
IniWrite("文件名", "字段", "关键字", "值") 写标准格式的配置文件(*.ini).
IniWriteSection("文件名", "字段", "数据"[, 索引 = 1]) 写配置文件(*.ini)的字段数据.
InputBox("标题", "提示"[, "默认"[, "密码"[, 宽度 = -1[, 高度 = -1[, 左距 = Default[, 顶距 = Default[, 超时 = 0[, 句柄]]]]]]]]) 显示用户数据输入框.
Int(表达式[, 标志 = 0]) 返回表达式的整数值.
IsAdmin (  ) 检查当前用户是否拥有管理员权限.
IsArray ( 变量 ) 检查变量是否为数组类型.
IsBinary(表达式) 检查变量或表达式是否为二进制类型.
IsBool ( 变量 ) 检查变量是否为布尔值类型.
IsDeclared(表达式) 检测变量是否已声明.
IsDllStruct ( 变量 ) 检查变量是否为 DllStruct 结构类型.
IsFloat ( 变量 ) 检测变量或表达式是否存在小数.
IsFunc(表达式) 检查变量或表达式是否为函数, 如果是则同时判断其函数类型.
IsHWnd ( 变量 ) 检查变量是否为窗口句柄或指针类型.
IsInt ( 变量 ) 检测变量或表达式是否没有小数部分.
IsKeyword ( 变量 ) 检查变量是否为关键字.例如: Default(默认).
IsNumber ( 变量 ) 检测变量是否为数字类型.
IsObj ( 变量 ) 检查变量或者表达式是否为对象类型.
IsPtr ( 变量 ) 检查变量是否为指针类型.
IsString ( 变量 ) 检测变量是否为字符串类型.
Log(表达式)  计算数的自然对数.
MemGetStats (  ) 获取内存相关信息.
Mod ( 值1, 值2 ) 执行模数运算.
MouseClick("按钮"[, X坐标, Y坐标[, 点击 = 1[, 速度 = 10]]]) 执行鼠标点击操作.
MouseClickDrag("按钮", x1, y1, x2, y2[, 速度 = 10]) 执行鼠标单击并拖动操作.
MouseDown("按钮") 执行鼠标当前位置的按下事件.
MouseGetCursor (  ) 返回当前鼠标光标的 ID.
MouseGetPos([返回]) 获取鼠标的当前坐标位置.
MouseMove(x 坐标, y 坐标[, 速度 = 10]) 移动鼠标.
MouseUp("按钮") 执行鼠标当前位置的释放事件.
MouseWheel("方向"[, 滚动 = 1]) 执行鼠标滚轮向上或向下滚动事件.
MsgBox(标志, "标题", "文本"[, 超时 = 0[, 句柄]) 显示可选超时的简单消息框.
Number(表达式[, 标志 = 0]) 返回表达式的数字结果.
ObjCreate("类名称"[, "服务器名称"[,"用户名",["密码"]]]) 创建 COM 对象引用的特定类名.
###Experimental### ###Syntax###
ObjEvent(变量, "前缀"[, "接口"])<br> 处理特定对象的传入事件.
ObjGet("文件名"[, "类名"[, 实例]]) 检索程序或文件名引用的 COM 对象.
ObjName( 变量[, 标志 = 1]) 返回对象的名称或接口描述
OnAutoItExitRegister("函数") 注册 AutoIt 退出时调用的函数.
OnAutoItExitUnregister("函数") 注销 AutoIt 退出时调用的函数.
Ping("地址/主名称"[, 超时 = 4000]) 向远程主机发送 Ping(查验) 命令,并返回往返时间.
PixelChecksum(左, 上, 右, 下[, 步进值 = 1[, 句柄[, 模式 = 0]]]) 生成区域的像素校验和.
PixelGetColor(X 坐标 , Y 坐标[, 句柄]) 返回指定像素位置的象素颜色值.
PixelSearch(左, 上, 右, 下, 颜色[, 色差 = 0[, 步进值 =1[,句柄]]]) 搜索提供像素颜色组成的像素矩形.
ProcessClose("进程") 结束指定的进程.
ProcessExists("进程") 检查指定进程是否存在. 
ProcessGetStats (["进程"[, 类型 = 0]]) 返回运行进程的内存或 IO 信息数组.
ProcessList(["名称"]) 返回当前运行进程的名称和 PID 值的数组.
ProcessSetPriority ( "进程", 优先级) 设置进程的优先级.
ProcessWait("进程"[, 超时 = 0]) 暂停脚本执行,直至指定进程出现.
ProcessWaitClose("进程"[, 超时 = 0]) 暂停脚本执行,直至指定进程关闭.
ProgressOff (  ) 关闭进度条窗口.
ProgressOn("标题", "主文本"[, "子文本"[, X 坐标[, Y 坐标[, 选项]]]]) 创建自定义进度条窗口.
ProgressSet(百分比[, "子文本"[, "主文本"]]) 设置已创建进度条窗口的状态和(或)文本.
Ptr(表达式) 转换表达式到指针变量.
Random([最小值 = 0[, 最大值 = 1[, 标志 = 0]]]) 产生浮点型伪随机数.
RegDelete("键名"[, "值"]) 删除注册表键或值.
RegEnumKey ( "键名", 序数 ) 读取注册表子键的名称.
RegEnumVal ( "键名", 序数 ) 读取注册表值项的名称.
RegRead("键名", "值名") 读取注册表的值.
RegWrite("键名"[,"值名"[, "类型"[, 值]]]) 创建注册表的键或值.
Round(表达式[, 小数位数]) 返回数值舍入到指定小数位的值.
Run("程序"[, "工作目录"[, 显示[, 选项]]]) 运行外部程序.
RunAs("用户名", "域", "密码", 注册标志, "程序"[, "工作目录"[, 显示标志[, 选项标志]]]) 使用不同的用户环境运行外部程序文件.
RunAsWait("用户名", "域", "密码", 登录, "程序"[, "工作目录"[, 显示[, 选项]]]) 使用不同的用户环境运行外部程序,并暂停脚本执行,直到程序结束.
RunWait("程序"[, "工作目录"[, 显示[, 选项]]]) 运行外部程序并暂停脚本执行，直到程序结束.
Send("按键"[, 标志 = 0]) 发送模拟键击操作到激活窗口.
SendKeepActive("标题"[, "文本"]) 使用 Send() 函数时,保持窗口激活状态.
SetError(代码[, 扩展值 = 0[, 返回值]]) 手动设置宏 @error 的值(或 @extended, 或 "Return 值").
SetExtended(代码[, 返回值]) 设置宏 @extended 的值.
ShellExecute("文件名"[, "参数"[, "工作目录"[, "verb(动作)"[, 显示]]]]) 使用关联程序打开外部程序或文件, 并且脚本继续执行后面的语句.
ShellExecuteWait("文件名"[, "参数"[, "工作目录"[, "verb(动作)"[, 显示]]]]) 使用关联程序运行外部程序或文件, 并暂停脚本执行, 直到程序完成.
Shutdown ( 代码 ) 系统关机.
Sin(表达式) 计算数的正弦值.
Sleep(延迟) 暂停脚本执行.
SoundPlay("文件名"[, 等待 = 0]) 播放声音文件.
SoundSetWaveVolume ( 百分比 ) 设置系统音量的百分比.
SplashImageOn("标题", "文件"[, 宽度[, 高度[, x 坐标[, y 坐标[, 选项]]]]]) 创建自定义图像弹出窗口.
SplashOff (  ) 关闭闪屏文本或闪屏图像(闪屏-Splash).
SplashTextOn("标题", "文本"[, 宽度 = 500[, 高度 = 400[, X 坐标[, Y 坐标[, 选项 = 0[, "字体名"[, 字体大小 = 12[, 字体粗细]]]]]]]]) 创建自定义文本弹出窗口.
Sqrt(表达式) 计算数的平方根.
SRandom ( 种子 ) 设置随机数种子.
StatusbarGetText("标题"[, "文本"[, 局部 = 1]]) 获取标准状态栏控件的文本.
StderrRead(子进程 ID[, 取数 = false[, 二进制 = false]]) 读取运行的子进程 STDERR 流.
StdinWrite(子进程 ID[, 数据]) 写入字符到运行的子进程 STDIN 流.
StdioClose ( 进程 id ) 关闭进程运行的 STDIO 重定向所有资源.
StdoutRead(进程 ID[, 取数 = false[, 二进制]]) 读取运行的子进程 STDOUT 流.
String(表达式) 返回表达式的字符串结果.
StringAddCR("字符串") 在字符串的全部换行符 Chr(10) 前附加回车符 ( Chr(13) ).
StringCompare("字符串1", "字符串2"[, 区分大小写 = 0]) 比较两个字符串.
StringFormat( "格式控制", 变量1[, ... 变量32]) 返回格式化字符串(类似 C 语言的 sprintf() 函数).
StringFromASCIIArray( 数组, [开始 = 0[, 结束 = -1[, 编码 = 0]]]) 转换 ASCII 代码数组到字符串.
StringInStr("字符串", "子字符串"[, 区分大小写 = 0[, 出现位置 = 1[, 开始 = 1[, 数量]]]]) 检查字符串是否包含指定的子串.
StringIsAlNum("字符串") 检查字符串是否仅包含字母数字字符.
StringIsAlpha("字符串") 检查字符串是否仅包含字母字符.
StringIsASCII("字符串") 检查字符串是否包含 0x00 到 0x7f (0-127)之间的 ASCII 字符.
StringIsDigit("字符串") 检查字符串是否仅包含数字(0-9)字符.
StringIsFloat("字符串") 检查字符串是否为浮点数.
StringIsInt("字符串") 检查字符串是否为整数.
StringIsLower("字符串") 检查字符串是否仅包含小写字符.
StringIsSpace("字符串") 检查字符串是否仅包含空白字符.
StringIsUpper("字符串") 检查字符串是否仅包含大写字符.
StringIsXDigit("字符串") 检查字符串是否仅包含十六进制数字字符 (0-9, A-F).
StringLeft ( "字符串", 数量 ) 返回字符串左起指定数量的字符.
StringLen("字符串") 返回字符串的长度. 
StringLower("字符串") 转换字符串为小写字母.
StringMid("字符串", 起始位置[, 数量 = -1]) 提取字符串的部分字符.
StringRegExp("字符串", "表达式"[, 标志 = 0[, 偏移量 = 1]]) 检查字串是否匹配指定的正则表达式.
StringRegExpReplace("字符串", "表达式", "替换",[ 数量 = 0]) 正则表达式字符替换.
StringReplace("字符串", "搜索字符串/起始位置", "替换字符串"[, 数量 = 0[, 区分大小写 = 0]]) 替换字符串的子串.
StringReverse("字符串"[, 标志 = 0]) 反转指定字符串的内容.
StringRight ( "字符串", 数量 ) 返回字符串右起指定数量的字符.
StringSplit("字符串", "分隔符"[, 标志 = 0]) 拆分字符串为若干子串.
StringStripCR("字符串") 删除字符串的所有回车符 ( Chr(13) ).
StringStripWS ( "字符串", 标志 ) 删除字符串的空白符.
StringToASCIIArray("字符串",[ 开始 = 0[, 结束[, 编码 = 0]]]) 转换字符串为包含对应 ASCII 代码的数组.
StringToBinary(表达式[, 标志 = 1]) 转换字符串为二进制数据.
StringTrimLeft ( "字符串", 数量 ) 删除字符串左起指定数量的字符.
StringTrimRight ( "字符串", 数量 ) 删除字符串右起指定数量的字符.
StringUpper("字符串") 转换字符串为大写字母.
Tan(表达式) 计算数的正切值.
TCPAccept ( 主套接字 ) 允许套接字(socket)的尝试连接.
TCPCloseSocket ( 套接字 ) 关闭 TCP 套接字(socket).
TCPConnect ( IP地址, 端口 ) 创建连接服务器的套接字(socket).
TCPListen(IP地址, 端口[, 最大挂起连接]) 创建监听连接的套接字(socket).
TCPNameToIP ( 名称 ) 转换互联网名称为 IP 地址.
TCPRecv(主套接字, 最大返回量[, 标志 = 0]) 接收套接字(socket)连接的数据.
TCPSend ( 主套接字, 数据 ) 在套接字(socket)连接上发送数据.
TCPShutdown (  ) 停止 TCP/UDP 服务.
TCPStartup (  ) 启动 TCP 或 UDP 服务.
TimerDiff(句柄) 返回调用 TimerInit() 的时间间隔.
TimerInit (  ) 返回可以传递给 TimerDiff() 的句柄, 计算时间差异毫秒值.
ToolTip("文本"[, x坐标[, Y坐标[, "标题"[, 图标 = 0[, 选项]]]]]) 创建提示控件.
TrayCreateItem("文本"[, 菜单ID = -1[, 菜单项 = -1[, 单选菜单项 = 0]]]) 创建托盘菜单项目控件.
TrayCreateMenu("子菜单/菜单文本"[, 菜单ID = -1[, 菜单项 = -1]]) 创建托盘菜单控件.
TrayGetMsg (  ) 获取托盘事件.
TrayItemDelete(控件ID) 删除托盘菜单的菜单/菜单项目.
TrayItemGetHandle(控件ID) 返回托盘菜单或菜单项目的句柄.
TrayItemGetState([控件 ID]) 获取托盘菜单或项目的当前状态.
TrayItemGetText(控件ID) 获取托盘菜单或项目的文本.
TrayItemSetOnEvent(项目ID, "函数") 定义托盘项目点击时调用的自定义函数.
TrayItemSetState ( 控件ID, 状态 ) 设置托盘菜单或项目的状态.
TrayItemSetText ( 控件ID, 文本 ) 设置托盘菜单或项目的文本.
TraySetClick ( 标志 ) 设置托盘(显示托盘菜单)的点击模式.
TraySetIcon([文件名[, 图标 ID]]) 设置指定的托盘图标.
TraySetOnEvent(专用ID, "函数") 定义托盘特殊事件时调用的自定义函数.
TraySetPauseIcon([文件名[, 图标ID]]) 设置指定的托盘暂停图标.
TraySetState([标志 = 1]) 设置托盘图标状态.
TraySetToolTip([文本]) 设置(或重置)托盘图标的提示文本.
TrayTip("标题", "文本", 超时[, 选项 = 0]) 在 AutoIt 图标上显示气球提示.
UBound(变量[, 维数 = 1]) 返回数组维数的大小, 或数组元素的数目.
UDPBind ( IP地址, 端口 ) 创建绑定到连接的套接字(socket).
UDPCloseSocket ( 套接字数组 ) 关闭 UDP 套接字(socket).
UDPOpen(IP地址, 端口[, 标志 = 0]) 打开连接服务器的套接字(socket).
UDPRecv(套接字数组, 最大返回[, 标志 = 0]) 从打开的套接字接收数据.
UDPSend ( 套接字数组, 数据) 在打开的套接字上面发送数据.
VarGetType(表达式) 返回变量的内部表示类型.
WinActivate("标题"[, "文本"]) 激活指定窗口.
WinActive("标题"[, "文本"]) 检查指定窗口是否存在且被激活.
WinClose("标题"[, "文本"]) 关闭指定窗口.
WinExists("标题"[, "文本"]) 检查指定窗口是否存在.
WinFlash ( "标题" [,"文本" [,闪烁 = 4 [,延迟 = 500]]]) 闪烁任务栏指定的窗口.
WinGetCaretPos (  ) 返回当前窗口插入符的坐标.
WinGetClassList("标题"[, "文本"]) 获取窗口类名.
WinGetClientSize("标题"[, "文本"]) 获取窗口客户区的大小.
WinGetHandle("标题"[, "文本"]) 获取窗口内部句柄.
WinGetPos("标题"[, "文本"]) 获取窗口的坐标位置和大小.
WinGetProcess("标题"[, "文本"]) 获取窗口关联的进程 ID(PID).
WinGetState("标题"[, "文本"]) 获取窗口的状态.
WinGetText("标题"[, "文本"]) 获取窗口文本.
WinGetTitle("标题"[, "文本"]) 获取窗口完整标题.
WinKill("标题"[, "文本"]) 强制关闭窗口.
WinList (["标题"[, "文本"]]) 获取窗口标题与句柄列表.
WinMenuSelectItem("标题", "文本", "菜单项"[, "菜单项"[, "菜单项"[, "菜单项"[, "菜单项"[, "菜单项"[, "菜单项"]]]]]]) 调用窗口菜单项.
WinMinimizeAll (  ) 最小化全部窗口.
WinMinimizeAllUndo (  ) 撤销此前 WinMinimizeAll(最小化全部窗口) 操作.
WinMove("标题", "文本", x坐标, Y坐标[, 宽度[, 高度[,速度]]]) 移动窗口位置或(和)调整窗口大小.
WinSetOnTop ( "标题", "文本", 标志 ) 设置窗口置顶.
WinSetState ( "标题", "文本", 标志 ) 显示, 隐藏, 最小化, 最大化或还原窗口.
WinSetTitle("标题", "文本", "新标题") 修改窗口标题.
WinSetTrans ( "标题", "文本", 透明度 ) 设置窗口的透明度.
WinWait("标题"[, "文本"[, 超时 = 0]]) 暂停脚本执行,直到请求的窗口出现.
WinWaitActive("标题"[, "文本"[, 超时 = 0]]) 暂停脚本执行, 直到请求的窗口激活.
WinWaitClose("标题"[, "文本"[, 超时 = 0]]) 暂停脚本执行, 直到请求的窗口关闭.
WinWaitNotActive( "标题"[, "文本"[, 超时 = 0]]) 暂停脚本执行, 直到请求的窗口为非活动状态.
_Array1DToHistogram ( $aArray [, $iSizing = 100] ) 变换 1D 数组元素值为直方图 (需要: #include <Array.au3>)
_ArrayAdd ( ByRef $aArray, $vValue [, $iStart = 0 [, $sDelim_Item = "|" [, $sDelim_Row = @CRLF [, $iForce = $ARRAYFILL_FORCE_DEFAULT]]]] ) 添加指定值到 1D 或 2D 数组的末尾. (需要: #include <Array.au3>)
_ArrayBinarySearch ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iColumn = 0]]] ) 使用对分检索搜索 1D 或 2D 数组. (需要: #include <Array.au3>)
_ArrayColDelete ( ByRef $aArray, $iColumn [, $bConvert = False] ) 删除 2D 数组指定列 (需要: #include <Array.au3>)
_ArrayColInsert ( ByRef $aArray, $iColumn ) 插入指定列到一个 1D 或 2D 数组 (需要: #include <Array.au3>)
_ArrayCombinations ( Const ByRef $aArray, $iSet [, $sDelimiter = ""] ) 返回 1D 数组元素的重组合数组. (需要: #include <Array.au3>)
_ArrayConcatenate ( Const ByRef $aArrayTarget, ByRef $aArraySource [, $iStart = 0] ) 连接两个数组 - 可以是相同列数的 1D 或 2D 数组 (需要: #include <Array.au3>)
_ArrayDelete ( ByRef $aArray, $vRange ) 删除 1D 或 2D 数组的指定元素. (需要: #include <Array.au3>)
_ArrayDisplay ( Const ByRef $aArray [, $sTitle = "ArrayDisplay" [, $sArrayRange = "" [, $iFlags = 0 [, $vUser_Separator = Default [, $sHeader = Default [, $iMax_ColWidth = Default [, $iAlt_Color = Default [, $hUser_Function = ""]]]]]]]] ) 在列表视图中显示 1D 或 2D 数组. (需要: #include <Array.au3>)
_ArrayExtract ( Const ByRef $aArray [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $iStart_Col = -1 [, $iEnd_Col = -1]]]] ) 提取 1D 或 2D 数组指定元素的数组 (需要: #include <Array.au3>)
_ArrayFindAll ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iSubItem = 0 [, $bRow = False]]]]]] ) 查找一维或二维数组中匹配搜索值的所有元素索引. (需要: #include <Array.au3>)
_ArrayInsert ( ByRef $aArray, $vRange [, $vValue = "" [, $iStart = 0 [, $sDelim_Item = "|" [, $sDelim_Row = @CRLF [, $iForce = $ARRAYFILL_FORCE_DEFAULT]]]]] ) 添加新值到 1D 或 2D 数组的指定位置. (需要: #include <Array.au3>)
_ArrayMax ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) 返回 1D 或 2D 数组的最大值. (需要: #include <Array.au3>)
_ArrayMaxIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) 返回 1D 或 2D 数组的最大值索引. (需要: #include <Array.au3>)
_ArrayMin ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) 返回 1D 或 2D 数组中的最小值. (需要: #include <Array.au3>)
_ArrayMinIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) 返回 1D 或 2D 数组的最小值索引. (需要: #include <Array.au3>)
_ArrayPermute ( ByRef $aArray [, $sDelimiter = ""] ) 返回 1D 数组中所有元素的重排列组合. (需要: #include <Array.au3>)
_ArrayPop ( ByRef $aArray ) 返回数组中最后一个元素, 同时删除这个元素. (需要: #include <Array.au3>)
_ArrayPush ( ByRef $aArray, $vValue [, $iDirection = 0] ) 添加新值而不增加数组大小, 在数组结尾插入新值, 则删除数组中第一个元素, 反之亦然. (需要: #include <Array.au3>)
_ArrayReverse ( ByRef $aArray [, $iStart = 0 [, $iEnd = 0]] ) 反序排列 1D 数组的元素顺序 (需要: #include <Array.au3>)
_ArraySearch ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iForward = 1 [, $iSubItem = -1 [, $bRow = False]]]]]]] ) 在一维或二维数组中查找元素. 类似 _ArrayBinarySearch(), 但数组不需要排序. (需要: #include <Array.au3>)
_ArrayShuffle ( ByRef $aArray [, $iStart_Row = 0 [, $iEnd_Row = 0 [, $iCol = -1]]] ) 重组合 1D 与 2D 数组选定行 - 可以限制在 2D 数组的特定列 (需要: #include <Array.au3>)
_ArraySort ( ByRef $aArray [, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0 [, $iPivot = 0]]]]] ) 使用 dualpivotsort(双支点排序)/quicksort(快速排序)/insertionsort(插入排序) 算法对一个一维或者二维数组索引排序. (需要: #include <Array.au3>)
_ArraySwap ( ByRef $aArray, $iIndex_1, $iIndex_2 [, $bCol = False [, $iStart = -1 [, $iEnd = -1]]] ) 交换 1D 数组的元素, 或交换 2D 数组的全部或部分列/行. (需要: #include <Array.au3>)
_ArrayToClip ( Const ByRef $aArray [, $sDelim_Col = "|" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] ) 复制 1D 或 2D 数组内容到剪贴板中, 每个元素由指定的分隔符分隔 (需要: #include <Array.au3>)
_ArrayToString ( Const ByRef $aArray [, $sDelim_Col = "|" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] ) 将 1D 或 2D 数组元素转换为指定分隔符分隔的字符串. (需要: #include <Array.au3>)
_ArrayTranspose ( ByRef $aArray ) 对调 1D 或 2D 数组 (行和列互换). (需要: #include <Array.au3>)
_ArrayTrim ( ByRef $aArray, $iTrimNum [, $iDirection = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0]]]] ) 剪裁 1D 或 2D 数组元素的部分字符. (需要: #include <Array.au3>)
_ArrayUnique ( Const ByRef $aArray [, $iColumn = 0 [, $iBase = 0 [, $iCase = 0 [, $iCount = $ARRAYUNIQUE_COUNT [, $iIntType = $ARRAYUNIQUE_AUTO]]]]] ) 返回 1D 或 2D 数组的列元素, 删除所有重复项. (需要: #include <Array.au3>)
_Assert ( $sCondition [, $bExit = True [, $iCode = 0x7FFFFFFF [, $sLine = @ScriptLineNumber]]] ) 显示断言失败消息. (需要: #include <Debug.au3>)
_ChooseColor ( [$iReturnType = 0 [, $iColorRef = 0 [, $iRefType = 0 [, $hWndOwnder = 0]]]] ) 创建颜色选择对话框. (需要: #include <Misc.au3>)
_ChooseFont ( [$sFontName = "Courier New" [, $iPointSize = 10 [, $iFontColorRef = 0 [, $iFontWeight = 0 [, $bItalic = False [, $bUnderline = False [, $bStrikethru = False [, $hWndOwner = 0]]]]]]]] ) 创建字体选择对话框. (需要: #include <Misc.au3>)
_ClipBoard_ChangeChain ( $hRemove, $hNewNext ) 从剪切板查看器链中移除指定窗口. (需要: #include <Clipboard.au3>)
_ClipBoard_Close (  ) 关闭剪切板. (需要: #include <Clipboard.au3>)
_ClipBoard_CountFormats (  ) 返回当前剪切板中不同数据格式的数量. (需要: #include <Clipboard.au3>)
_ClipBoard_Empty (  ) 清空剪切板并释放剪切板数据句柄. (需要: #include <Clipboard.au3>)
_ClipBoard_EnumFormats ( $iFormat ) 枚举剪切板当前有效的数据格式. (需要: #include <Clipboard.au3>)
_ClipBoard_FormatStr ( $iFormat ) 返回表示标准剪贴板格式的字符串. (需要: #include <Clipboard.au3>)
_ClipBoard_GetData ( [$iFormat = 1] ) 检索指定格式的剪贴板数据. (需要: #include <Clipboard.au3>)
_ClipBoard_GetDataEx ( [$iFormat = 1] ) 检索指定格式的剪贴板数据.(返回剪贴板句柄) (需要: #include <Clipboard.au3>)
_ClipBoard_GetFormatName ( $iFormat ) 检索指定注册格式的名称. (需要: #include <Clipboard.au3>)
_ClipBoard_GetOpenWindow (  ) 检索当前打开剪切板的窗口句柄. (需要: #include <Clipboard.au3>)
_ClipBoard_GetOwner (  ) 检索剪切板的属主窗口句柄. (需要: #include <Clipboard.au3>)
_ClipBoard_GetPriorityFormat ( $aFormats ) 检索指定列表中第一个有效的剪切板格式. (需要: #include <Clipboard.au3>)
_ClipBoard_GetSequenceNumber (  ) 检索当前窗口站(station)剪贴板序号. (需要: #include <Clipboard.au3>)
_ClipBoard_GetViewer (  ) 检索剪贴板查看器中的第一个窗口链句柄. (需要: #include <Clipboard.au3>)
_ClipBoard_IsFormatAvailable ( $iFormat ) 确定剪贴板是否包含指定格式的数据. (需要: #include <Clipboard.au3>)
_ClipBoard_Open ( $hOwner ) 打开剪切板并阻止其它程序修改剪切板. (需要: #include <Clipboard.au3>)
_ClipBoard_RegisterFormat ( $sFormat ) 注册新的剪切板格式. (需要: #include <Clipboard.au3>)
_ClipBoard_SetData ( $vData [, $iFormat = 1] ) 写入数据到指定剪切板格式. (需要: #include <Clipboard.au3>)
_ClipBoard_SetDataEx ( ByRef $hMemory [, $iFormat = 1] ) 写入数据到指定剪切板格式.(Ex) (需要: #include <Clipboard.au3>)
_ClipBoard_SetViewer ( $hViewer ) 添加指定窗口到剪贴板查看器链 (需要: #include <Clipboard.au3>)
_ClipPutFile ( $sFilePath [, $sDelimiter = "|"] ) 复制文件到剪切板 (需要: #include <Misc.au3>)
_ColorConvertHSLtoRGB ( $aArray ) 转换 HSL 颜色到 RGB 颜色 (需要: #include <Color.au3>)
_ColorConvertRGBtoHSL ( $aArray ) 转换 RGB 颜色到 HSL颜色 (需要: #include <Color.au3>)
_ColorGetBlue ( $iColor ) 返回指定颜色的蓝色成分. (需要: #include <Color.au3>)
_ColorGetCOLORREF ( $iColor ) 返回 COLORREF 颜色中 R、G、B 值的数组. (需要: #include <Color.au3>)
_ColorGetGreen ( $iColor ) 返回指定颜色的绿色成分. (需要: #include <Color.au3>)
_ColorGetRed ( $iColor ) 返回指定颜色的红色成分. (需要: #include <Color.au3>)
_ColorGetRGB ( $iColor ) 返回 RGB 颜色中 R、G、B 值的数组. (需要: #include <Color.au3>)
_ColorSetCOLORREF ( $aColor ) 设置 COLORREF 颜色. (需要: #include <Color.au3>)
_ColorSetRGB ( $aColor ) 设置 RGB 颜色. (需要: #include <Color.au3>)
_Crypt_DecryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] ) 使用密钥解密数据. (需要: #include <Crypt.au3>)
_Crypt_DecryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID ) 使用密钥和算法解密文件 (需要: #include <Crypt.au3>)
_Crypt_DeriveKey ( $vPassword, $iAlgID [, $iHashAlgID = $CALG_MD5] ) 用算法和密码创建密钥. (需要: #include <Crypt.au3>)
_Crypt_DestroyKey ( $hCryptKey ) 释放密钥使用的资源. (需要: #include <Crypt.au3>)
_Crypt_EncryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] ) 使用提供的密钥加密数据. (需要: #include <Crypt.au3>)
_Crypt_EncryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID ) 指定密钥和算法加密文件. (需要: #include <Crypt.au3>)
_Crypt_GenRandom ( $pBuffer, $iSize ) 用随机加密数据填充缓冲区 (需要: #include <Crypt.au3>)
_Crypt_HashData ( $vData, $iAlgID [, $bFinal = True [, $hCryptHash = 0]] ) 指定算法 Hash 数据 (需要: #include <Crypt.au3>)
_Crypt_HashFile ( $sFilePath, $iAlgID ) 指定算法 Hash 文件 (需要: #include <Crypt.au3>)
_Crypt_Shutdown (  ) 关闭加密库. (需要: #include <Crypt.au3>)
_Crypt_Startup (  ) 初始化加密库. (需要: #include <Crypt.au3>)
_DateAdd ( $sType, $iNumber, $sDate ) 计算给定日期添加(或减少)间隔后的新日期. (需要: #include <Date.au3>)
_DateDayOfWeek ( $iDayNum [, $iFormat = 0] ) 返回指定天数的星期名称. (需要: #include <Date.au3>)
_DateDaysInMonth ( $iYear, $iMonthNum ) 根据指定的月份和年份返回指定月份的天数. (需要: #include <Date.au3>)
_DateDiff ( $sType, $sStartDate, $sEndDate ) 根据指定的时间单位返回两个日期的经历时间 (需要: #include <Date.au3>)
_DateIsLeapYear ( $iYear ) 检查指定年份是否闰年. (需要: #include <Date.au3>)
_DateIsValid ( $sDate ) 检查给定的日期(格式)是否为有效日期(格式). (需要: #include <Date.au3>)
_DateTimeFormat ( $sDate, $sType ) 返回电脑中的区域设置日期格式. (需要: #include <Date.au3>)
_DateTimeSplit ( $sDate, ByRef $aDatePart, ByRef $iTimePart ) 拆分日期时间字符串为两个数组. (需要: #include <Date.au3>)
_DateToDayOfWeek ( $iYear, $iMonth, $iDay ) 返回给定日期的周日数. (需要: #include <Date.au3>)
_DateToDayOfWeekISO ( $iYear, $iMonth, $iDay ) 返回指定日期的国际标准(ISO)周日数. (需要: #include <Date.au3>)
_DateToDayValue ( $iYear, $iMonth, $iDay ) 返回公元前(BC) 4713年1月1日中午至给定公历日期的经历天数. (需要: #include <Date.au3>)
_DateToMonth ( $iMonNum [, $iFormat = 0] ) 返回指定月份的月份名称. (需要: #include <Date.au3>)
_Date_Time_CompareFileTime ( $tFileTime1, $tFileTime2 ) 比较两个文件的时间. (需要: #include <Date.au3>)
_Date_Time_DOSDateTimeToArray ( $iDosDate, $iDosTime ) 解码 DOS 日期/时间到数组. (需要: #include <Date.au3>)
_Date_Time_DOSDateTimeToFileTime ( $iFatDate, $iFatTime ) 转换 MS - DOS 日期/时间值到文件时间. (需要: #include <Date.au3>)
_Date_Time_DOSDateTimeToStr ( $iDosDate, $iDosTime ) 解码 DOS 日期为字符串. (需要: #include <Date.au3>)
_Date_Time_DOSDateToArray ( $iDosDate ) 解码 DOS 日期到数组. (需要: #include <Date.au3>)
_Date_Time_DOSDateToStr ( $iDosDate ) 解码 DOS 日期为字符串. (需要: #include <Date.au3>)
_Date_Time_DOSTimeToArray ( $iDosTime ) 解码 DOS 时间到数组. (需要: #include <Date.au3>)
_Date_Time_DOSTimeToStr ( $iDosTime ) 解码 DOS 时间为字符串. (需要: #include <Date.au3>)
_Date_Time_EncodeFileTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] ) 编码并返回 $tagFILETIME 结构 (需要: #include <Date.au3>)
_Date_Time_EncodeSystemTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] ) 编码并返回 $tagSYSTEMTIME 结构 (需要: #include <Date.au3>)
_Date_Time_FileTimeToArray ( ByRef $tFileTime ) 解码文件时间到数组. (需要: #include <Date.au3>)
_Date_Time_FileTimeToDOSDateTime ( $tFileTime ) 转换 MS - DOS 日期/时间值到文件时间. (需要: #include <Date.au3>)
_Date_Time_FileTimeToLocalFileTime ( $tFileTime ) 转换基于世界标准时间(UTC)的文件时间到本地文件时间. (需要: #include <Date.au3>)
_Date_Time_FileTimeToStr ( ByRef $tFileTime [, $iFmt = 0] ) 解码文件时间为日期/时间字符串. (需要: #include <Date.au3>)
_Date_Time_FileTimeToSystemTime ( $tFileTime ) 转换文件时间为系统时间格式. (需要: #include <Date.au3>)
_Date_Time_GetFileTime ( $hFile ) 检索文件创建, 访问, 修改的日期/时间. (需要: #include <Date.au3>)
_Date_Time_GetLocalTime (  ) 检索当前本地日期/时间. (需要: #include <Date.au3>)
_Date_Time_GetSystemTime (  ) 检索全球协调时(UTC)表示的当前系统日期和时间. (需要: #include <Date.au3>)
_Date_Time_GetSystemTimeAdjustment (  ) 确定系统是否进行定期时间调整. (需要: #include <Date.au3>)
_Date_Time_GetSystemTimeAsFileTime (  ) 检索全球协调时(UTC)表示的当前系统日期和时间. (需要: #include <Date.au3>)
_Date_Time_GetSystemTimes (  ) 检索系统时间信息. (需要: #include <Date.au3>)
_Date_Time_GetTickCount (  ) 返回系统启动到当前时间的毫秒数. (需要: #include <Date.au3>)
_Date_Time_GetTimeZoneInformation (  ) 检索当前时区设置. (需要: #include <Date.au3>)
_Date_Time_LocalFileTimeToFileTime ( $tLocalTime ) 转换本地文件时间到 UTC 文件时间. (需要: #include <Date.au3>)
_Date_Time_SetFileTime ( $hFile, $tCreateTime, $tLastAccess, $tLastWrite ) 设置文件创建, 访问, 修改的日期/时间. (需要: #include <Date.au3>)
_Date_Time_SetLocalTime ( $tSYSTEMTIME ) 设置当前本地日期和时间. (需要: #include <Date.au3>)
_Date_Time_SetSystemTime ( $tSYSTEMTIME ) 设置当前系统的 UTC 时间和日期. (需要: #include <Date.au3>)
_Date_Time_SetSystemTimeAdjustment ( $iAdjustment, $bDisabled ) 启用或禁用系统时钟定期调整. (需要: #include <Date.au3>)
_Date_Time_SetTimeZoneInformation ( $iBias, $sStdName, $tStdDate, $iStdBias, $sDayName, $tDayDate, $iDayBias ) 设置当前时区. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToArray ( ByRef $tSYSTEMTIME ) 解码系统时间到数组. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToDateStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] ) 解码系统日期到日期字符串. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToDateTimeStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] ) 解码系统日期到日期/时间字符串. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToFileTime ( $tSYSTEMTIME ) 转换系统时间到文件时间格式. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToTimeStr ( ByRef $tSYSTEMTIME ) 解码系统时间到时间字符串. (需要: #include <Date.au3>)
_Date_Time_SystemTimeToTzSpecificLocalTime ( $tUTC [, $tTimeZone = 0] ) UTC时间转换为指定时区的对应本地时间. (需要: #include <Date.au3>)
_Date_Time_TzSpecificLocalTimeToSystemTime ( $tLocalTime [, $tTimeZone = 0] ) 本地时间转换为世界标准时(UTC). (需要: #include <Date.au3>)
_DayValueToDate ( $iJulianDate, ByRef $iYear, ByRef $iMonth, ByRef $iDay ) 添加一个指定的天数到公元前(BC) 4713 年1月1日中午,并返回公历日期. (需要: #include <Date.au3>)
_DebugBugReportEnv (  ) 输出一个有关错误信息提交报告的字符串. (需要: #include <Debug.au3>)
_DebugCOMError ( [$iComDebug = 1 [, $bExit = False]] ) 设置, 重置或查询 COM 错误的调试级别 (需要: #include <Debug.au3>)
_DebugOut ( $sOutput ) 输出调试信息到 _DebugSetup() 设置的调试会话框. (需要: #include <Debug.au3>)
_DebugReport ( $sData [, $bLastError = False [, $bExit = False]] ) 写调试会话. (需要: #include <Debug.au3>)
_DebugReportEx ( $sData [, $bLastError = False [, $bExit = False]] ) 格式化写入调试会话框的信息. (需要: #include <Debug.au3>)
_DebugReportVar ( $sVarName, $vVar [, $bErrExt = False [, $iDebugLineNumber = @ScriptLineNumber]] ) 将变量的结果写入调试会话. (需要: #include <Debug.au3>)
_DebugSetup ( [$sTitle = Default [, $bBugReportInfos = False [, $vReportType = 1 [, $sLogFile = "" [, $bTimeStamp = False]]]]] ) 使用特定的报告类型设置调试会话. (需要: #include <Debug.au3>)
_Degree ( $iRadians ) 弧度转化为度. (需要: #include <Math.au3>)
_EventLog__Backup ( $hEventLog, $sFileName ) 备份事件日志. (需要: #include <EventLog.au3>)
_EventLog__Clear ( $hEventLog, $sFileName ) 清除事件日志. (需要: #include <EventLog.au3>)
_EventLog__Close ( $hEventLog ) 关闭事件日志读取句柄. (需要: #include <EventLog.au3>)
_EventLog__Count ( $hEventLog ) 检索事件日志记录数. (需要: #include <EventLog.au3>)
_EventLog__DeregisterSource ( $hEventLog ) 关闭事件日志写入句柄. (需要: #include <EventLog.au3>)
_EventLog__Full ( $hEventLog ) 检索事件日志是否已满. (需要: #include <EventLog.au3>)
_EventLog__Notify ( $hEventLog, $hEvent ) 允许应用程序接收事件通知. (需要: #include <EventLog.au3>)
_EventLog__Oldest ( $hEventLog ) 检索事件日志最早的绝对记录号. (需要: #include <EventLog.au3>)
_EventLog__Open ( $sServerName, $sSourceName ) 打开事件日志句柄. (需要: #include <EventLog.au3>)
_EventLog__OpenBackup ( $sServerName, $sFileName ) 打开备份事件日志句柄. (需要: #include <EventLog.au3>)
_EventLog__Read ( $hEventLog [, $bRead = True [, $bForward = True [, $iOffset = 0]]] ) 读事件日志项目. (需要: #include <EventLog.au3>)
_EventLog__RegisterSource ( $sServerName, $sSourceName ) 检索指定事件日志的注册句柄. (需要: #include <EventLog.au3>)
_EventLog__Report ( $hEventLog, $iType, $iCategory, $iEventID, $sUserName, $sDesc, $aData ) 事件写入指定事件日志的末端. (需要: #include <EventLog.au3>)
_Excel_BookAttach ( $sString [, $sMode = "FilePath" [, $oInstance = Default]] ) 附加依据所选模式搜索字符串的匹配方法到一个工作簿的第一个实例 (需要: #include <Excel.au3>)
_Excel_BookClose ( $oWorkbook [, $bSave = True] ) 关闭指定的工作簿 (需要: #include <Excel.au3>)
_Excel_BookList ( [$oExcel = Default] ) 返回所有 Excel 实例或指定工作簿的列表 (需要: #include <Excel.au3>)
_Excel_BookNew ( $oExcel [, $iSheets = Default] ) 创建新工作簿 (需要: #include <Excel.au3>)
_Excel_BookOpen ( $oExcel, $sFilePath [, $bReadOnly = False [, $bVisible = True [, $sPassword = Default [, $sWritePassword = Default [, $bUpdateLinks = Default]]]]] ) 打开一个现有的工作簿 (需要: #include <Excel.au3>)
_Excel_BookOpenText ( $oExcel, $sFilePath [, $iStartRow = 1 [, $iDataType = Default [, $sTextQualifier = $xlTextQualifierDoubleQuote [, $bConsecutiveDelimiter = False [, $sDelimiter = "," [, $aFieldInfo = "" [, $sDecimalSeparator = Default [, $sThousandsSeparator = Default [, $bTrailingMinusNumbers = True [, $iOrigin = Default]]]]]]]]]] ) 打开一个文本文件, 并解析其内容到新工作簿的工作表 (需要: #include <Excel.au3>)
_Excel_BookSave ( $oWorkbook ) 保存指定的工作簿. (需要: #include <Excel.au3>)
_Excel_BookSaveAs ( $oWorkbook, $sFilePath [, $iFormat = $xlWorkbookDefault [, $bOverWrite = False [, $sPassword = Default [, $sWritePassword = Default [, $bReadOnlyRecommended = False]]]]] ) 工作簿另存为新的文件名和/或类型. (需要: #include <Excel.au3>)
_Excel_Close ( $oExcel [, $bSaveChanges = True [, $bForceClose = False]] ) 关闭所有工作表和 Excel 应用实例 (需要: #include <Excel.au3>)
_Excel_ColumnToLetter ( $iColumn ) 列号转换为字母 (需要: #include <Excel.au3>)
_Excel_ColumnToNumber ( $sColumn ) 转换列字母为数字 (需要: #include <Excel.au3>)
_Excel_ConvertFormula ( $oExcel, $sFormula, $iFromStyle [, $iToStyle = Default [, $iToAbsolute = Default [, $vRelativeTo = Default]]] ) 转换公式单元格引用的 A1 和 R1C1 引用样式, 相对和绝对引用类型, 或者在两者之间 (需要: #include <Excel.au3>)
_Excel_Export ( $oExcel, $vObject, $sFileName [, $iType = $xlTypePDF [, $iQuality = $xlQualityStandard [, $bIncludeProperties = True [, $iFrom = Default [, $iTo = Default [, $bOpenAfterPublish = Default]]]]]] ) 导出工作簿, 工作表, 图表或指定范围为 PDF 或 XPS (需要: #include <Excel.au3>)
_Excel_FilterGet ( $oWorkbook [, $vWorksheet = Default] ) 返回设置筛选器的列表 (需要: #include <Excel.au3>)
_Excel_FilterSet ( $oWorkbook, $vWorksheet, $vRange, $iField [, $sCriteria1 = Default [, $iOperator = Default [, $sCriteria2 = Default]]] ) 设置/取消设置筛选定义和筛选范围 (需要: #include <Excel.au3>)
_Excel_Open ( [$bVisible = True [, $bDisplayAlerts = False [, $bScreenUpdating = True [, $bInteractive = True [, $bForceNew = False]]]]] ) 连接现有 Excel 实例, 或创建一个新实例 (需要: #include <Excel.au3>)
_Excel_PictureAdd ( $oWorkbook, $vWorksheet, $sFile, $vRangeOrLeft [, $iTop = Default [, $iWidth = Default [, $iHeight = Default [, $bKeepRatio = True]]]] ) 添加图片到指定工作簿和工作表 (需要: #include <Excel.au3>)
_Excel_Print ( $oExcel, $vObject [, $iCopies = Default [, $sPrinter = Default [, $bPreview = Default [, $iFrom = Default [, $iTo = Default [, $bPrintToFile = Default [, $bCollate = Default [, $sPrToFileName = ""]]]]]]]] ) 打印工作簿, 工作表, 图表或范围 (需要: #include <Excel.au3>)
_Excel_RangeCopyPaste ( $oWorksheet, $vSourceRange [, $vTargetRange = Default [, $bCut = False [, $iPaste = Default [, $iOperation = Default [, $bSkipBlanks = False [, $bTranspose = False]]]]]] ) 剪切或复制一或多个单元格, 行或列到一个范围, 或从剪贴板中执行类似操作 (需要: #include <Excel.au3>)
_Excel_RangeDelete ( $oWorksheet, $vRange [, $iShift = Default [, $iEntireRowCol = Default]] ) 删除指定工作表中一或多个单元格, 行或列 (需要: #include <Excel.au3>)
_Excel_RangeFind ( $oWorkbook, $sSearch [, $vRange = Default [, $iLookIn = $xlValues [, $iLookAt = $xlPart [, $bMatchcase = False]]]] ) 查找范围或工作簿中匹配的单元格, 并返回匹配单元格的信息数组 (需要: #include <Excel.au3>)
_Excel_RangeInsert ( $oWorksheet, $vRange [, $iShift = Default [, $iCopyOrigin = Default]] ) 插入一或多个空单元格, 行或列到指定工作表 (需要: #include <Excel.au3>)
_Excel_RangeLinkAddRemove ( $oWorkbook, $vWorksheet, $vRange, $sAddress [, $sSubAddress = Default [, $sScreenTip = Default [, $sTextToDisplay = Default]]] ) 添加或删除指定范围的超链接 (需要: #include <Excel.au3>)
_Excel_RangeRead ( $oWorkbook [, $vWorksheet = Default [, $vRange = Default [, $iReturn = 1 [, $bForceFunc = False]]]] ) 读指定工作簿和工作表单元格或单元格范围的取值, 公式或显示文本 (需要: #include <Excel.au3>)
_Excel_RangeReplace ( $oWorkbook, $vWorksheet, $vRange, $sSearch, $sReplace [, $iLookAt = $xlPart [, $bMatchcase = False]] ) 查找并替换范围或工作表的匹配字符串 (需要: #include <Excel.au3>)
_Excel_RangeSort ( $oWorkbook, $vWorksheet, $vRange, $vKey1 [, $iOrder1 = $xlAscending [, $iSortText = $xlSortNormal [, $iHeader = $xlNo [, $bMatchcase = False [, $iOrientation = $xlSortRows [, $vKey2 = Default [, $iOrder2 = Default [, $vKey3 = Default [, $iOrder3 = Default]]]]]]]]] ) 排序单元格范围 (需要: #include <Excel.au3>)
_Excel_RangeValidate ( $oWorkbook, $vWorksheet, $vRange, $iType, $sFormula1 [, $iOperator = Default [, $sFormula2 = Default [, $bIgnoreBlank = True [, $iAlertStyle = $xlValidAlertStop [, $sErrorMessage = Default [, $sInputMessage = Default]]]]]] ) 添加数据有效性到指定的范围 (需要: #include <Excel.au3>)
_Excel_RangeWrite ( $oWorkbook, $vWorksheet, $vValue [, $vRange = "A1" [, $bValue = True [, $bForceFunc = False]]] ) 写入值或公式到单元格或指定工作簿和工作表的单元格范围 (需要: #include <Excel.au3>)
_Excel_SheetAdd ( $oWorkbook [, $vSheet = Default [, $bBefore = True [, $iCount = 1 [, $sName = ""]]]] ) 添加工作簿的新工作表, 并设置它们的名称 (需要: #include <Excel.au3>)
_Excel_SheetCopyMove ( $oSourceBook [, $vSourceSheet = Default [, $oTargetBook = $oSourceBook [, $vTargetSheet = 1 [, $bBefore = True [, $bCopy = True]]]]] ) 在相同或不同工作簿中复制或移动指定工作表之前或之后的工作表 (需要: #include <Excel.au3>)
_Excel_SheetDelete ( $oWorkbook [, $vSheet = Default] ) 删除对象指定的表, 字符串名称或编号 (需要: #include <Excel.au3>)
_Excel_SheetList ( $oWorkbook ) 返回工作簿中所有工作表名称列表的数组. (需要: #include <Excel.au3>)
_FileCountLines ( $sFilePath ) 返回指定文件的行数. (需要: #include <File.au3>)
_FileCreate ( $sFilePath ) 创建或者清零指定的文件. (需要: #include <File.au3>)
_FileListToArray ( $sFilePath [, $sFilter = "*" [, $iFlag = $FLTA_FILESFOLDERS [, $bReturnPath = False]]] ) 创建指定文件夹的文件 和\或 文件夹清单数组(类似于使用 Dir /B 开关) (需要: #include <File.au3>)
_FileListToArrayRec ( $sFilePath [, $sMask = "*" [, $iReturn = $FLTAR_FILESFOLDERS [, $iRecur = $FLTAR_NORECUR [, $iSort = $FLTAR_NOSORT [, $iReturnPath = $FLTAR_RELPATH]]]]] ) 列表指定路径的文件和\或文件夹，可定义递归深度和对搜索结果排序. (需要: #include <File.au3>)
_FilePrint ( $sFilePath [, $iShow = @SW_HIDE] ) 打印一个纯文本文件. (需要: #include <File.au3>)
_FileReadToArray ( $sFilePath, ByRef $vReturn [, $iFlags = $FRTA_COUNT [, $sDelimiter = ""]] ) 读取文件内容到 1D 或 2D 数组. (需要: #include <File.au3>)
_FileWriteFromArray ( $sFilePath, Const ByRef $aArray [, $iBase = Default [, $iUBound = Default [, $sDelimiter = "|"]]] ) 将一数组写入到指定的文件. (需要: #include <File.au3>)
_FileWriteLog ( $sLogPath, $sLogMsg [, $iFlag = -1] ) 写入当前日期,时间和指定文本到日志文件. (需要: #include <File.au3>)
_FileWriteToLine ( $sFilePath, $iLine, $sText [, $bOverWrite = False] ) 写入文本到文件的指定行. (需要: #include <File.au3>)
_FTP_Close ( $hSession ) 关闭 _FTP_Open 或 _FTP_Connect会话. (需要: #include <FTPEx.au3>)
_FTP_Command ( $hFTPSession, $sFTPCommand [, $iFlags = $FTP_TRANSFER_TYPE_ASCII [, $iExpectResponse = 0 [, $iContext = 0]]] ) 发送命令到 FTP 服务器. (需要: #include <FTPEx.au3>)
_FTP_Connect ( $hInternetSession, $sServerName, $sUsername, $sPassword [, $iPassive = 0 [, $iServerPort = 0 [, $iService = $INTERNET_SERVICE_FTP [, $iFlags = 0 [, $fuContext = 0]]]]] ) 连接 FTP 服务器. (需要: #include <FTPEx.au3>)
_FTP_DecodeInternetStatus ( $iInternetStatus ) 分析互联网接收状态. (需要: #include <FTPEx.au3>)
_FTP_DirCreate ( $hFTPSession, $sRemote ) 在 FTP 服务器上建立目录. (需要: #include <FTPEx.au3>)
_FTP_DirDelete ( $hFTPSession, $sRemote ) 删除 FTP 服务器上的目录. (需要: #include <FTPEx.au3>)
_FTP_DirGetCurrent ( $hFTPSession ) 获取 FTP 服务器当前目录. (需要: #include <FTPEx.au3>)
_FTP_DirPutContents ( $hFTPSession, $sLocalFolder, $sRemoteFolder, $bRecursivePut [, $iContext = 0] ) 选定 Recursivley, 将文件夹放入 FTP 服务器. (需要: #include <FTPEx.au3>)
_FTP_DirSetCurrent ( $hFTPSession, $sRemote ) 设置 FTP 服务器的当前目录. (需要: #include <FTPEx.au3>)
_FTP_FileClose ( $hFTPFile ) 关闭 _FTP_FileOpen 返回的句柄. (需要: #include <FTPEx.au3>)
_FTP_FileDelete ( $hFTPSession, $sRemoteFile ) 从 FTP 服务器删除文件. (需要: #include <FTPEx.au3>)
_FTP_FileGet ( $hFTPSession, $sRemoteFile, $sLocalFile [, $bFailIfExists = False [, $iFlagsAndAttributes = 0 [, $iFlags = $FTP_TRANSFER_TYPE_UNKNOWN [, $iContext = 0]]]] ) 从 FTP 服务器获取文件. (需要: #include <FTPEx.au3>)
_FTP_FileGetSize ( $hFTPSession, $sFileName ) 获取 FTP 服务器的文件大小. (需要: #include <FTPEx.au3>)
_FTP_FileOpen ( $hConnect, $sFileName [, $iAccess = $GENERIC_READ [, $iFlags = $INTERNET_FLAG_TRANSFER_BINARY [, $iContext = 0]]] ) 打开 FTP 服务器的远程文件供读/写. (需要: #include <FTPEx.au3>)
_FTP_FilePut ( $hFTPSession, $sLocalFile, $sRemoteFile [, $iFlags = 0 [, $iContext = 0]] ) 在 FTP 服务器上放置一个文件. (需要: #include <FTPEx.au3>)
_FTP_FileRead ( $hFTPFile, $iNumberOfBytesToRead ) 使用 _FTP_FileOpen() 返回的文件句柄读取数据. (需要: #include <FTPEx.au3>)
_FTP_FileRename ( $hFTPSession, $sExisting, $sNew ) 重命名 FTP 服务器的文件. (需要: #include <FTPEx.au3>)
_FTP_FileTimeLoHiToStr ( $iLoDWORD, $iHiDWORD [, $bFmt = 0] ) 转换文件时间(filetime)的 Loword 与 Hiword 为一个字符串. (需要: #include <FTPEx.au3>)
_FTP_FindFileClose ( $hFTPFind ) 删除 FindFile 句柄. (需要: #include <FTPEx.au3>)
_FTP_FindFileFirst ( $hFTPSession, $sRemotePath, ByRef $hFTPFind [, $iFlags = 0 [, $iContext = 0]] ) 查找 FTP 服务器的第一个文件. (需要: #include <FTPEx.au3>)
_FTP_FindFileNext ( $hFTPFind ) 查找 FTP 服务器的下一个文件. (需要: #include <FTPEx.au3>)
_FTP_GetLastResponseInfo ( ByRef $iError, ByRef $sMessage ) 检索最后一个错误描述或服务器的响应. (需要: #include <FTPEx.au3>)
_FTP_ListToArray ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] ) 获取当前远程目录的文件名, 目录或两项. (需要: #include <FTPEx.au3>)
_FTP_ListToArray2D ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] ) 获取当前远程目录文件名和文件大小. (需要: #include <FTPEx.au3>)
_FTP_ListToArrayEx ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iFmt = 1 [, $iContext = 0]]]] ) 获取当前远程目录的文件/目录的名称, 大小, 属性和时间. (需要: #include <FTPEx.au3>)
_FTP_Open ( $sAgent [, $iAccessType = $INTERNET_OPEN_TYPE_DIRECT [, $sProxyName = '' [, $sProxyBypass = '' [, $iFlags = 0]]]] ) 打开 FTP 会话. (需要: #include <FTPEx.au3>)
_FTP_ProgressDownload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] ) 下载二进制模式文件,并显示(或通过调用用户自定义函数)进度窗口. (需要: #include <FTPEx.au3>)
_FTP_ProgressUpload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] ) 上传二进制模式文件,并显示(或通过调用用户自定义函数)进度窗口 (需要: #include <FTPEx.au3>)
_FTP_SetStatusCallback ( $hInternetSession, $sFunctionName ) 注册回调函数, WinInet 函数可以调用它获取操作过程的进展. (需要: #include <FTPEx.au3>)
_GDIPlus_ArrowCapCreate ( $fHeight, $fWidth [, $bFilled = True] ) 创建指定高度和宽度的可调节箭头线帽. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapDispose ( $hCap ) 释放可调节箭头线帽对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetFillState ( $hArrowCap ) 获取箭头帽填充状态. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetHeight ( $hArrowCap ) 获取箭头帽高度. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetMiddleInset ( $hArrowCap ) 获取插入值. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetWidth ( $hArrowCap ) 获取箭头帽宽度. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetFillState ( $hArrowCap [, $bFilled = True] ) 设置箭头帽填充状态. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetHeight ( $hArrowCap, $fHeight ) 设置箭头帽高度. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetMiddleInset ( $hArrowCap, $fInset ) 获取插入值. (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetWidth ( $hArrowCap, $fWidth ) 设置箭头帽宽度. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null] ) 应用指定的效果改变一个位图(使用对象句柄) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] ) 应用指定的效果改变一个位图(使用坐标参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCloneArea ( $hBitmap, $nLeft, $nTop, $nWidth, $nHeight [, $iFormat = 0x00021808] ) 创建指定坐标和格式的位图对象克隆. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapConvertFormat ( $hBitmap, $iPixelFormat, $iDitherType, $iPaletteType, $tPalette [, $fAlphaThresholdPercent = 0.0] ) 将位图转换为指定的像素格式 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null [, $tOutRECT = Null]] ) 应用指定效果到现有的位图创建新位图(使用结构参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] ) 应用指定效果到现有的位图创建新位图(使用坐标参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateDIBFromBitmap ( $hBitmap ) 创建 DIB 部件 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromFile ( $sFileName ) 从文件中创建位图对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromGraphics ( $iWidth, $iHeight, $hGraphics ) 创建基于图形对象宽度和高度的位图对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHBITMAP ( $hBitmap [, $hPal = 0] ) 从位图句柄创建位图对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHICON ( $hIcon ) 创建一个基于图标的位图对象(使用句柄参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHICON32 ( $hIcon ) 创建一个基于 32 位图标的位图对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromMemory ( $dImage [, $bHBITMAP = False] ) 加载保存为二进制字符串的图像(JPG, BMP, PNG, 等.), 并将其转换为 GDI+ 位图或 GDI(WinAPI 位图格式) 位图. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromResource ( $hInst, $vResourceName ) 创建一个基于图标的位图对象.(使用资源参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromScan0 ( $iWidth, $iHeight [, $iPixelFormat = $GDIP_PXF32ARGB [, $iStride = 0 [, $pScan0 = 0]]] ) 创建一个基于数组字节大小和格式信息的位图对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromStream ( $pStream ) 创建一个基于 IStream COM 接口的位图对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateHBITMAPFromBitmap ( $hBitmap [, $iARGB = 0xFF000000] ) 从位图对象创建位图句柄. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapDispose ( $hBitmap ) 释放位图对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogram ( $hBitmap, $iHistogramFormat, $iHistogramSize, $tChannel_0 [, $tChannel_1 = 0 [, $tChannel_2 = 0 [, $tChannel_3 = 0]]] ) 返回指定位图及指定颜色通道的一或多个直方图 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogramEx ( $hBitmap ) 返回位图颜色通道：红, 绿, 蓝, 透明度和灰色的直方图 (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogramSize ( $iFormat ) 返回由 _GDIPlus_BitmapGetHistogramEx() 分配的元素数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetPixel ( $hBitmap, $iX, $iY ) 获取位图中指定像素的颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapLockBits ( $hBitmap, $iLeft, $iTop, $iWidth, $iHeight [, $iFlags = $GDIP_ILMREAD [, $iFormat = $GDIP_PXF32RGB]] ) 为读/写操作锁定部分位图. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapSetPixel ( $hBitmap, $iX, $iY, $iARGB ) 在位图中设置指定像素的颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_BitmapUnlockBits ( $hBitmap, $tBitmapData ) 解锁 _GDIPlus_BitmapLockBits 锁定的部分位图. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushClone ( $hBrush ) 克隆画刷(Brush)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushCreateSolid ( [$iARGB = 0xFF000000] ) 创建实心画笔对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushDispose ( $hBrush ) 释放画刷对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushGetSolidColor ( $hBrush ) 获取实心画刷对象颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushGetType ( $hBrush ) 检索画刷对象类型. (需要: #include <GDIPlus.au3>)
_GDIPlus_BrushSetSolidColor ( $hBrush [, $iARGB = 0xFF000000] ) 设置实心画刷对象颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreate (  ) 创建并初始化标识颜色矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateGrayScale (  ) 创建并初始化一个灰色缩放矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateNegative (  ) 创建并初始化一个负的颜色矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateSaturation ( $fSat ) 创建并初始化一个饱和度颜色矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateScale ( $fRed, $fGreen, $fBlue [, $fAlpha = 1] ) 创建并初始化一个缩放比例的颜色矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateTranslate ( $fRed, $fGreen, $fBlue [, $fAlpha = 0] ) 创建并初始化一个换算颜色矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapClone ( $hCustomLineCap ) 克隆自定义线帽对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapCreate ( $hPathFill, $hPathStroke [, $iLineCap = 0 [, $nBaseInset = 0]] ) 创建一个 CustomLineCap(自定义线帽)对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapDispose ( $hCap ) 释放自定义线帽对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapGetStrokeCaps ( $hCustomLineCap ) 获取线帽的结束开始和结尾样式 (需要: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapSetStrokeCaps ( $hCustomLineCap, $iStartCap, $iEndCap ) 设置线帽基线到线开始点的距离 (需要: #include <GDIPlus.au3>)
_GDIPlus_Decoders (  ) 获取可用图像解码器信息的数组. (需要: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetCount (  ) 获取可用的图像解码器数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetSize (  ) 获取 _GDIPlus_GetImageDecoders 返回结构的总大小. (需要: #include <GDIPlus.au3>)
_GDIPlus_DrawImageFX ( $hGraphics, $hImage, $hEffect [, $tRECTF = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]] ) 应用指定效果绘制图像的一部分 (需要: #include <GDIPlus.au3>)
_GDIPlus_DrawImageFXEx ( $hGraphics, $hImage, $hEffect [, $nX = 0 [, $nY = 0 [, $nW = 0 [, $nH = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]]]]] ) 应用指定效果绘制图像的一部分(使用坐标参数) (需要: #include <GDIPlus.au3>)
_GDIPlus_DrawImagePoints ( $hGraphic, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY [, $iCount = 3] ) 在指定的位置绘制图像. (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreate ( $sEffectGUID ) 创建由 GUID 参数指定类型的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateBlur ( [$fRadius = 10.0 [, $bExpandEdge = False]] ) 创建一个模糊类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateBrightnessContrast ( [$iBrightnessLevel = 0 [, $iContrastLevel = 0]] ) 创建一个亮度对比类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorBalance ( [$iCyanRed = 0 [, $iMagentaGreen = 0 [, $iYellowBlue = 0]]] ) 创建色彩平衡类的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorCurve ( $iAdjustment, $iChannel, $iAdjustValue ) 创建色彩平衡类的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorLUT ( $aColorLUT ) 创建一个颜色 LUT 类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorMatrix ( $tColorMatrix ) 创建一个颜色矩阵效果类对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateHueSaturationLightness ( [$iHueLevel = 0 [, $iSaturationLevel = 0 [, $iLightnessLevel = 0]]] ) 创建一个色相饱和亮度类的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateLevels ( [$iHighlight = 100 [, $iMidtone = 0 [, $iShadow = 0]]] ) 创建一个平坦类的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateRedEyeCorrection ( $aAreas ) 创建一个红眼校正类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateSharpen ( [$fRadius = 10.0 [, $fAmount = 50.0]] ) 创建一个锐化类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateTint ( [$iHue = 0 [, $iAmount = 0]] ) 创建一个色相类效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectDispose ( $hEffect ) 删除指定的效果对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectGetParameters ( $hEffect, $tEffectParameters ) 返回指定效果对象的参数 (需要: #include <GDIPlus.au3>)
_GDIPlus_EffectSetParameters ( $hEffect, $tEffectParameters [, $iSizeAdjust = 1] ) 设置指定效果对象的参数 (需要: #include <GDIPlus.au3>)
_GDIPlus_Encoders (  ) 获取可用图像编码器信息的数组. (需要: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCLSID ( $sFileExtension ) 返回具体图像文件类型的编码器 CLSID. (需要: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCount (  ) 获取可用的图像编码器数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamList ( $hImage, $sEncoder ) 获取指定图像编码器的参数列表. (需要: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamListSize ( $hImage, $sEncoder ) 获取图像编码器参数列表的大小. (需要: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetSize (  ) 获取 _GDIPlus_GetImageEncoders 返回结构的总大小. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontCreate ( $hFamily, $fSize [, $iStyle = 0 [, $iUnit = 3]] ) 创建字体对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontDispose ( $hFont ) 释放字体对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreate ( $sFamily [, $pCollection = 0] ) 创建字体族对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreateFromCollection ( $sFontName, $hFontCollection ) 基于指定字体创建字体系列对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyDispose ( $hFamily ) 释放字体族对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetCellAscent ( $hFontFamily [, $iStyle = 0] ) 获取指定样式或样式组合的字体系列单元格的上升设计单位. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetCellDescent ( $hFontFamily [, $iStyle = 0] ) 获取指定样式或样式组合的字体系列单元格的下降设计单位. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetEmHeight ( $hFontFamily [, $iStyle = 0] ) 获取字体系列的大小(通常称为 em 大小或 em 高度)的设计单位. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetLineSpacing ( $hFontFamily [, $iStyle = 0] ) 获取指定样式或样式组合的字体系列的行间距设计单位. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontGetHeight ( $hFont, $hGraphics ) 获取当前指定图形对象中某种字体的行距单位. (需要: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateAddFont ( $hFontCollection, $sFontFile ) 将字体文件添加到专用字体集合 (需要: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateAddMemoryFont ( $hFontCollection, $tFont ) 添加系统内存中的字体到 Microsoft? Windows? GDI+ 字体集合(译注: ? 为中文文档不能显示的商标注册符号) (需要: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateCollectionDispose ( $hFontCollection ) 删除指定的专用字体集合对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateCreateCollection (  ) 创建专用字体集合对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsClear ( $hGraphics [, $iARGB = 0xFF000000] ) 清除图形对象的指定颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHDC ( $hDC ) 从设备环境(DC)创建图形对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHWND ( $hWnd ) 从窗口句柄创建图形对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDispose ( $hGraphics ) 释放图形对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawArc ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] ) 绘制弧线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawBezier ( $hGraphics, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 [, $hPen = 0] ) 绘制贝塞尔样条线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve ( $hGraphics, $aPoints [, $hPen = 0] ) 绘制封闭曲线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] ) 绘制闭合的基数样条曲线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve ( $hGraphics, $aPoints [, $hPen = 0] ) 绘制曲线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] ) 绘制基数样条 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] ) 绘制椭圆. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImage ( $hGraphics, $hImage, $nX, $nY ) 绘制图像对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImagePointsRect ( $hGraphics, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight [, $hImageAttributes = 0 [, $iUnit = 2]] ) 绘制图像 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRect ( $hGraphics, $hImage, $nX, $nY, $nW, $nH ) 绘制图像到指定的位置. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRectRect ( $hGraphics, $hImage, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight, $nDstX, $nDstY, $nDstWidth, $nDstHeight [, $pAttributes = 0 [, $iUnit = 2]] ) 绘制图像对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawLine ( $hGraphics, $nX1, $nY1, $nX2, $nY2 [, $hPen = 0] ) 绘制直线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPath ( $hGraphics, $hPath [, $hPen = 0] ) 绘制由 GraphicsPath(图形路径) 对象定义的系列直线和曲线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] ) 绘制饼图. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPolygon ( $hGraphics, $aPoints [, $hPen = 0] ) 绘制多边形. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] ) 绘制矩形. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawString ( $hGraphics, $sString, $nX, $nY [, $sFont = "Arial" [, $fSize = 10 [, $iFormat = 0]]] ) 绘制字符串. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawStringEx ( $hGraphics, $sString, $hFont, $tLayout, $hFormat, $hBrush ) 绘制字符串(使用数据结构). (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve ( $hGraphics, $aPoints [, $hBrush = 0] ) 填充封闭曲线. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hBrush = 0 [, $iFillMode = 0]] ) 从点数组创建闭合的基数样条, 并使用画刷(brush)填充样条内部. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] ) 填充椭圆. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPath ( $hGraphics, $hPath [, $hBrush = 0] ) 使用画刷(brush)填充路径的内部. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hBrush = 0] ) 填充饼图. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPolygon ( $hGraphics, $aPoints [, $hBrush = 0] ) 填充多边形. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] ) 填充矩形. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRegion ( $hGraphics, $hRegion [, $hBrush = 0] ) 使用画刷(brush)填充指定的区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetCompositingMode ( $hGraphics ) 获取当前图形对象设置的混合模式 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetCompositingQuality ( $hGraphics ) 获取当前图形对象设置的混合质量 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetDC ( $hGraphics ) 获取图形对象的设备环境句柄. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetInterpolationMode ( $hGraphics ) 获取当前为图形对象设置的插值模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetSmoothingMode ( $hGraphics ) 获取图形对象的渲染质量. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetTransform ( $hGraphics, $hMatrix ) 获取一个图形对象的世界变换矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureCharacterRanges ( $hGraphics, $sString, $hFont, $tLayout, $hStringFormat ) 获取区域对象组, 其中每个字符串界定了一个范围内的字符位置. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureString ( $hGraphics, $sString, $hFont, $tLayout, $hFormat ) 测量字符串大小. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsReleaseDC ( $hGraphics, $hDC ) 释放图形对象的设备环境. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsResetClip ( $hGraphics ) 设置图形对象的剪辑区域为一个无限区域 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsResetTransform ( $hGraphics ) 设置图形对象的世界变换矩阵为单位矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsRestore ( $hGraphics, $iState ) 恢复图形对象状态到 _GDIPlus_GraphicsSave() 存储的图形对象状态 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsRotateTransform ( $hGraphics, $fAngle [, $iOrder = 0] ) 用本身和旋转矩阵的结果更新图形对象的世界变换矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSave ( $hGraphics ) 保存图形对象的当前状态 (变换, 裁剪区域和质量设置) (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsScaleTransform ( $hGraphics, $fScaleX, $fScaleY [, $iOrder = 0] ) 用本身和缩放矩阵的乘积更新图形对象的世界变换矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipPath ( $hGraphics, $hPath [, $iCombineMode = 0] ) 用本身剪切区域和由图形路径指定区域的组合更新图形对象的区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 0] ) 更新图形对象的裁剪区域为本身和矩形的组合区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipRegion ( $hGraphics, $hRegion [, $iCombineMode = 0] ) 更新图形对象的剪辑区域为自身区域和区域对象指定区域的组合区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetCompositingMode ( $hGraphics, $iCompositionMode ) 设置图形对象的合成模式 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetCompositingQuality ( $hGraphics, $iCompositionQuality ) 设置图形对象的合成质量 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetInterpolationMode ( $hGraphics, $iInterpolationMode ) 设置图形对象的插值模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetPixelOffsetMode ( $hGraphics, $iPixelOffsetMode ) 设置图形对象的像素偏移量模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetSmoothingMode ( $hGraphics, $iSmooth ) 设置图形对象绘制质量. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTextRenderingHint ( $hGraphics, $iTextRenderingHint ) 设置图形对象的对比度值 (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTransform ( $hGraphics, $hMatrix ) 设置图像对象的世界坐标空间. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsTransformPoints ( $hGraphics, ByRef $aPoints [, $iCoordSpaceTo = 0 [, $iCoordSpaceFrom = 1]] ) 将点数组从一个坐标空间转换到另一个坐标空间. (需要: #include <GDIPlus.au3>)
_GDIPlus_GraphicsTranslateTransform ( $hGraphics, $nDX, $nDY [, $iOrder = 0] ) 用本身和转换矩阵的乘积更新图形对象的世界变换矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_HatchBrushCreate ( [$iHatchStyle = 0 [, $iARGBForeground = 0xFFFFFFFF [, $iARGBBackground = 0xFFFFFFFF]]] ) 基于阴影样式, 前景色, 和背景颜色创建阴影画刷对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_HICONCreateFromBitmap ( $hBitmap ) 从一个位图对象创建一个图标句柄 (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesCreate (  ) 创建图像属性对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesDispose ( $hImageAttributes ) 释放图像属性对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetColorKeys ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $iARGBLow = 0 [, $iARGBHigh = 0]]]] ) 设置或清除指定类别的颜色键(透明范围). (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetColorMatrix ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $tClrMatrix = 0 [, $tGrayMatrix = 0 [, $iColorMatrixFlags = 0]]]]] ) 设置或清除指定类别的颜色和灰度调整矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageDispose ( $hImage ) 释放图像对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetDimension ( $hImage ) 获取 GDIPlus 支持的图像宽度和高度 (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetFlags ( $hImage ) 枚举图像的像素数据属性. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetGraphicsContext ( $hImage ) 获取图像的图形环境. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHeight ( $hImage ) 获取图像高度. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHorizontalResolution ( $hImage ) 获取图像水平分辨率 DPI(每英寸像素). (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetPixelFormat ( $hImage ) 获取图像的像素格式: 每像素位, Alpha 通道, RGB, 灰度, 索引等. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetRawFormat ( $hImage ) 返回图像的文件格式 GUID 和图像格式名称. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetThumbnail ( $hImage [, $iWidth = 0 [, $iHeight = 0 [, $bKeepRatio = True [, $hCallback = Null [, $hCallbackData = Null]]]]] ) 获取目标图像的缩略图 (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetType ( $hImage ) 返回图像的类型(位图或图元文件). (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetVerticalResolution ( $hImage ) 获取图像的垂直分辨率 DPI(每英寸像素) (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageGetWidth ( $hImage ) 获取图像宽度. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromFile ( $sFileName ) 创建基于图像文件的对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromStream ( $pStream ) 创建基于流的图像对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageResize ( $hImage, $iNewWidth, $iNewHeight [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] ) 调整图像到一个新的指定大小 (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageRotateFlip ( $hImage, $iRotateFlipType ) 旋转与翻转图像 (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFile ( $hImage, $sFileName ) 图像保存到文件. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFileEx ( $hImage, $sFileName, $sEncoder [, $tParams = 0] ) 图像保存到文件(扩展). (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToStream ( $hImage, $pStream, $tEncoder [, $tParams = 0] ) 将图像对象保存到流中. (需要: #include <GDIPlus.au3>)
_GDIPlus_ImageScale ( $hImage, $iScaleW, $iScaleH [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] ) 以指定的比例缩放图像 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreate ( $nX1, $nY1, $nX2, $nY2, $iARGBClr1, $iARGBClr2 [, $iWrapMode = 0] ) 从一组边界点和边界颜色创建一个线性渐变画刷对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreateFromRect ( $tRECTF, $iARGBClr1, $iARGBClr2 [, $iGradientMode = 0 [, $iWrapMode = 0]] ) 指定矩形和边界颜色创建线性渐变画刷对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreateFromRectWithAngle ( $tRECTF, $iARGBClr1, $iARGBClr2, $fAngle [, $bIsAngleScalable = True [, $iWrapMode = 0]] ) 指定矩形, 边界颜色和方向角创建线性渐变画刷对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushGetColors ( $hLineGradientBrush ) 获取线性渐变画刷(brush)的起始颜色和结束颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushGetRect ( $hLineGradientBrush ) 获取定义的线性渐变画刷的矩形边界 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushMultiplyTransform ( $hLineGradientBrush, $hMatrix [, $iOrder = 0] ) 更新画刷的变换矩阵与本身和另一个矩阵的结果 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushResetTransform ( $hLineGradientBrush ) 将线性渐变画笔的变换矩阵重置为个性矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetBlend ( $hLineGradientBrush, $aBlends ) 设置混合因子和混合位置创建自定义混合线性渐变画刷(brush). (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetColors ( $hLineGradientBrush, $iARGBStart, $iARGBEnd ) 设置线性渐变画刷(brush)的起始颜色和结束颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetGammaCorrection ( $hLineGradientBrush [, $bUseGammaCorrection = True] ) 指定是否为线性渐变画刷(brush)启用灰度校正. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetLinearBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] ) 设置混合形状的线性渐变画刷, 创建基于三角形形状的自定义混合形状 (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetPresetBlend ( $hLineGradientBrush, $aInterpolations ) 设置线性渐变画刷(brush)和其相应混合位置的插值颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetSigmaBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] ) 基于钟形曲线设置线性渐变画刷(brush)的混合形状, 用于创建一个自定义的混合. (需要: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetTransform ( $hLineGradientBrush, $hMatrix ) 设置线性渐变画刷的转换矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixClone ( $hMatrix ) 克隆一个矩阵对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixCreate (  ) 创建并初始化矩阵对象为单位矩阵 (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixDispose ( $hMatrix ) 释放矩阵对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixGetElements ( $hMatrix ) 获取矩阵中的元素 (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixInvert ( $hMatrix ) 用本身的逆矩阵元素替换矩阵元素. (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixMultiply ( $hMatrix1, $hMatrix2 [, $iOrder = 0] ) 更新矩阵本身和另一个矩阵的结果(1) (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixRotate ( $hMatrix, $fAngle [, $bAppend = False] ) 旋转矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixScale ( $hMatrix, $fScaleX, $fScaleY [, $bOrder = False] ) 缩放矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixSetElements ( $hMatrix [, $nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] ) 设置矩阵的元素 (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixShear ( $hMatrix, $fShearX, $fShearY [, $iOrder = 0] ) 更新矩阵本身和另一个矩阵的结果(2) (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixTransformPoints ( $hMatrix, ByRef $aPoints ) 相乘矩阵数组中的每个点. (需要: #include <GDIPlus.au3>)
_GDIPlus_MatrixTranslate ( $hMatrix, $fOffsetX, $fOffsetY [, $bAppend = False] ) 移动矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_PaletteInitialize ( $iEntries [, $iPaletteType = $GDIP_PaletteTypeOptimal [, $iOptimalColors = 0 [, $bUseTransparentColor = True [, $hBitmap = Null]]]] ) 初始化一个标准，最佳，或自定义的调色板 (需要: #include <GDIPlus.au3>)
_GDIPlus_ParamAdd ( ByRef $tParams, $sGUID, $iNbOfValues, $iType, $pValues ) 添加值到编码器参数列表. (需要: #include <GDIPlus.au3>)
_GDIPlus_ParamInit ( $iCount ) 分配一个空的编码器参数列表. (需要: #include <GDIPlus.au3>)
_GDIPlus_ParamSize (  ) 获取一个编码器参数大小 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddArc ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle ) 路径的当前图形中添加一条椭圆弧. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddBezier ( $hPath, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 ) 添加一条贝塞尔样条到路径的当前图形中 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddClosedCurve ( $hPath, $aPoints ) 向路径添加闭合的基数样条. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddClosedCurve2 ( $hPath, $aPoints [, $nTension = 0.5] ) 向路径添加闭合的基数样条. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve ( $hPath, $aPoints ) 添加基数样条到路径的当前图形中. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve2 ( $hPath, $aPoints [, $nTension = 0.5] ) 添加基数样条到路径的当前图形中. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve3 ( $hPath, $aPoints, $iOffset, $iNumOfSegments [, $nTension = 0.5] ) 添加基数样条到路径的当前图形中. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddEllipse ( $hPath, $nX, $nY, $nWidth, $nHeight ) 向当前图形路径添加一个椭圆. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddLine ( $hPath, $nX1, $nY1, $nX2, $nY2 ) 添加一条直线到路径的当前图形中. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddLine2 ( $hPath, $aPoints ) 添加线条序列到当前图形路径 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddPath ( $hPath1, $hPath2 [, $bConnect = True] ) 将路径添加到另一条路径. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddPie ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle ) 向路径添加一个饼图. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddPolygon ( $hPath, $aPoints ) 向路径添加多边形. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddRectangle ( $hPath, $nX, $nY, $nWidth, $nHeight ) 向路径添加一个矩形. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathAddString ( $hPath, $sString, $tLayout, $hFamily [, $iStyle = 0 [, $fSize = 8.5 [, $hFormat = 0]]] ) 向路径添加一个字符串. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushCreate ( $aPoints [, $iWrapMode = 0] ) 创建一个基于点数组的路径渐变画刷(Brush)对象, 并初始化画刷(Brush)的换行模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushCreateFromPath ( $hPath ) 基于图形路径对象创建路径渐变画刷(Brush)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetCenterPoint ( $hPathGradientBrush ) 获取路径渐变画刷(Brush)的中心点. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetFocusScales ( $hPathGradientBrush ) 获取径渐变画刷(Brush)的焦点尺度. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetPointCount ( $hPathGradientBrush ) 获取定义画刷(Brush)边界路径点的数组中点的数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetRect ( $hPathGradientBrush ) 获取封闭路径渐变画刷(Brush)边界路径的最小矩形. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetWrapMode ( $hPathGradientBrush ) 获取当前路径渐变画刷(Brush)设置的自动换行模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushMultiplyTransform ( $hPathGradientBrush, $hMatrix [, $iOrder = 0] ) 更新画刷的变换矩阵与本身和另一个矩阵的结果 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushResetTransform ( $hPathGradientBrush ) 将路径渐变画刷(Brush)的变换矩阵重置为单位矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetBlend ( $hPathGradientBrush, $aBlends ) 设置路径渐变画刷(Brush)的混合因子和混合位置. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetCenterColor ( $hPathGradientBrush, $iARGB ) 设置路径渐变画刷(Brush)的中心点颜色 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetCenterPoint ( $hPathGradientBrush, $nX, $nY ) 设置路径渐变画刷(Brush)的中心点. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetFocusScales ( $hPathGradientBrush, $fScaleX, $fScaleY ) 设置路径渐变画刷(Brush)的焦点尺度. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetGammaCorrection ( $hPathGradientBrush, $bUseGammaCorrection ) 指定路径渐变画刷(Brush)是否启用灰度校正. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetLinearBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] ) 基于三角形形状设置路径渐变画刷(Brush)的混合形状, 创建一个自定义的混合. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetPresetBlend ( $hPathGradientBrush, $aInterpolations ) 预设路径渐变画刷(Brush)颜色和混合位置 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSigmaBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] ) 基于钟形曲线设置路径渐变画刷(Brush)的混合形状, 创建一个自定义的混合. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSurroundColor ( $hPathGradientBrush, $iARGB ) 设置路径渐变画刷(Brush)的环绕颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSurroundColorsWithCount ( $hPathGradientBrush, $aColors ) 设置当前路径渐变画刷(Brush)为指定的环绕颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetTransform ( $hPathGradientBrush, $hMatrix ) 设置路径渐变画刷(Brush)的变换矩阵. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetWrapMode ( $hPathGradientBrush, $iWrapMode ) 设置路径渐变画刷(Brush)的换行模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathClone ( $hPath ) 克隆路径. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathCloseFigure ( $hPath ) 关闭当前的路径图形. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathCreate ( [$iFillMode = 0] ) 创建一个图形路径对象并初始化填充模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathCreate2 ( $aPathData [, $iFillMode = 0] ) 根据点数组, 类型数组, 和填充模式创建一个图形路径对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathDispose ( $hPath ) 释放图形路径对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathFlatten ( $hPath [, $fFlatness = 0.25 [, $hMatrix = 0]] ) 应用转换将路径和路径中的每条曲线转换为一系列的相互连接线. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetData ( $hPath ) 从路径中获取的点和类型的数组. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetFillMode ( $hPath ) 获取路径的填充模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetLastPoint ( $hPath ) 获取路径终点的最后一个轮廓 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetPointCount ( $hPath ) 获取路径数据点数组中的点数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetPoints ( $hPath ) 从路径获取一个点数组. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathGetWorldBounds ( $hPath [, $hMatrix = 0 [, $hPen = 0]] ) 获取边界矩形的路径. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIsOutlineVisiblePoint ( $hPath, $nX, $nY [, $hPen = 0 [, $hGraphics = 0]] ) 确定指定的图形和画笔(pen)的特定点是否接触路径的轮廓. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIsVisiblePoint ( $hPath, $nX, $nY [, $hGraphics = 0] ) 当通过指定图形对象填充路径时，确定指定点是否在填充区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterCreate ( $hPath ) 创建一个新的 GraphicsPathIterator(图形路径迭代) 对象, 并将它与一个图形路径对象关联. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterDispose ( $hPathIter ) 释放图形路径迭代对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterGetSubpathCount ( $hPathIter ) 获取路径中的子路径(也称为图形)的数量. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterNextMarkerPath ( $hPathIter, $hPath ) 获取一个迭代关联路径的下一个标记分隔部分 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterNextSubpathPath ( $hPathIter, $hPath ) 从迭代的关联路径获取下一图形(子路径). (需要: #include <GDIPlus.au3>)
_GDIPlus_PathIterRewind ( $hPathIter ) 倒回到其关联路径的开始迭代. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathReset ( $hPath ) 清空一个路径并将填充模式设置为备用. (0) (需要: #include <GDIPlus.au3>)
_GDIPlus_PathReverse ( $hPath ) 定义一个路径的直线和曲线的点的顺序反转. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathSetFillMode ( $hPath, $iFillMode ) 设置路径的填充模式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathSetMarker ( $hPath ) 选定路径最后一个点作为一个标记点 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathStartFigure ( $hPath ) 启动一个新的轮廓，但不关闭目前的轮廓. 随后点添加到新轮廓的路径 (需要: #include <GDIPlus.au3>)
_GDIPlus_PathTransform ( $hPath, $hMatrix ) 将每个路径的数据点由指定的矩阵相乘. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathWarp ( $hPath, $hMatrix, $aPoints, $nX, $nY, $nWidth, $nHeight [, $iWarpMode = 0 [, $fFlatness = 0.25]] ) 应用一个经转化的路径. 该函数还展平路径 (转换为一个序列的直线). (需要: #include <GDIPlus.au3>)
_GDIPlus_PathWiden ( $hPath, $hPen [, $hMatrix = 0 [, $fFlatness = 0.25]] ) 替换填充时指定画笔(pen)绘制路径的曲线封闭区域, 该函数还可以简化路径. (需要: #include <GDIPlus.au3>)
_GDIPlus_PathWindingModeOutline ( $hPath [, $hMatrix = 0 [, $fFlatness = 0.25]] ) 转换和平展路径, 然后将其转换为路径的数据点, 以便使它们能表示路径的轮廓. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenCreate ( [$iARGB = 0xFF000000 [, $nWidth = 1 [, $iUnit = 2]]] ) 创建画笔(pen)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenCreate2 ( $hBrush [, $nWidth = 1 [, $iUnit = 2]] ) 使用画刷(brush)属性创建一支画笔(pen)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenDispose ( $hPen ) 释放画笔(pen)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetAlignment ( $hPen ) 获取画笔(pen)对齐方式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetColor ( $hPen ) 获取画笔(pen)颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetCustomEndCap ( $hPen ) 获取自定义画笔(pen)终端线帽 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashCap ( $hPen ) 获取短划线线帽样式 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashStyle ( $hPen ) 获取短划线样式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetEndCap ( $hPen ) 获取画笔(pen)终点线帽. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetMiterLimit ( $hPen ) 获取当前为画笔(Pen)对象设置的斜切(miter)长度 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenGetWidth ( $hPen ) 获取画笔(pen)宽度. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetAlignment ( $hPen [, $iAlignment = 0] ) 设置画笔(pen)对齐方式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetColor ( $hPen, $iARGB ) 设置画笔(pen)颜色. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetCustomEndCap ( $hPen, $hEndCap ) 自定义画笔(pen)终点线帽. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashCap ( $hPen [, $iDash = 0] ) 设置短划线线帽样式. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashStyle ( $hPen [, $iStyle = 0] ) 设置短划线样式 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetEndCap ( $hPen, $iEndCap ) 设置画笔(pen)终点线帽. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetLineCap ( $hPen, $iStartCap, $iEndCap, $iDashCap ) 设置线帽开始, 结束的样式, 并用画笔()绘制线条中的划线 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetLineJoin ( $hPen, $iLineJoin ) 设置画笔(pen)对象的线联接. (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetMiterLimit ( $hPen, $fMiterLimit ) 设置画笔(Pen)对象的斜切限制 (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetStartCap ( $hPen, $iLineCap ) 设置画笔(Pen)对象的线帽(译注:所有内容与 _GDIPlus_PenSetLineCap() 完全重复) (需要: #include <GDIPlus.au3>)
_GDIPlus_PenSetWidth ( $hPen, $fWidth ) 设置画笔(pen)宽度. (需要: #include <GDIPlus.au3>)
_GDIPlus_RectFCreate ( [$nX = 0 [, $nY = 0 [, $nWidth = 0 [, $nHeight = 0]]]] ) 创建 $tagGDIPRECTF(图形填充矩形) 结构. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionClone ( $hRegion ) 克隆区域对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCombinePath ( $hRegion, $hPath [, $iCombineMode = 2] ) 更新本身部分与指定路径相交的区域内部. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCombineRect ( $hRegion, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 2] ) 更新本身的部分与指定矩形相交的区域内部. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCombineRegion ( $hRegionDst, $hRegionSrc [, $iCombineMode = 2] ) 更新到本身部分与另一个区域相交的区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCreate (  ) 创建一个无限区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCreateFromPath ( $hPath ) 创建由路径对象定义, 并且具有路径填充模式的区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionCreateFromRect ( $nX, $nY, $nWidth, $nHeight ) 创建矩形所定义的区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionDispose ( $hRegion ) 释放一个区域对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionGetBounds ( $hRegion, $hGraphics ) 获取一个矩形的封闭区域 (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionGetHRgn ( $hRegion [, $hGraphics = 0] ) 从 GDI+ 区域对象创建一个 GDI 区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionTransform ( $hRegion, $hMatrix ) 将区域转换乘以每个指定的矩阵及其数据点. (需要: #include <GDIPlus.au3>)
_GDIPlus_RegionTranslate ( $hRegion, $nDX, $nDY ) 按指定数量在水平和垂直方向偏移一个区域. (需要: #include <GDIPlus.au3>)
_GDIPlus_Shutdown (  ) 清理 Microsoft Windows GDI+ 使用的资源. (需要: #include <GDIPlus.au3>)
_GDIPlus_Startup ( [$sGDIPDLL = Default [, $bRetDllHandle = False]] ) 初始化 Microsoft Windows GDI+. (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatCreate ( [$iFormat = 0 [, $iLangID = 0]] ) 创建字符串格式对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatDispose ( $hFormat ) 释放字符串格式对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatGetMeasurableCharacterRangeCount ( $hStringFormat ) 获取字符串格式对象当前设置的字符范围. (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetAlign ( $hStringFormat, $iFlag ) 设置字符串格式对象的文本对齐. (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetLineAlign ( $hStringFormat, $iStringAlign ) 设置字符串格式对象相对于线条布局矩形的原点对齐 (需要: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetMeasurableCharacterRanges ( $hStringFormat, $aRanges ) 设置字符串格式对象的字符系列范围, 用于测量字符串. (需要: #include <GDIPlus.au3>)
_GDIPlus_TextureCreate ( $hImage [, $iWrapMode = 0] ) 创建一个基于图像和环绕模式的纹理画刷(brush)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_TextureCreate2 ( $hImage, $nX, $nY, $nWidth, $nHeight [, $iWrapMode = 0] ) 创建基于图像, 自动换行模式和定义矩形的纹理画刷(brush)对象. (需要: #include <GDIPlus.au3>)
_GDIPlus_TextureCreateIA ( $hImage, $nX, $nY, $nWidth, $nHeight [, $pImageAttributes = 0] ) 创建基于图像, 定义矩形和一组图像属性的纹理画刷对象. (需要: #include <GDIPlus.au3>)
_GetIP (  ) 获取网络/计算机的公网 IP 地址. (需要: #include <Inet.au3>)
_GUICtrlAVI_Close ( $hWnd ) 关闭 AVI 剪辑. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Create ( $hWnd [, $sFilePath = "" [, $iSubFileID = -1 [, $iX = 0 [, $iY = 0 [, $iWidth = 0 [, $iHeight = 0 [, $iStyle = 0x00000006 [, $iExStyle = 0x00000000]]]]]]]] ) 创建 AVI 控件. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Destroy ( ByRef $hWnd ) 删除 AVI 控件. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_IsPlaying ( $hWnd ) 检查 AVI 剪辑是否音频视频交错播放 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Open ( $hWnd, $sFileName ) 在动画控件中打开并显示 AVI 剪辑的第一帧. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_OpenEx ( $hWnd, $sFileName, $iResourceID ) 在动画控件中打开并显示 AVI 剪辑的第一帧(扩展) (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Play ( $hWnd [, $iFrom = 0 [, $iTo = -1 [, $iRepeat = -1]]] ) 播放 AVI 剪辑 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Seek ( $hWnd, $iFrame ) 设置控件显示 AVI 剪辑中的特定帧. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Show ( $hWnd, $iState ) 显示/隐藏 AVI 控件. (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Stop ( $hWnd ) 停止播放 AVI 剪辑. (需要: #include <GuiAVI.au3>)
_GUICtrlButton_Click ( $hWnd ) 模拟用户点击按钮. (需要: #include <GuiButton.au3>)
_GUICtrlButton_Create ( $hWnd, $sText, $iX, $iY, $iWidth, $iHeight [, $iStyle = -1 [, $iExStyle = -1]] ) 创建按钮控件. (需要: #include <GuiButton.au3>)
_GUICtrlButton_Destroy ( ByRef $hWnd ) 删除按钮控件. (需要: #include <GuiButton.au3>)
_GUICtrlButton_Enable ( $hWnd [, $bEnable = True] ) 应用或者禁用鼠标和键盘对指定按钮的输入 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetCheck ( $hWnd ) 获取单选按钮或者复选框的选中状态. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetFocus ( $hWnd ) 检索按钮键盘焦点. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetIdealSize ( $hWnd ) 获取按钮适配文本和图像的最佳尺寸. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetImage ( $hWnd ) 获取与按钮关联的图像(图标或位图)句柄. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetImageList ( $hWnd ) 检索描述图像列表对按钮控件分配状态的数组. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetNote ( $hWnd ) 获取命令链接按钮关联的注释文字. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetNoteLength ( $hWnd ) 获取命令链接按钮提示文本的长度. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetSplitInfo ( $hWnd ) 获取拆分按钮控件信息. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetState ( $hWnd ) 获取按钮或复选框的状态. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetText ( $hWnd ) 检索按钮的文本. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetTextMargin ( $hWnd ) 获取按钮中文本的页边距. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetCheck ( $hWnd [, $iState = $BST_CHECKED] ) 设置单选按钮或复选框的选取状态. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetDontClick ( $hWnd [, $bState = True] ) 设置按钮的 $BST_DONTCLICK 状态标志. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetFocus ( $hWnd [, $bFocus = True] ) 设置指定按钮的键盘焦点. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetImage ( $hWnd, $sImageFile [, $iIconID = -1 [, $bLarge = False]] ) 设置按钮的图像 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetImageList ( $hWnd, $hImage [, $iAlign = 0 [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]] ) 分配图像列表到按钮控件. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetNote ( $hWnd, $sNote ) 设置命令链接按钮相关的注释文本. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetShield ( $hWnd [, $bRequired = True] ) 设置指定按钮或命令链接所需的提升状态, 以显示提升图标 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetSize ( $hWnd, $iWidth, $iHeight ) 设置按钮大小. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetSplitInfo ( $hWnd [, $hImlGlyph = -1 [, $iSplitStyle = $BCSS_ALIGNLEFT [, $iWidth = 0 [, $iHeight = 0]]]] ) 设置拆分按钮控件信息 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetState ( $hWnd [, $bHighlighted = True] ) 设置按钮的加亮状态. 加亮状态表明按钮处于忙碌状态. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetStyle ( $hWnd, $iStyle ) 设置按钮样式. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetText ( $hWnd, $sText ) 设置按钮文本. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetTextMargin ( $hWnd [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]] ) 设置按钮控件的文本边距. (需要: #include <GuiButton.au3>)
_GUICtrlButton_Show ( $hWnd [, $bShow = True] ) 显示/隐藏按钮. (需要: #include <GuiButton.au3>)
_GUICtrlComboBoxEx_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) 添加目录和文件. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_AddString ( $hWnd, $sText [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]] ) 添加字符串. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_BeginUpdate ( $hWnd ) 启动(扩展组合)控件更新, 直到调用 EndUpdate 函数. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00200002 [, $iExStyle = 0x00000000]]]] ) 创建扩展组合框(ComboBoxEx)控件 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) 创建单色位图. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_DeleteString ( $hWnd, $iIndex ) 移除扩展组合框控件的项目 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Destroy ( ByRef $hWnd ) 删除控件. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_EndUpdate ( $hWnd ) 结束(扩展组合)控件更新, 关闭 BeginUpdate 函数. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_FindStringExact ( $hWnd, $sText [, $iIndex = -1] ) 搜索字符串(完全匹配) (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboBoxInfo ( $hWnd, ByRef $tInfo ) 获取指定组合控件相关信息. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboControl ( $hWnd ) 获取扩展组合的子组合框控件句柄. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCount ( $hWnd ) 检索项目数量. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCurSel ( $hWnd ) 检索当前选定项的索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRect ( $hWnd ) 检索组合控件列表框展开时的屏幕坐标(返回数据数组). (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRectEx ( $hWnd ) 检索控件中列表框展开状态时的屏幕坐标(返回数据结构). (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedState ( $hWnd ) 确定组合控件列表框是否展开. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedWidth ( $hWnd ) 检索组合控件列表框最小允许宽度. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditControl ( $hWnd ) 获取扩展组合控件的编辑框句柄. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditSel ( $hWnd ) 获取组合控件编辑框当前选定字符的开始和结束位置. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditText ( $hWnd ) 获取扩展组合控件编辑框的文本. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedStyle ( $hWnd ) 获取扩展组合控件的扩展样式. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedUI ( $hWnd ) 确定组合控件是否为默认或扩展的用户界面. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetImageList ( $hWnd ) 获取扩展组合控件使用的图像列表句柄. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItem ( $hWnd, $iIndex ) 检索项目属性. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemEx ( $hWnd, ByRef $tItem ) 检索部分或者全部项目的属性. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemHeight ( $hWnd [, $iComponent = -1] ) 获取组合框列表项目或选择区域的高度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemImage ( $hWnd, $iIndex ) 检索项目的图标索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemIndent ( $hWnd, $iIndex ) 检索项目缩进量(一个缩进量等于一个图像宽度) (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemOverlayImage ( $hWnd, $iIndex ) 检索项目的覆盖图像索引 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemParam ( $hWnd, $iIndex ) 检索项目的特定应用值. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemSelectedImage ( $hWnd, $iIndex ) 检索选中项目的图像索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemText ( $hWnd, $iIndex, ByRef $sText ) 检索组合框列表的字符串 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemTextLen ( $hWnd, $iIndex ) 获取组合控件列表框项目字符串长度. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetList ( $hWnd ) 检索组合控件列表框全部项目(返回文本字符串) (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetListArray ( $hWnd ) 检索组合控件列表框全部项目(返回字符串数组) (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocale ( $hWnd ) 检索当前语言环境. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleCountry ( $hWnd ) 检索当前国家(或地区)代码. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleLang ( $hWnd ) 检索当前语言标识符. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocalePrimLang ( $hWnd ) 从语言 ID 中提取主语言 ID. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleSubLang ( $hWnd ) 从语言 ID 提取子语言 ID. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetMinVisible ( $hWnd ) 检索组合控件下拉列表最小可见项目数. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetTopIndex ( $hWnd ) 获取组合控件列表第一可见项的 0 基索引. 如果控件具有 $CBS_NOINTEGRALHEIGHT 样式, 则忽略此函数 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetUnicode ( $hWnd ) 检索控件是否使用 Unicode. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InitStorage ( $hWnd, $iNum, $iBytes ) 分配用于存储列表框项目的内存. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InsertString ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] ) 插入新项目. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_LimitText ( $hWnd [, $iLimit = 0] ) 限制组合控件编辑框文本输入长度. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ReplaceEditSel ( $hWnd, $sText ) 替换编辑框选定文本 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ResetContent ( $hWnd ) 移除所有项目. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetCurSel ( $hWnd [, $iIndex = -1] ) 选择组合控件列表框的字符串. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetDroppedWidth ( $hWnd, $iWidth ) 设置组合控件列表框最大允许像素宽度. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditSel ( $hWnd, $iStart, $iStop ) 选择组合控件的编辑框字符. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditText ( $hWnd, $sText ) 设置组合框控件编辑框文本. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedStyle ( $hWnd, $iExStyle [, $iExMask = 0] ) 设置扩展组合控件的扩展样式 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedUI ( $hWnd [, $bExtended = False] ) 选择默认或扩展的用户界面. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetImageList ( $hWnd, $hHandle ) 设置扩展组合控件图像列表 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] ) 设置部分或全部项目的属性(使用参数). (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemEx ( $hWnd, ByRef $tItem ) 设置部分或全部项目的属性(使用数据结构). (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemHeight ( $hWnd, $iComponent, $iHeight ) 设置组合控件列表框项目或选择区域的高度. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemImage ( $hWnd, $iIndex, $iImage ) 设置项目图标在图像列表中的索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemIndent ( $hWnd, $iIndex, $iIndent ) 设置项目缩进量(一个缩进量等于一个图像宽度). (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemOverlayImage ( $hWnd, $iIndex, $iImage ) 设置项目覆盖图标在图像列表中的索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemParam ( $hWnd, $iIndex, $iParam ) 设置项目的具体值. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemSelectedImage ( $hWnd, $iIndex, $iImage ) 设置项目(选中状态)图标在图像列表中的索引. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetMinVisible ( $hWnd, $iMinimum ) 设置组合控件列表框可见项目的最小数. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetTopIndex ( $hWnd, $iIndex ) 确保特定项目在组合控件列表框中可见. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetUnicode ( $hWnd [, $bUnicode = True] ) 设置控件是否使用 Unicode. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ShowDropDown ( $hWnd [, $bShow = False] ) 显示或隐藏组合控件列表框. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBox_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) 添加目录和文件名称. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AddString ( $hWnd, $sText ) 添加字符串. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AutoComplete ( $hWnd ) 自动完成组合控件的编辑框 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_BeginUpdate ( $hWnd ) 启动(组合)控件更新, 直到调用 EndUpdate 函数结束更新. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 120 [, $iStyle = 0x00200042 [, $iExStyle = 0x00000000]]]] ) 创建(ComboBox)组合控件 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_DeleteString ( $hWnd, $iIndex ) 删除字符串. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Destroy ( ByRef $hWnd ) 删除控件. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_EndUpdate ( $hWnd ) 结束(组合)控件更新, 关闭 BeginUpdate 函数 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindString ( $hWnd, $sText [, $iIndex = -1] ) 搜索字符串(部分匹配). (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindStringExact ( $hWnd, $sText [, $iIndex = -1] ) 搜索字符串(完全匹配) (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetComboBoxInfo ( $hWnd, ByRef $tInfo ) 获取指定组合控件相关信息. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCount ( $hWnd ) 检索项目数量. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCueBanner ( $hWnd ) 获取组合控件编辑框的提示文本. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCurSel ( $hWnd ) 检索当前选择项目的索引. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRect ( $hWnd ) 检索组合控件控件列表框展开时的屏幕坐标(返回数据数组). (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRectEx ( $hWnd ) 检索组合控件列表框展开时的屏幕坐标(返回数据结构). (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedState ( $hWnd ) 确定组合控件列表框是否展开. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedWidth ( $hWnd ) 检索组合控件列表框最小允许宽度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditSel ( $hWnd ) 获取组合控件编辑框当前选项字符的开始和结束位置. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditText ( $hWnd ) 获取组合控件编辑框的文本 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetExtendedUI ( $hWnd ) 确定组合控件是否为默认或扩展的用户界面. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetHorizontalExtent ( $hWnd ) 获取组合控件列表框水平滚动象素宽度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetItemHeight ( $hWnd [, $iIndex = -1] ) 获取组合框项目或选择区段的高度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBText ( $hWnd, $iIndex, ByRef $sText ) 检索组合控件列表框项目字符串. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBTextLen ( $hWnd, $iIndex ) 获取组合控件列表框项目字符串长度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetList ( $hWnd ) 检索组合控件列表框全部项目(返回文本字符串). (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetListArray ( $hWnd ) 检索组合控件列表框全部项目(返回文本数组). (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocale ( $hWnd ) 检索当前语言环境. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleCountry ( $hWnd ) 检索当前国家(或地区)代码. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleLang ( $hWnd ) 检索当前语言标识符. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocalePrimLang ( $hWnd ) 从语言 ID 中提取主语言 ID. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleSubLang ( $hWnd ) 从语言 ID 提取子语言 ID. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetMinVisible ( $hWnd ) 检索组合控件列表框最小可见项目数. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetTopIndex ( $hWnd ) 获取组合控件列表框第一可见项的 0 基索引. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InitStorage ( $hWnd, $iNum, $iBytes ) 分配用于存储列表框项目的内存. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InsertString ( $hWnd, $sText [, $iIndex = -1] ) 插入字符串. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_LimitText ( $hWnd [, $iLimit = 0] ) 限制组合控件编辑框文本输入长度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ReplaceEditSel ( $hWnd, $sText ) 替换编辑框选定文本. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ResetContent ( $hWnd ) 移除组合控件编辑框, 列表框全部项目. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SelectString ( $hWnd, $sText [, $iIndex = -1] ) 搜索组合控件列表框以指定字符开头的项目. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCueBanner ( $hWnd, $sText ) 设置组合控件编辑框的提示文本. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCurSel ( $hWnd [, $iIndex = -1] ) 选择组合控件列表框的字符串. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetDroppedWidth ( $hWnd, $iWidth ) 设置组合控件列表框最大允许像素宽度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditSel ( $hWnd, $iStart, $iStop ) 选择组合控件的编辑框字符. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditText ( $hWnd, $sText ) 设置组合框控件编辑框文本. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetExtendedUI ( $hWnd [, $bExtended = False] ) 选择默认或扩展的用户界面. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetHorizontalExtent ( $hWnd, $iWidth ) 设置组合框列表框水平滚动象素宽度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetItemHeight ( $hWnd, $iHeight [, $iComponent = -1] ) 设置组合控件列表框项目或选择区域的高度. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetMinVisible ( $hWnd, $iMinimum ) 设置组合控件列表框可见项目的最小数. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetTopIndex ( $hWnd, $iIndex ) 确保特定项目在组合控件列表框中可见. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ShowDropDown ( $hWnd [, $bShow = False] ) 显示或隐藏组合控件列表框. (需要: #include <GuiComboBox.au3>)
_GUICtrlDTP_Create ( $hWnd, $iX, $iY [, $iWidth = 120 [, $iHeight = 21 [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]]]] ) 创建 DTP(日期/时间选择器)控件. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_Destroy ( ByRef $hWnd ) 删除(日期时间选取器)控件. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCColor ( $hWnd, $iIndex ) 检索指定的颜色. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCFont ( $hWnd ) 检索月历字体句柄. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMonthCal ( $hWnd ) 检索月的子控件(日历)句柄. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRange ( $hWnd ) 检索当前系统允许的最低和最高时间值(返回数据数组) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRangeEx ( $hWnd ) 检索当前系统允许的最低和最高时间值(返回数据结构) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTime ( $hWnd ) 检索当前选定的日期/时间(返回数据数组) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTimeEx ( $hWnd ) 检索当前选定的日期/时间(返回数据结构) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetFormat ( $hWnd, $sFormat ) 设置(日期/时间)显示格式. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCColor ( $hWnd, $iIndex, $iColor ) 设置月(日)历指定部分的颜色. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCFont ( $hWnd, $hFont [, $bRedraw = True] ) 设置月(日)历字体. (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRange ( $hWnd, ByRef $aRange ) 设置系统最小和最大允许时间(使用数据数组) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRangeEx ( $hWnd, ByRef $tRange ) 设置系统最小和最大允许时间(使用数据结构) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTime ( $hWnd, ByRef $aDate ) 设置当前选定的日期和时间 (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTimeEx ( $hWnd, ByRef $tDate [, $bFlag = False] ) 设置当前选定的日期和时间(使用数据结构) (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlEdit_AppendText ( $hWnd, $sText ) 追加(编辑框)文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_BeginUpdate ( $hWnd ) 启动(编辑框)控件更新, 直到调用 EndUpdate 函数结束更新. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_CanUndo ( $hWnd ) 确定编辑控件的撤消队列是否有任何操作. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_CharFromPos ( $hWnd, $iX, $iY ) 检索距客户区指定点最近的字符信息. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x003010C4 [, $iExStyle = 0x00000200]]]] ) 创建编辑框控件. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Destroy ( ByRef $hWnd ) 删除编辑控件. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_EmptyUndoBuffer ( $hWnd ) 重置编辑控件撤消标志. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_EndUpdate ( $hWnd ) 结束(编辑框)控件更新, 关闭 _GUICtrlEdit_BeginUpdate 函数 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Find ( $hWnd [, $bReplace = False] ) 启动查找对话框. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_FmtLines ( $hWnd [, $bSoftBreak = False] ) 确定编辑控件是否包括软换行字符. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetCueBanner ( $hWnd ) 获取编辑控件中显示的提示标志文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetFirstVisibleLine ( $hWnd ) 检索多行编辑控件顶部可见行的 0 基索引. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLimitText ( $hWnd ) 获取编辑控件当前文本限制. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLine ( $hWnd, $iLine ) 检索编辑控件指定行的文本. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLineCount ( $hWnd ) 检索(编辑控件的)行数. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetMargins ( $hWnd ) 检索(编辑控件)左, 右边距的宽度. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetModify ( $hWnd ) 检索编辑控件的修改标志状态. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetPasswordChar ( $hWnd ) 获取编辑控件用于显示输入文本的密码字符. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECT ( $hWnd ) 检索编辑控件的格式化矩形(返回数据数组) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECTEx ( $hWnd ) 检索编辑控件的格式化矩形(数据结构) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetSel ( $hWnd ) 检索当前选择字符的开始和结束位置. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetText ( $hWnd ) 获取编辑控件文本. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetTextLen ( $hWnd ) 获取编辑控件所有文本的长度 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_HideBalloonTip ( $hWnd ) 隐藏编辑控件关联的气球提示. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_InsertText ( $hWnd, $sText [, $iIndex = -1] ) 插入文本(到编辑控件). (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineFromChar ( $hWnd [, $iIndex = -1] ) 检索指定索引字符所在行的索引. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineIndex ( $hWnd [, $iIndex = -1] ) 检索指定行第一个字符的索引. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineLength ( $hWnd [, $iIndex = -1] ) 检索(编辑控件指定)行的字符长度. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineScroll ( $hWnd, $iHoriz, $iVert ) 滚动(编辑控件)文本. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_PosFromChar ( $hWnd, $iIndex ) 检索编辑控件客户区指定字符的坐标. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_ReplaceSel ( $hWnd, $sText [, $bUndo = True] ) 替换(编辑控件)当前的选择. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Scroll ( $hWnd, $iDirection ) 垂直滚动(编辑控件)文本. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetCueBanner ( $hWnd, $sText [, $bOnFocus = False] ) 设置编辑控件显示的提示标志文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetLimitText ( $hWnd, $iLimit ) 设置(编辑控件)文本限制值 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetMargins ( $hWnd [, $iMargin = 0x1 [, $iLeft = 0xFFFF [, $iRight = 0xFFFF]]] ) 设置(编辑控件)左, 右边距的宽度. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetModify ( $hWnd, $bModified ) 设置或清除(编辑控件)修改标志. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = "0"] ) 设置或清除编辑控件的密码字符. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetReadOnly ( $hWnd, $bReadOnly ) 设置或删除(编辑控件)只读样式 ($ES_READONLY) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECT ( $hWnd, $aRect ) 设置多行编辑控件的格式化矩形.(使用数据数组) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTEx ( $hWnd, $tRECT ) 设置多行编辑控件的格式化矩形.(使用数据结构) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTNP ( $hWnd, $aRect ) 设置多行编辑控件的格式化矩形(不刷新,使用数组) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRectNPEx ( $hWnd, $tRECT ) 设置多行编辑控件的格式化矩形(不刷新,使用结构) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetSel ( $hWnd, $iStart, $iEnd ) 选择(编辑控件)字符范围. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetTabStops ( $hWnd, $aTabStops ) 设置(编辑控件)制表位. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetText ( $hWnd, $sText ) 设置(编辑控件)文本. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_ShowBalloonTip ( $hWnd, $sTitle, $sText, $iIcon ) 显示编辑控件关联的气球提示. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Undo ( $hWnd ) 取消编辑控件撤销队列中的最后操作. (需要: #include <GuiEdit.au3>)
_GUICtrlHeader_AddItem ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] ) 添加标题项目. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilter ( $hWnd, $iIndex ) 清除(标题控件)过滤器. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilterAll ( $hWnd ) 清除所有过滤器. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Create ( $hWnd [, $iStyle = 0x00000046] ) 创建标题控件. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_CreateDragImage ( $hWnd, $iIndex ) 创建半透明图像作为(标题控件)项目拖动图像. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_DeleteItem ( $hWnd, $iIndex ) 删除标题项目. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Destroy ( ByRef $hWnd ) 删除标题控件. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_EditFilter ( $hWnd, $iIndex [, $bDiscard = True] ) 编辑(标题控件)指定过滤器 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetBitmapMargin ( $hWnd ) 检索(标题控件)位图边距宽度. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetImageList ( $hWnd ) 检索(标题控件)图像列表句柄. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItem ( $hWnd, $iIndex, ByRef $tItem ) 检索(标题控件)项目信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemAlign ( $hWnd, $iIndex ) 检索(标题控件)项目文本对齐方式. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemBitmap ( $hWnd, $iIndex ) 检索(标题控件)项目位图句柄. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemCount ( $hWnd ) 检索(标题控件)项目数量. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemDisplay ( $hWnd, $iIndex ) 返回(标题控件)项目显示信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFlags ( $hWnd, $iIndex ) 返回(标题控件)项目标志信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFormat ( $hWnd, $iIndex ) 返回(标题控件)项目格式. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemImage ( $hWnd, $iIndex ) 检索图像列表中的(标题控件项目的)图像索引. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemOrder ( $hWnd, $iIndex ) 检索(标题控件)项目出现的顺序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemParam ( $hWnd, $iIndex ) 检索(标题控件)项目参数值. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRect ( $hWnd, $iIndex ) 检索(标题控件)指定项目的边界矩形.(返回数据数组) (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRectEx ( $hWnd, $iIndex ) 检索(标题控件)指定项目的边界矩形.(返回数据结构) (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemText ( $hWnd, $iIndex ) 返回(标题控件)项目文本. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemWidth ( $hWnd, $iIndex ) 检索(标题控件)项目的宽度. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetOrderArray ( $hWnd ) 从左到右检索标题控件当前项目的索引. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetUnicodeFormat ( $hWnd ) 检索(标题)控件的 Unicode 字符格式标志. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_HitTest ( $hWnd, $iX, $iY ) 检索(标题控件)指定点的项目. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_InsertItem ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] ) 插入新的标题项目. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Layout ( $hWnd, ByRef $tRECT ) 检索(标题)控件的大小和位置 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_OrderToIndex ( $hWnd, $iOrder ) 检索基于顺序的(标题)项目索引值. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetBitmapMargin ( $hWnd, $iWidth ) 设置(标题控件)项目位图边距的象素宽度. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetFilterChangeTimeout ( $hWnd, $iTimeOut ) 设置(标题控件)修改过滤器超时间隔. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetHotDivider ( $hWnd, $iFlag, $iInputValue ) 改变热分隔符的颜色. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetImageList ( $hWnd, $hImage ) 分配(标题控件)图像列表. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItem ( $hWnd, $iIndex, ByRef $tItem ) 设置(标题控件)项目信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemAlign ( $hWnd, $iIndex, $iAlign ) 设置(标题控件)项目文本对齐方式. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemBitmap ( $hWnd, $iIndex, $hBitmap ) 设置(标题控件)项目位图句柄. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemDisplay ( $hWnd, $iIndex, $iDisplay ) 设置(标题控件)项目显示信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFlags ( $hWnd, $iIndex, $iFlags ) 设置(标题控件)项目标志信息. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFormat ( $hWnd, $iIndex, $iFormat ) 设置(标题控件)项目格式. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemImage ( $hWnd, $iIndex, $iImage ) 设置(标题控件)图像列表内图像的索引. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemOrder ( $hWnd, $iIndex, $iOrder ) 设置(标题控件)项目出现的顺序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemParam ( $hWnd, $iIndex, $iParam ) 设置(标题控件)项目参数值. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemText ( $hWnd, $iIndex, $sText ) 设置(标题控件)项目文本. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemWidth ( $hWnd, $iIndex, $iWidth ) 设置(标题控件)项目的宽度. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetOrderArray ( $hWnd, ByRef $aOrder ) 设置(标题控件)当前项目从左到右的顺序. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetUnicodeFormat ( $hWnd, $bUnicode ) 设置(标题)控件的 Unicode 字符格式标志. (需要: #include <GuiHeader.au3>)
_GUICtrlIpAddress_ClearAddress ( $hWnd ) 清除 IP 地址控件内容. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Create ( $hWnd, $iX, $iY [, $iWidth = 125 [, $iHeight = 25 [, $iStyles = 0x00000000 [, $iExstyles = 0x00000000]]]] ) 创建 IP 地址控件. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Destroy ( ByRef $hWnd ) 删除 IP 地址控件. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Get ( $hWnd ) 检索(IP 地址)控件内的 IP 地址.(返回字符串) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetArray ( $hWnd ) 检索(IP 地址)控件内的 IP 地址.(返回数据数组) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetEx ( $hWnd ) 检索(IP 地址)控件内的 IP 地址.(返回数据结构) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_IsBlank ( $hWnd ) 检测 IP 地址控件的地址字段是否为空. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Set ( $hWnd, $sAddress ) 设置 IP 地址控件的地址.(使用字符串) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetArray ( $hWnd, $aAddress ) 设置 IP 地址控件的地址.(使用数据数组) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetEx ( $hWnd, $tIP ) 设置 IP 地址控件的地址.(使用数据结构) (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFocus ( $hWnd, $iIndex ) 设置键盘焦点到 IP 地址控件中指定的字段. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFont ( $hWnd [, $sFaceName = "Arial" [, $iFontSize = 12 [, $iFontWeight = 400 [, $bFontItalic = False]]]] ) 设置(IP 地址)控件字体. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetRange ( $hWnd, $iIndex [, $iLowRange = 0 [, $iHighRange = 255]] ) 设置 IP 地址指定字段的有效范围. (需要: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_ShowHide ( $hWnd, $iState ) 显示/隐藏 IP 地址控件. (需要: #include <GuiIPAddress.au3>)
_GUICtrlListBox_AddFile ( $hWnd, $sFilePath ) 添加指定目录的文件名到列表控件. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_AddString ( $hWnd, $sText ) 添加字符串(到列表框). (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_BeginUpdate ( $hWnd ) 启动(列表框)控件更新, 直到调用 EndUpdate 函数结束更新. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ClickItem ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] ) 点击(列表框)项目. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00B00002 [, $iExStyle = 0x00000200]]]] ) 创建ListBox(列表框)控件. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_DeleteString ( $hWnd, $iIndex ) 删除(列表框)字符串. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Destroy ( ByRef $hWnd ) 删除(列表框)控件 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Dir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) 添加目录和文件名称(到列表框). (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_EndUpdate ( $hWnd ) 结束(列表框)控件更新, 关闭 BeginUpdate 函数 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True]] ) 搜索(列表框)包含指定文本的项目. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_FindString ( $hWnd, $sText [, $bExact = False] ) 搜索(列表框)字符串 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetAnchorIndex ( $hWnd ) 检索(列表框)锚(固定)项目的索引. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCaretIndex ( $hWnd ) 返回(列表框)焦点项目的索引. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCount ( $hWnd ) 检索(列表框)项目数量. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCurSel ( $hWnd ) 检索(列表框)当前选择项目的索引. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetHorizontalExtent ( $hWnd ) 检索列表框的水平滚动宽度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemData ( $hWnd, $iIndex ) 检索应用程序定义的(列表框)项目关联值. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemHeight ( $hWnd ) 检索(列表框)项目高度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRect ( $hWnd, $iIndex ) 检索(列表框)项目的矩形范围.(返回数据数组) (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRectEx ( $hWnd, $iIndex ) 检索(列表框)项目的矩形范围.(返回数据结构) (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetListBoxInfo ( $hWnd ) 检索列表框列的项目数. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocale ( $hWnd ) 检索(列表框)当前语言环境. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleCountry ( $hWnd ) 检索(列表框)当前国家(地区)代码. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleLang ( $hWnd ) 检索(列表框)当前语言标识符. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocalePrimLang ( $hWnd ) 从语言 ID 中提取主语言 ID. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleSubLang ( $hWnd ) 从语言 ID 提取子语言 ID. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSel ( $hWnd, $iIndex ) 检索(列表框)项目的选择状态. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelCount ( $hWnd ) 检索(列表框)选定项目的总数. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItems ( $hWnd ) 填充(列表框)选定项的缓冲区和数组. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItemsText ( $hWnd ) 检索(列表框)选定项的文本. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetText ( $hWnd, $iIndex ) 返回指定索引的项目(字符串). (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTextLen ( $hWnd, $iIndex ) 获取列表框项目字符串长度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTopIndex ( $hWnd ) 检索列表框第一个可见项目的索引. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_InitStorage ( $hWnd, $iItems, $iBytes ) 分配存储(列表框)项目的内存. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_InsertString ( $hWnd, $sText [, $iIndex = -1] ) 在列表中插入字符串. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ItemFromPoint ( $hWnd, $iX, $iY ) 检索距指定点最近的(列表框)项目 0 基索引. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ReplaceString ( $hWnd, $iIndex, $sText ) 替换(列表框)项目文本. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ResetContent ( $hWnd ) 移除列表框所有项目. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelectString ( $hWnd, $sText [, $iIndex = -1] ) 搜索以指定字符串开始的(列表框)项目 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRange ( $hWnd, $iFirst, $iLast [, $bSelect = True] ) 在一个多选择列表框中选择一或多个连续的项目. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRangeEx ( $hWnd, $iFirst, $iLast ) 在一个多选择列表框中选择一或多个连续的项目.(兼有删除选中项功能) (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetAnchorIndex ( $hWnd, $iIndex ) 设置(列表框)锚(固定)项目, 多项选择从该项目开始 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCaretIndex ( $hWnd, $iIndex [, $bPartial = False] ) 设置多选择列表框指定索引项目的焦点矩形. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetColumnWidth ( $hWnd, $iWidth ) 设置(列表框)全部列的像素宽度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCurSel ( $hWnd, $iIndex ) 设置选择字符串, 如有必要, 则滚动到控件可见区 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetHorizontalExtent ( $hWnd, $iWidth ) 设置列表框水平滚动的像素宽度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemData ( $hWnd, $iIndex, $iValue ) 设置(列表框)指定项目的关联值. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemHeight ( $hWnd, $iHeight [, $iIndex = 0] ) 设置(列表框)项目的像素高度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetLocale ( $hWnd, $iLocal ) 设置(列表框)当前的语言环境. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetSel ( $hWnd [, $iIndex = -1 [, $iSelect = -1]] ) 在多重选择列表框中选择一个字符串. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTabStops ( $hWnd, $aTabStops ) 设置(列表框)制表位位置 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTopIndex ( $hWnd, $iIndex ) 设置特定项目在列表框中可见 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Sort ( $hWnd ) 重新排序列表框. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SwapString ( $hWnd, $iIndexA, $iIndexB ) 互换两个指定索引的(列表框)项目文本. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_UpdateHScroll ( $hWnd ) 根据最长的字符串更新(列表框)水平滚动条. (需要: #include <GuiListBox.au3>)
_GUICtrlListView_AddArray ( $hWnd, ByRef $aItems ) 从数组向列表视图控件添加项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddColumn ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) 添加列表视图列. (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddItem ( $hWnd, $sText [, $iImage = -1 [, $iParam = 0]] ) 添加项目到列表的末尾. (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddSubItem ( $hWnd, $iIndex, $sText, $iSubItem [, $iImage = -1] ) 添加列表视图子项. (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewHeight ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) 计算显示给定列表视图项目数量所需的近似高度. (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewRect ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) 计算显示给定列表视图项目数量所需的近似大小. (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewWidth ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) 计算用以显示给定列表视图项目数量所需的近似宽度. (需要: #include <GuiListView.au3>)
_GUICtrlListView_Arrange ( $hWnd [, $iArrange = 0] ) 排列视图图标项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_BeginUpdate ( $hWnd ) 启动列表视图控件更新, 直到调用 _GUICtrlListView_EndUpdate() 函数结束更新. (需要: #include <GuiListView.au3>)
_GUICtrlListView_CancelEditLabel ( $hWnd ) 取消列表视图项目的文本编辑操作. (需要: #include <GuiListView.au3>)
_GUICtrlListView_ClickItem ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) 点击列表视图项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_CopyItems ( $hWnd_Source, $hWnd_Destination [, $bDelFlag = False] ) 在两个 ListView 控件之间复制项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_Create ( $hWnd, $sHeaderText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x0000000D [, $iExStyle = 0x00000000 [, $bCoInit = False]]]]] ) 创建列表视图(ListView)控件. (需要: #include <GuiListView.au3>)
_GUICtrlListView_CreateDragImage ( $hWnd, $iIndex ) 创建列表视图指定项目的拖动图像列表 (需要: #include <GuiListView.au3>)
_GUICtrlListView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) 创建列表视图单色位图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_DeleteAllItems ( $hWnd ) 移除列表视图(ListView)所有项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_DeleteColumn ( $hWnd, $iCol ) 删除列表视图控件的列. (需要: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItem ( $hWnd, $iIndex ) 删除列表视图控件项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItemsSelected ( $hWnd ) 删除列表视图选中项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_Destroy ( ByRef $hWnd ) 删除列表视图控件. (需要: #include <GuiListView.au3>)
_GUICtrlListView_DrawDragImage ( ByRef $hWnd, ByRef $aDrag ) 绘制列表视图拖动图像. (需要: #include <GuiListView.au3>)
_GUICtrlListView_EditLabel ( $hWnd, $iIndex ) 编辑列表视图指定项的文本. (需要: #include <GuiListView.au3>)
_GUICtrlListView_EnableGroupView ( $hWnd [, $bEnable = True] ) 启用或禁用列表视图控件项目分组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_EndUpdate ( $hWnd ) 结束列表视图控件更新, 关闭 _GUICtrlListView_BeginUpdate() 函数. (需要: #include <GuiListView.au3>)
_GUICtrlListView_EnsureVisible ( $hWnd, $iIndex [, $bPartialOK = False] ) 确保列表视图项目全部或部分可见. (需要: #include <GuiListView.au3>)
_GUICtrlListView_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True [, $bReverse = False]]] ) 搜索包含指定文本的列表视图项目, 返回该项目索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_FindItem ( $hWnd, $iStart, ByRef $tFindInfo [, $sText = ""] ) 搜索指定特点的列表视图项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_FindNearest ( $hWnd, $iX, $iY [, $iDir = 0 [, $iStart = -1 [, $bWrapOK = True]]] ) 查找最接近指定位置的列表视图项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_FindParam ( $hWnd, $iParam [, $iStart = -1] ) 搜索指定参数值的列表视图项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_FindText ( $hWnd, $sText [, $iStart = -1 [, $bPartialOK = True [, $bWrapOK = True]]] ) 搜索指定文本的列表视图项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetBkColor ( $hWnd ) 检索列表视图控件的背景颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetBkImage ( $hWnd ) 检索列表视图控件背景图像. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetCallbackMask ( $hWnd ) 检索列表视图控件的回叫掩码. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetColumn ( $hWnd, $iIndex ) 检索列表视图列的属性. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnCount ( $hWnd ) 检索列表视图列数. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrder ( $hWnd ) 检索列表视图当前列的左到右顺序.(返回序号字符串) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrderArray ( $hWnd ) 检索列表视图当前列的左到右顺序(返回数据数组) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnWidth ( $hWnd, $iCol ) 检索报表视图或列表视图的列宽. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetCounterPage ( $hWnd ) 计算列表视图可视区域垂直显示的项目数量 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetEditControl ( $hWnd ) 检索列表视图项目文本的编辑控件句柄. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetExtendedListViewStyle ( $hWnd ) 检索列表视图当前的扩展样式. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetFocusedGroup ( $hWnd ) 获取列表视图具有焦点的组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupCount ( $hWnd ) 获取列表视图分组数量. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfo ( $hWnd, $iGroupID ) 检索列表视图组信息.(使用组 ID). (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfoByIndex ( $hWnd, $iIndex ) 检索列表视图组信息.(使用组索引). (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupRect ( $hWnd, $iGroupID [, $iGet = $LVGGR_GROUP] ) 获取列表视图指定组的矩形. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupViewEnabled ( $hWnd ) 检查列表视图是否启用组视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetHeader ( $hWnd ) 检索列表视图标题控件句柄 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetHotCursor ( $hWnd ) 检索列表视图热跟踪项目的鼠标指针 HCURSOR 值. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetHotItem ( $hWnd ) 检索列表视图热项目的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetHoverTime ( $hWnd ) 检索列表视图项目选中时, 鼠标悬停的时间量. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetImageList ( $hWnd, $iImageList ) 检索绘制列表视图项目的图像列表句柄. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetISearchString ( $hWnd ) 检索列表视图控件的增量搜索字符串 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItem ( $hWnd, $iIndex [, $iSubItem = 0] ) 检索列表视图项目的属性. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemChecked ( $hWnd, $iIndex ) 返回列表视图中项目选择状态. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCount ( $hWnd ) 检索列表视图的项目数量. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCut ( $hWnd, $iIndex ) 确定列表视图项目是否有剪切/粘贴操作标志. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemDropHilited ( $hWnd, $iIndex ) 确定是否列表视图项目作为拖放目标高亮显示(为色块框) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemEx ( $hWnd, ByRef $tItem ) 检索列表视图部分或者全部项目的属性. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemFocused ( $hWnd, $iIndex ) 确定是否列表视图项目作为拖放目标高亮显示(为虚线框) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemGroupID ( $hWnd, $iIndex ) 获取列表视图项目组 ID. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemImage ( $hWnd, $iIndex [, $iSubItem = 0] ) 检索列表视图项目的图标索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemIndent ( $hWnd, $iIndex ) 检索列表视图项目缩进量(一个缩进量等于一个图像宽度) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemParam ( $hWnd, $iIndex ) 获取列表视图项目的应用程序特定值. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPosition ( $hWnd, $iIndex ) 检索列表视图项目的位置. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionX ( $hWnd, $iIndex ) 检索列表视图项目的 X 位置. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionY ( $hWnd, $iIndex ) 检索列表视图项目的 Y 位置. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRect ( $hWnd, $iIndex [, $iPart = 3] ) 检索列表视图项目的全部或部分矩形.(返回数据数组) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRectEx ( $hWnd, $iIndex [, $iPart = 3] ) 检索列表视图项目的全部或部分矩形.(返回数据结构) (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSelected ( $hWnd, $iIndex ) 确定列表视图项目是否被选中. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacing ( $hWnd [, $bSmall = False] ) 确定列表视图控件的项目间距. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingX ( $hWnd [, $bSmall = False] ) 确定列表视图项目之间的水平间距 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingY ( $hWnd [, $bSmall = False] ) 确定列表视图项目之间的垂直间距. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemState ( $hWnd, $iIndex, $iMask ) 检索列表视图项目的状态. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemStateImage ( $hWnd, $iIndex ) 获取列表视图显示的状态图像. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemText ( $hWnd, $iIndex [, $iSubItem = 0] ) 检索列表视图项目或子项文本. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextArray ( $hWnd [, $iItem = -1] ) 检索列表视图指定项目及其子项的全部文本,返回文本字符串数组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextString ( $hWnd [, $iItem = -1] ) 检索列表视图指定项目及其子项的全部文本,返回分隔的字符串 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetNextItem ( $hWnd [, $iStart = -1 [, $iSearch = 0 [, $iState = 8]]] ) 搜索列表视图指定属性的项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetNumberOfWorkAreas ( $hWnd ) 检索列表视图控件工作区的数量. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetOrigin ( $hWnd ) 检索列表视图控件当前视图的起点. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginX ( $hWnd ) 检索列表视图控件当前视图水平源点. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginY ( $hWnd ) 检索列表视图控件当前视图垂直源点. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetOutlineColor ( $hWnd ) 检索列表视图控件的边框颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedColumn ( $hWnd ) 检索列表视图选定列的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedCount ( $hWnd ) 确定列表视图选中项目数. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedIndices ( $hWnd [, $bArray = False] ) 检索选定项目的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectionMark ( $hWnd ) 检索列表视图选中项的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetStringWidth ( $hWnd, $sString ) 确定列表视图指定字符串的宽度. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetSubItemRect ( $hWnd, $iIndex, $iSubItem [, $iPart = 0] ) 检索列表视图项目的边界矩形. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetTextBkColor ( $hWnd ) 检索列表视图控件的文本背景颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetTextColor ( $hWnd ) 检索列表视图控件的文本颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetToolTips ( $hWnd ) 检索提示工具控件句柄. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetTopIndex ( $hWnd ) 检索列表或报表视图顶部可见项目的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetUnicodeFormat ( $hWnd ) 检索列表视图 UNICODE 字符格式标志. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetView ( $hWnd ) 检索列表视图控件的当前视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewDetails ( $hWnd ) 确定列表视图控件是否为报表视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewLarge ( $hWnd ) 确定列表视图控件是否为大图标视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewList ( $hWnd ) 确定列表视图控件是否为列表视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewRect ( $hWnd ) 检索列表视图控件全部项目的边界矩形. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewSmall ( $hWnd ) 确定列表视图控件是否为小图标模式. (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetViewTile ( $hWnd ) 确定列表视图控件是否为平铺显示视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_HideColumn ( $hWnd, $iCol ) 隐藏列表视图列. "设置列宽为0". (需要: #include <GuiListView.au3>)
_GUICtrlListView_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) 确定列表视图指定位置的项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_InsertColumn ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) 插入列表视图列. (需要: #include <GuiListView.au3>)
_GUICtrlListView_InsertGroup ( $hWnd, $iIndex, $iGroupID, $sHeader [, $iAlign = 0] ) 插入列表视图组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_InsertItem ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iParam = 0]]] ) 列表视图控件插入项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_JustifyColumn ( $hWnd, $iIndex [, $iAlign = -1] ) 设置列表视图控件的列对齐. (需要: #include <GuiListView.au3>)
_GUICtrlListView_MapIDToIndex ( $hWnd, $iID ) 映射列表视图项目 ID 到索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_MapIndexToID ( $hWnd, $iIndex ) 映射列表视图项目索引到 ID. (需要: #include <GuiListView.au3>)
_GUICtrlListView_RedrawItems ( $hWnd, $iFirst, $iLast ) 强制刷新列表视图控件范围内的项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_RegisterSortCallBack ( $hWnd [, $bNumbers = True [, $bArrows = True]] ) 注册列表视图简单排序回调函数. (需要: #include <GuiListView.au3>)
_GUICtrlListView_RemoveAllGroups ( $hWnd ) 移除列表视图全部组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_RemoveGroup ( $hWnd, $iGroupID ) 移除列表视图组. (需要: #include <GuiListView.au3>)
_GUICtrlListView_Scroll ( $hWnd, $iDX, $iDY ) 滚动列表视图的内容. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetBkColor ( $hWnd, $iColor ) 设置列表视图控件的背景颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetBkImage ( $hWnd [, $sURL = "" [, $iStyle = 0 [, $iXOffset = 0 [, $iYOffset = 0]]]] ) 设置列表视图控件背景图像. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetCallBackMask ( $hWnd, $iMask ) 更改列表视图控件的回调掩码. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetColumn ( $hWnd, $iIndex, $sText [, $iWidth = -1 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) 设置列表视图列的属性. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrder ( $hWnd, $sOrder ) 设置列表视图列的左到右顺序.(使用分隔符). (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrderArray ( $hWnd, $aOrder ) 设置列表视图列的左到右顺序.(使用数组) (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnWidth ( $hWnd, $iCol, $iWidth ) 更改列表视图列宽. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetExtendedListViewStyle ( $hWnd, $iExStyle [, $iExMask = 0] ) 设置列表视图扩展样式. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetGroupInfo ( $hWnd, $iGroupID, $sHeader [, $iAlign = 0 [, $iState = $LVGS_NORMAL]] ) 设置列表视图组标题文本. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetHotItem ( $hWnd, $iIndex ) 设置列表视图热项目. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetHoverTime ( $hWnd, $iTime ) 设置列表视图项目选中前, 鼠标悬停该项目的时间. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetIconSpacing ( $hWnd, $iCX, $iCY ) 设置大图标列表视图的图标间距. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetImageList ( $hWnd, $hHandle [, $iType = 0] ) 分配图像列表到列表视图控件. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iSubItem = 0 [, $iImage = -1 [, $iParam = -1 [, $iIndent = -1]]]]] ) 设置列表视图部分或全部项目的属性.(使用参数) (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemChecked ( $hWnd, $iIndex [, $bCheck = True] ) 设置列表视图项目选中状态. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCount ( $hWnd, $iItems ) 为列表视图控件指定的项目数分配内存. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCut ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否标记列表视图项目为剪切和粘贴操作 (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemDropHilited ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否高亮显示列表视图项目为拖放目标 (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemEx ( $hWnd, ByRef $tItem ) 设置列表视图部分或全部项目的属性(使用数据结构) (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemFocused ( $hWnd, $iIndex [, $bEnabled = True] ) 设置列表视图项目是否具有焦点. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemGroupID ( $hWnd, $iIndex, $iGroupID ) 设置列表视图项目组 ID. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemImage ( $hWnd, $iIndex, $iImage [, $iSubItem = 0] ) 设置列表视图项目的图像列表内索引图标. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemIndent ( $hWnd, $iIndex, $iIndent ) 设置列表视图项目缩进量(一个缩进量等于一个图像宽度). (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemParam ( $hWnd, $iIndex, $iParam ) 设置列表视图项目的具体值. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition ( $hWnd, $iIndex, $iCX, $iCY ) 移动列表视图项目到指定位置. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition32 ( $hWnd, $iIndex, $iCX, $iCY ) 移动列表视图项目到指定位置.(32 位坐标值) (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemSelected ( $hWnd, $iIndex [, $bSelected = True [, $bFocused = False]] ) 设置列表视图项目选择状态. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemState ( $hWnd, $iIndex, $iState, $iStateMask ) 更改列表视图控件项目状态. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemStateImage ( $hWnd, $iIndex, $iImage ) 设置列表视图状态图像. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetItemText ( $hWnd, $iIndex, $sText [, $iSubItem = 0] ) 更改列表视图项目或子项文本. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetOutlineColor ( $hWnd, $iColor ) 设置列表视图边框颜色 (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectedColumn ( $hWnd, $iCol ) 设置列表视图选定列的索引. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectionMark ( $hWnd, $iIndex ) 设置列表视图控件选择标志. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetTextBkColor ( $hWnd, $iColor ) 设置列表视图控件文本的背景颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetTextColor ( $hWnd, $iColor ) 设置列表视图控件文本颜色. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetToolTips ( $hWnd, $hToolTip ) 设置列表视图提示工具控件, 用于显示工具提示. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetUnicodeFormat ( $hWnd, $bUnicode ) 设置列表视图控件的 UNICODE 字符格式标志. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetView ( $hWnd, $iView ) 设置列表视图控件的视图. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SetWorkAreas ( $hWnd, $iLeft, $iTop, $iRight, $iBottom ) 创建列表视图控件工作区. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SimpleSort ( $hWnd, ByRef $vSortSense, $iCol [, $bToggleSense = True] ) 排序列表视图控件(有限) (需要: #include <GuiListView.au3>)
_GUICtrlListView_SortItems ( $hWnd, $iCol ) 启动列表视图回叫排序, 并设置标题中的箭头. (需要: #include <GuiListView.au3>)
_GUICtrlListView_SubItemHitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) 确定哪些列表视图项目或子项目在控件的给定位置 (需要: #include <GuiListView.au3>)
_GUICtrlListView_UnRegisterSortCallBack ( $hWnd ) 注销列表视图排序回调函数. (需要: #include <GuiListView.au3>)
_GUICtrlMenu_AddMenuItem ( $hMenu, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] ) 添加新菜单项到菜单末尾. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_AppendMenu ( $hMenu, $iFlags, $iNewItem, $vNewItem ) 追加新项目到指定菜单栏,下拉菜单,子菜单或快捷菜单的末尾. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_CalculatePopupWindowPosition ( $iX, $iY, $iWidth, $iHeight [, $iFlags = 0 [, $tExclude = 0]] ) 计算相应的弹出窗口的位置 (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckMenuItem ( $hMenu, $iItem [, $bCheck = True [, $bByPos = True]] ) 设置菜单项复选标记的选中或清除选中状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckRadioItem ( $hMenu, $iFirst, $iLast, $iCheck [, $bByPos = True] ) 检查指定菜单项, 并使其成为单选项目. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_CreateMenu ( [$iStyle = $MNS_CHECKORBMP] ) 创建菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_CreatePopup ( [$iStyle = $MNS_CHECKORBMP] ) 创建下拉菜单, 子菜单或快捷菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_DeleteMenu ( $hMenu, $iItem [, $bByPos = True] ) 删除指定菜单的项目. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_DestroyMenu ( $hMenu ) 销毁指定菜单, 并释放菜单占用的内存. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_DrawMenuBar ( $hWnd ) 刷新指定窗口的菜单栏. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_EnableMenuItem ( $hMenu, $iItem [, $iState = 0 [, $bByPos = True]] ) 启用, 禁用或灰显指定的菜单项. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_FindItem ( $hMenu, $sText [, $bInStr = False [, $iStart = 0]] ) 检索基于文本的菜单项. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_FindParent ( $hMenu ) 检索菜单依附的窗口. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmp ( $hMenu, $iItem [, $bByPos = True] ) 检索项目显示的位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpChecked ( $hMenu, $iItem [, $bByPos = True] ) 检索显示项目选中的位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpUnchecked ( $hMenu, $iItem [, $bByPos = True] ) 检索显示项目未选中的位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemChecked ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的选中状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemCount ( $hMenu ) 检索指定菜单项目的数量. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemData ( $hMenu, $iItem [, $bByPos = True] ) 检索应用程序定义的菜单项关联值. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDefault ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的默认状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDisabled ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的禁用状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemEnabled ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的启用状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemGrayed ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项灰色状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemHighlighted ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的高亮状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemID ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的 ID. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemInfo ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRect ( $hWnd, $hMenu, $iItem ) 检索指定菜单项的矩形范围.(返回矩形坐标数组) (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRectEx ( $hWnd, $hMenu, $iItem ) 检索指定菜单项的矩形范围.(返回矩形坐标数据结构) (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemState ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项的状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemStateEx ( $hMenu, $iItem [, $bByPos = True] ) 检索指定菜单项的关联标志. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemSubMenu ( $hMenu, $iItem ) 检索指定项目的激活子菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemText ( $hMenu, $iItem [, $bByPos = True] ) 检索指定菜单项的文本. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemType ( $hMenu, $iItem [, $bByPos = True] ) 检索菜单项类型. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenu ( $hWnd ) 检索分配到指定窗口的菜单句柄. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBackground ( $hMenu ) 检索菜单背景的画笔刷. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBarInfo ( $hWnd [, $iItem = 0 [, $iObject = 1]] ) 检索指定菜单栏的信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuContextHelpID ( $hMenu ) 检索上下文帮助标识符. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuData ( $hMenu ) 检索应用程序定义的值. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuDefaultItem ( $hMenu [, $bByPos = True [, $iFlags = 0]] ) 检索指定菜单的默认菜单项. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuHeight ( $hMenu ) 检索菜单的最大高度. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuInfo ( $hMenu ) 检索指定菜单的信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuStyle ( $hMenu ) 检索菜单样式信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_GetSystemMenu ( $hWnd [, $bRevert = False] ) 允许应用程序访问, 复制和修改窗口菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItem ( $hMenu, $iIndex, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] ) 插入一个新菜单项到指定位置.(使用参数) (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItemEx ( $hMenu, $iIndex, ByRef $tMenu [, $bByPos = True] ) 插入一个新菜单项到指定位置(使用数据结构) (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_IsMenu ( $hMenu ) 确定句柄是否为菜单句柄. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_LoadMenu ( $hInst, $sMenuName ) 从与应用程序实例相关联的可执行文件加载指定菜单资源. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_MapAccelerator ( $hMenu, $sAccelKey ) 映射菜单快捷键到它的菜单位置. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_MenuItemFromPoint ( $hWnd, $hMenu [, $iX = -1 [, $iY = -1]] ) 确定指定位置的菜单项. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_RemoveMenu ( $hMenu, $iItem [, $bByPos = True] ) 从指定菜单删除菜单项或分离子菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBitmaps ( $hMenu, $iItem, $hChecked, $hUnChecked [, $bByPos = True] ) 关联指定菜单项的位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmp ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) 设置项目的显示位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpChecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) 设置项目选中状态的显示位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpUnchecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) 设置项目未选中状态的显示位图. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemChecked ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的选中状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemData ( $hMenu, $iItem, $iData [, $bByPos = True] ) 设置菜单项的应用程序定义值. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDefault ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的默认状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDisabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的禁用状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemEnabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的启用状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemGrayed ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的灰色状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemHighlighted ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) 设置菜单项的高亮状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemID ( $hMenu, $iItem, $iID [, $bByPos = True] ) 设置菜单项的 ID. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemInfo ( $hMenu, $iItem, ByRef $tInfo [, $bByPos = True] ) 更改菜单项的信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemState ( $hMenu, $iItem, $iState [, $bState = True [, $bByPos = True]] ) 设置菜单项的状态. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemSubMenu ( $hMenu, $iItem, $hSubMenu [, $bByPos = True] ) 设置菜单项关联的下拉菜单或子菜单. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemText ( $hMenu, $iItem, $sText [, $bByPos = True] ) 设置菜单项的文本. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemType ( $hMenu, $iItem, $iType [, $bByPos = True] ) 设置菜单项类型. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenu ( $hWnd, $hMenu ) 分配一个新菜单到指定的窗口. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuBackground ( $hMenu, $hBrush ) 设置菜单背景刷. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuContextHelpID ( $hMenu, $iHelpID ) 设置菜单上下文帮助标识符. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuData ( $hMenu, $iData ) 设置菜单定义的应用程序. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuDefaultItem ( $hMenu, $iItem [, $bByPos = True] ) 设置默认菜单项. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuHeight ( $hMenu, $iHeight ) 设置菜单的最大高度. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuInfo ( $hMenu, ByRef $tInfo ) 设置指定菜单的信息. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuStyle ( $hMenu, $iStyle ) 设置菜单样式. (需要: #include <GuiMenu.au3>)
_GUICtrlMenu_TrackPopupMenu ( $hMenu, $hWnd [, $iX = -1 [, $iY = -1 [, $iAlignX = 1 [, $iAlignY = 1 [, $iNotify = 0 [, $iButtons = 0]]]]]] ) 在指定位置显示一个快捷菜单 (需要: #include <GuiMenu.au3>)
_GUICtrlMonthCal_Create ( $hWnd, $iX, $iY [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]] ) 创建月历控件. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_Destroy ( ByRef $hWnd ) 删除月历控件. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarBorder ( $hWnd ) 获取(月历)的边框像素大小. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarCount ( $hWnd ) 获取(月历)控件当前显示的日历数. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColor ( $hWnd, $iIndex ) 检索(月历)控件的特定颜色. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColorArray ( $hWnd, $iColor ) 检索月历控件指定部分的颜色. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSel ( $hWnd ) 检索(月历)当前的选定日期. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSelStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索当前选定日期的字符串格式. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOW ( $hWnd ) 检索周的第一天. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOWStr ( $hWnd ) 检索周的第一天的字符串. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxSelCount ( $hWnd ) 检索控件中最大可选择日期范围. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxTodayWidth ( $hWnd ) 检索月历控件中"今天"字符串的最大宽度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqHeight ( $hWnd ) 检索显示完整月历所需的最低高度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRect ( $hWnd ) 检索显示完整月历所需的最低尺寸. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRectArray ( $hWnd ) 检索显示完整月历所需的最低尺寸. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqWidth ( $hWnd ) 检索显示完整月历所需的最小宽度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthDelta ( $hWnd ) 检索月历控件的滚动速度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRange ( $hWnd [, $bPartial = False] ) 检索日期的高, 低限制范围. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMax ( $hWnd [, $bPartial = False] ) 检索控件日期显示范围的上限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索控件日期显示范围的上限值格式字符串. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMin ( $hWnd [, $bPartial = False] ) 检索控件日期显示范围的下限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索控件日期显示范围的下限值格式字符串. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeSpan ( $hWnd [, $bPartial = False] ) 检索月历显示日历天的月份跨度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRange ( $hWnd ) 检索最大和最小允许日期. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMax ( $hWnd ) 检索日期范围的上限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索日期范围的上限值格式字符串. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMin ( $hWnd ) 检索日期范围的下限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索日期范围的下限值格式字符串. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRange ( $hWnd ) 检索当前选定日期范围的上限和下限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMax ( $hWnd ) 检索用户选择日期范围的上限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索用户(字符串形式)选择当前日期范围的上限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMin ( $hWnd ) 检索用户当前选择日期的下限范围. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索用户(字符串形式)选择当前日期范围的下限. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetToday ( $hWnd ) 检索"今天"的日期信息 (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetTodayStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) 检索"今天"日期信息的字符串格式. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetUnicodeFormat ( $hWnd ) 检索(月历)控件的 Unicode 字符格式标志. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_HitTest ( $hWnd, $iX, $iY ) 确定月历控件指定点的部分. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCalendarBorder ( $hWnd [, $iBorderSize = 4 [, $bSetBorder = True]] ) 设置(月历)边框的像素大小. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetColor ( $hWnd, $iIndex, $iColor ) 设置月历特定部分的颜色. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCurSel ( $hWnd, $iYear, $iMonth, $iDay ) 设置当前选定的日期. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetDayState ( $hWnd, $aMasks ) 设置月份当前可见天的状态. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetFirstDOW ( $hWnd, $sDay ) 设置月历控件周的第一天. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMaxSelCount ( $hWnd, $iMaxSel ) 设置月历控件中可供选择的最大天数. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMonthDelta ( $hWnd, $iDelta ) 设置月历控件的滚动速度. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay ) 设置日期的高, 低限信息. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetSelRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay ) 设置月历控件日期的特定选择范围. (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetToday ( $hWnd, $iYear, $iMonth, $iDay ) 设置日期为"今天"的日期信息 (需要: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetUnicodeFormat ( $hWnd [, $bUnicode = False] ) 设置(月历)控件的 Unicode 字符格式. (需要: #include <GuiMonthCal.au3>)
_GUICtrlRebar_AddBand ( $hWndRebar, $hWndChild [, $iMinWidth = 100 [, $iDefaultWidth = 100 [, $sText = "" [, $iIndex = -1 [, $iStyle = -1]]]]] ) 添加伸缩条(rebar)控件的新带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_AddToolBarBand ( $hWndRebar, $hWndToolbar [, $sText = "" [, $iIndex = -1 [, $iStyle = -1]]] ) 添加伸缩条(rebar)控件的(工具栏)带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_BeginDrag ( $hWnd, $iIndex [, $iPos = -1] ) 添加伸缩条(rebar)控件的新带区.(允许拖动操作). (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_Create ( $hWnd [, $iStyles = 0x513] ) 创建伸缩条(rebar)控件. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_DeleteBand ( $hWnd, $iIndex ) 删除伸缩条(rebar)控件带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_Destroy ( ByRef $hWnd ) 删除(rebar 伸缩条)控件. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_DragMove ( $hWnd [, $iPos = -1] ) 更新 _GUICtrlRebar_BeginDrag 消息后的 伸缩条(rebar)控件拖动位置. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_EndDrag ( $hWnd ) 终止伸缩条(rebar)控件的拖动操作. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBackColor ( $hWnd, $iIndex ) 检索带区的背景颜色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBorders ( $hWnd, $iIndex ) 检索带区的边界.(返回数据数组). (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandBordersEx ( $hWnd, $iIndex ) 检索带区的边界.(返回数据结构). (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandChildHandle ( $hWnd, $iIndex ) 检索存在的带区子窗口句柄. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandChildSize ( $hWnd, $iIndex ) 检索(带区的)子尺寸设置. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandCount ( $hWnd ) 检索伸缩条(rebar)控件当前带区数. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandForeColor ( $hWnd, $iIndex ) 检索带区前景色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandHeaderSize ( $hWnd, $iIndex ) 检索带区标题的像素大小. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandID ( $hWnd, $iIndex ) 获取控件用于通知客户自定义绘制带区的带区识别值. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandIdealSize ( $hWnd, $iIndex ) 获得带区理想的像素宽度. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandLength ( $hWnd, $iIndex ) 获取带区像素长度. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandLParam ( $hWnd, $iIndex ) 获取应用程序定义的(带区)值. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandMargins ( $hWnd ) 获取带区页边距.(译注:返回数据数组,依据函数名称翻译) (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandMarginsEx ( $hWnd ) 获取带区页边距.(译注:返回数据结构,依据函数名称翻译) (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandRect ( $hWnd, $iIndex ) 检索伸缩条(rebar)控件特定带区的边界矩形.(译注:返回数据数组) (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandRectEx ( $hWnd, $iIndex ) 检索伸缩条(rebar)控件特定带区的边界矩形.(译注:返回数据结构) (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyle ( $hWnd, $iIndex ) 获取带区样式标志. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleBreak ( $hWnd, $iIndex ) 确定是否设置带区中断(分行)标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleChildEdge ( $hWnd, $iIndex ) 确定是否设置带区具有子边框窗口标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleFixedBMP ( $hWnd, $iIndex ) 确定是否设置固定带区位图标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleFixedSize ( $hWnd, $iIndex ) 确定是否设置固定带区大小标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleGripperAlways ( $hWnd, $iIndex ) 确定是否设置带区大小调整控制柄标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleHidden ( $hWnd, $iIndex ) 确定是否设置带区隐藏标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleHideTitle ( $hWnd, $iIndex ) 确定是否设置隐藏带区标题标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleNoGripper ( $hWnd, $iIndex ) 确定是否设置带区没有大小调整控制柄标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleTopAlign ( $hWnd, $iIndex ) 确定是否设置带区顶部对齐标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleUseChevron ( $hWnd, $iIndex ) 确定是否设置带区使用下拉按钮标志.<br> 译注: 原词 chevron, 依据返回值描述汉化, 但运行示例, 也看不出下拉按钮在!</br> (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandStyleVariableHeight ( $hWnd, $iIndex ) 确定是否设置带区高度可调标志 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBandText ( $hWnd, $iIndex ) 检索带区文本. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBarHeight ( $hWnd ) 检索伸缩条(rebar)控件高度. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBarInfo ( $hWnd ) 检索伸缩条(rebar)的图像列表信息. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetBKColor ( $hWnd ) 检索伸缩条(rebar)控件的默认背景色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetColorScheme ( $hWnd ) 检索伸缩条(rebar)配色方案信息. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetRowCount ( $hWnd ) 检索伸缩条(rebar)带区行数. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetRowHeight ( $hWnd, $iIndex ) 检索伸缩条(rebar)指定带区的高度. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetTextColor ( $hWnd ) 检索伸缩条(rebar)控件默认文本颜色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetToolTips ( $hWnd ) 检索伸缩条(rebar)控件关联的提示工具控件句柄. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_GetUnicodeFormat ( $hWnd ) 检索伸缩条(rebar)控件的 Unicode 字符格式标志. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) 确定测试点在伸缩条带区的位置. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_IDToIndex ( $hWnd, $iID ) 转换带区标识符为带区索引. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_MaximizeBand ( $hWnd, $iIndex [, $bIdeal = True] ) 调整带区的理想或最大尺寸. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_MinimizeBand ( $hWnd, $iIndex ) 调整带区到最小尺寸. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_MoveBand ( $hWnd, $iIndexFrom, $iIndexTo ) 移动带区索引为另一索引. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandBackColor ( $hWnd, $iIndex, $iColor ) 设置带区的背景颜色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandForeColor ( $hWnd, $iIndex, $iColor ) 设置带区前景颜色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandHeaderSize ( $hWnd, $iIndex, $iNewSize ) 设置带区标题大小的像素值. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandID ( $hWnd, $iIndex, $iID ) 设置控件带区识别值, 用于通知客户自定义绘制带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandIdealSize ( $hWnd, $iIndex, $iNewSize ) 设置带区理想宽度的像素值. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandLength ( $hWnd, $iIndex, $iLength ) 设置带区长度. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandLParam ( $hWnd, $iIndex, $lParam ) 设置应用程序定义的值. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyle ( $hWnd, $iIndex, $iStyle ) 设置带区样式标志. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleBreak ( $hWnd, $iIndex [, $bEnabled = True] ) 设置带区是否新起一行. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleChildEdge ( $hWnd, $iIndex [, $bEnabled = True] ) 设置带区是否在子窗口顶部和底部边缘. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleFixedBMP ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区调整大小时不移动背景位图. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleFixedSize ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区不能调整大小. 在此样式中, 带区不显示调整控制柄 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleGripperAlways ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区始终有大小调整控制柄, 即使伸缩条(rebar)仅有一个带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleHidden ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区不可见. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleHideTitle ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否隐藏带区标题. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleNoGripper ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区没有大小调整控制柄, 即使伸缩条(rebar)有多个带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleTopAlign ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区置于顶行. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleUseChevron ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否(带区)显示下拉按钮. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandStyleVariableHeight ( $hWnd, $iIndex [, $bEnabled = True] ) 设置是否带区可由伸缩条(rebar)改变大小. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBandText ( $hWnd, $iIndex, $sText ) 检索伸缩条(rebar)控件带区文本 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBarInfo ( $hWnd, $hIml ) 设置伸缩条(rebar)控件的(图像)特性. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBKColor ( $hWnd, $iColor ) 设置伸缩条(rebar)控件的默认背景色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetColorScheme ( $hWnd, $iBtnHighlight, $iBtnShadow ) 设置伸缩条(rebar)控件的颜色方案. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetTextColor ( $hWnd, $iColor ) 设置伸缩条(rebar)控件的默认文本颜色. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetToolTips ( $hWnd, $hToolTip ) 设置伸缩条(rebar)控件关联的提示工具控件. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] ) 设置伸缩条(rebar)控件 Unicode 字符格式标志. (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_ShowBand ( $hWnd, $iIndex [, $bShow = True] ) 显示或隐藏伸缩条(rebar)控件指定带区. (需要: #include <GuiReBar.au3>)
_GUICtrlRichEdit_AppendText ( $hWnd, $sText ) 追加文本到(富文本编辑控件)客户区尾端. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_AutoDetectURL ( $hWnd, $bState ) 启用或禁用自动检测网址(URL). (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPaste ( $hWnd ) 确定剪贴板内容可否粘贴到(富文本编辑)控件. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPasteSpecial ( $hWnd ) 确定粘贴到控件的剪贴板内容是否为(RTF 和 RTF 对象)两种格式. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanRedo ( $hWnd ) 确定(富文本编辑控件)撤销操作能否能重做. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanUndo ( $hWnd ) 确定(富文本编辑控件)操作是否可以撤销. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ChangeFontSize ( $hWnd, $iIncrement ) 递增或递减(富文本编辑控件)选定文本的字体大小. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Copy ( $hWnd ) 复制(富文本编辑控件)文本到剪贴板 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Create ( $hWnd, $sText, $iLeft, $iTop [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = -1 [, $iExStyle = -1]]]] ) 创建(富文本)编辑控件. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Cut ( $hWnd ) 剪切(富文本编辑控件)文本到剪贴板. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Deselect ( $hWnd ) 取消(富文本编辑控件)选择的文本, 无选择地离开. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Destroy ( ByRef $hWnd ) 删除富文本编辑(RichEdit)控件. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_EmptyUndoBuffer ( $hWnd ) 重置(富文本编辑)控件撤消标志. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindText ( $hWnd, $sText [, $bForward = True [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]] ) 搜索插入点或锚选点的文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindTextInRange ( $hWnd, $sText [, $iStart = 0 [, $iEnd = -1 [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]]] ) 搜索(富文本编辑控件)字符区间范围内的文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetBkColor ( $hWnd ) 获取(富文本编辑)控件的背景颜色. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharAttributes ( $hWnd ) 返回富文本编辑控件选中文本的属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharBkColor ( $hWnd ) 检索富文本编辑控件所选文本的背景颜色, 如果没有选定文本, 则检索插入点右边的字符. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharColor ( $hWnd ) 检索所选文本的颜色, 如果没有选定文本, 则检索插入点右边的字符. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosFromXY ( $hWnd, $iX, $iY ) 获取最接近客户区指定点的字符区间位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfNextWord ( $hWnd, $iCpStart ) 获取富文本编辑控件下一个单词之前的字符区间位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfPreviousWord ( $hWnd, $iCpStart ) 获取富文本编辑控件上一个单词之前的字符区间位置.(译注: 返回区间位置) (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharWordBreakInfo ( $hWnd, $iCp ) 获取富文本编辑控件上一个单词之前的字符区间位置(译注: 返回分隔的字符). (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFirstCharPosOnLine ( $hWnd [, $iLine = -1] ) 检索富文本编辑控件字符区间位置上一行的第一个字符. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFont ( $hWnd ) 获取富文本编辑控件选定字体的属性, 如果没有选择, 则获取插入点的字体属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineCount ( $hWnd ) 检索多行(富文本)编辑控件的行数. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineLength ( $hWnd, $iLine ) 检索行的长度. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineNumberFromCharPos ( $hWnd, $iCharPos ) 检索字符区间位置的行数 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextRedo ( $hWnd [, $bName = True] ) 检索下一个可能的"重做"动作名称或类型 ID. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextUndo ( $hWnd [, $bName = True] ) 检索下一个可能的"撤消"动作名称或类型 ID. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNumberOfFirstVisibleLine ( $hWnd ) 获取控件可见行的第一行. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAlignment ( $hWnd ) 获取选定段落的对齐方式, 或如果没有选择, 则获取当前段落. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAttributes ( $hWnd ) 获取(第一)选中段落; 或没有选择时的当前段落属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaBorder ( $hWnd ) 获取第一选中段落; 或没有选择时的当前段落的边框设置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaIndents ( $hWnd ) 获取第一个选定段落; 或者没有选择时的当前段落的边框缩进设置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaNumbering ( $hWnd ) 获取第一个选定段落; 或者没有选择时的当前段落的编号样式. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaShading ( $hWnd ) 获取获取(第一)选定; 或者如果没有选择时的当前段落的明暗处理. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaSpacing ( $hWnd ) 获取(第一)选定段落; 或者没有选择时的当前段落的间距设置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaTabStops ( $hWnd ) 获取(第一)选中段落; 或者没有选择时的当前段落的制表位. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetPasswordChar ( $hWnd ) 获取 RichEdit 控件显示输入文本的密码字符. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetRECT ( $hWnd ) 检索富文本编辑控件的格式化矩形. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetScrollPos ( $hWnd ) 获取富文本编辑控件的滚动位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSel ( $hWnd ) 获取富文本编辑控件选中字符区间的低、高位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelAA ( $hWnd ) 获取富文本编辑控件选中字符区间按顺序的锚点. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelText ( $hWnd ) 检索富文本编辑控件当前的选定文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSpaceUnit (  ) 获取富文本编辑控件水平和垂直空间计算单位,供 _GUICtrlRichEdit 函数的参数使用. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetText ( $hWnd [, $bCrToCrLf = False [, $iCodePage = 0 [, $sReplChar = ""]]] ) 获取富文本编辑控件中的全部文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInLine ( $hWnd, $iLine ) 获取富文本编辑控件的行文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInRange ( $hWnd, $iStart, $iEnd ) 获取一个字符区间位置到另一个字符区间位置的文本 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextLength ( $hWnd [, $bExact = True [, $bChars = False]] ) 获取富文本编辑控件整个文本的长度. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetVersion (  ) 检索富文本编辑控件的版本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetXYFromCharPos ( $hWnd, $iCharPos ) 检索字符区间位置的 X, Y 坐标. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetZoom ( $hWnd ) 获取富文本编辑控件缩放级别 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GotoCharPos ( $hWnd, $iCharPos ) 移动插入点到字符区间位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_HideSelection ( $hWnd [, $bHide = True] ) 隐藏或显示富文本编辑控件选择 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_InsertText ( $hWnd, $sText ) 插入文本到富文本编辑控件选择的插入点或定位点. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsModified ( $hWnd ) 检索富文本编辑控件的修改标志状态. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsTextSelected ( $hWnd ) 确定富文本编辑控件文本是否选中. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Paste ( $hWnd ) 从剪贴板粘贴 RTF 或 RTF 对象. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PasteSpecial ( $hWnd [, $bAndObjects = True] ) 从剪贴板粘贴 RTF 或 RTF 与对象. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PauseRedraw ( $hWnd ) 暂停富文本编辑控件的刷新. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Redo ( $hWnd ) 重做富文本编辑控件的最后撤消操作 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ReplaceText ( $hWnd, $sText [, $bCanUndo = True] ) 替换富文本编辑控件的选定文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ResumeRedraw ( $hWnd ) 恢复富文本编辑控件刷新 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLineOrPage ( $hWnd, $sAction ) 滚动富文本编辑一行或一页文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLines ( $hWnd, $iQlines ) 滚动富文本编辑控件多行文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollToCaret ( $hWnd ) 滚动到富文本编辑控件插入符号所在行. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetBkColor ( $hWnd [, $iBngColor = Default] ) 设置富文本编辑控件的背景颜色. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharAttributes ( $hWnd, $sStatesAndEffects [, $bWord = False] ) 打开或关闭选定文本(或者没有选择时的插入点文本)的属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharBkColor ( $hWnd [, $iBkColor = Default] ) 设置选定文本(或者没有选择时的插入点文本)的背景颜色. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharColor ( $hWnd [, $iColor = Default] ) 设置选定文本(或者没有选择时的插入点文本)的颜色. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetEventMask ( $hWnd, $iEventMask ) 发送指定通知消息到父窗口. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetFont ( $hWnd [, $iPoints = Default [, $sName = Default [, $iCharset = Default [, $iLcid = Default]]]] ) 设置选定文本(或者没有选定时的插入点插入文本) 的字体属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetLimitOnText ( $hWnd, $iNewLimit ) 修改可以键入的字符数, 或将流(streamed)作为 Rich 文本格式粘贴. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetModified ( $hWnd [, $bState = True] ) 设置或清除修改标志. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAlignment ( $hWnd, $sAlignment ) 设置当前选定段落(或者没有选择时插入点所在段落)的对齐方式. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAttributes ( $hWnd, $sStatesAndAtts ) 设置(第一)当前选择(或没有选择时的插入点所在)的属性. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaBorder ( $hWnd [, $sLocation = Default [, $vLineStyle = Default [, $sColor = Default [, $iSpace = Default]]]] ) 设置当前选择(或没有选择时的插入点所在)的边框. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaIndents ( $hWnd [, $vLeft = Default [, $iRight = Default [, $iFirstLine = Default]]] ) 设置当前选择(或没有选择时的插入点所在)的段落缩进. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaNumbering ( $hWnd, $sStyle [, $iTextToNbrSpace = Default [, $bForceRoman = False]] ) 设置当前选择(或没有选择时的插入点所在)段落的编号方式. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaShading ( $hWnd [, $iWeight = Default [, $sStyle = Default [, $sForeColor = Default [, $sBackColor = Default]]]] ) 设置当前选择(或没有选择时的插入点所在)段落的明暗处理. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaSpacing ( $hWnd [, $vInter = Default [, $iBefore = Default [, $iAfter = Default]]] ) 设置当前选择(或没有选择时的插入点所在)的段落间距. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaTabStops ( $hWnd, $sTabStops ) 设置当前选择(或没有选择时的插入点所在)段落的制表位. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = "*"] ) 设置代替输入文本的显示字符. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetReadOnly ( $hWnd [, $bState = True] ) 设置或删除只读状态. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetRECT ( $hWnd [, $iLeft = Default [, $iTop = Default [, $iRight = Default [, $iBottom = Default [, $bRedraw = True]]]]] ) 设置富文本编辑控件的格式化矩形 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetScrollPos ( $hWnd, $iX, $iY ) 设置富文本编辑控件滚动起始点的左上角 ($ix,$iY) 值. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSel ( $hWnd, $iAnchor, $iActive [, $bHideSel = False] ) 设置选择的高, 低字符位置. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSpaceUnit ( $sUnit ) 设置水平和垂直空间计算单位,供 _GUICtrlRichEdit 函数的参数使用. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetTabStops ( $hWnd, $vTabStops [, $bRedraw = True] ) 设置控件制表位. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetText ( $hWnd, $sText ) 设置富文本编辑控件的文本 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetUndoLimit ( $hWnd, $iLimit ) 设置富文本编辑控件撤消队列可以存储的最大数量. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetZoom ( $hWnd, $iPercent ) 设置富文本编辑控件缩放级别. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromFile ( $hWnd, $sFileSpec ) 从文件中设置富文本编辑控件的文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromVar ( $hWnd, $sVar ) 从变量设置富文本编辑控件的文本. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToFile ( $hWnd, $sFileSpec [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0]]] ) 富文本编辑控件的内容保存到文件. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToVar ( $hWnd [, $bRtf = True [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0]]]] ) 富文本编辑控件内容写入到变量. (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Undo ( $hWnd ) 撤消富文本编辑控件撤消队列中的最后编辑操作. (需要: #include <GuiRichEdit.au3>)
_GUICtrlSlider_ClearSel ( $hWnd ) 清除(滑块)当前选择范围. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_ClearTics ( $hWnd ) 移除滑动器(Slider)当前刻度线. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_Create ( $hWnd, $iX, $iY [, $iWidth = 100 [, $iHeight = 20 [, $iStyle = $TBS_AUTOTICKS [, $iExStyle = 0x00000000]]]] ) 创建滑动器(Slider)控件. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_Destroy ( ByRef $hWnd ) 删除滑块(Slider)控件. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetBuddy ( $hWnd, $bLocation ) 检索与滑块(Slider)合作的窗口句柄. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRect ( $hWnd ) 检索滑块通道矩形边界的大小和位置.(返回数据数组) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRectEx ( $hWnd ) 检索滑块通道矩形边界的大小和位置.(返回数据结构) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLineSize ( $hWnd ) 检索滑动条的通道大小(译注:此函数解释描述与 _GUICtrlSlider_GetPageSize 函数完全一样,此处依据示例脚本汉化) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLogicalTics ( $hWnd ) 检索滑块刻度逻辑位置, 返回数组. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetNumTics ( $hWnd ) 检索滑块的刻度数. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPageSize ( $hWnd ) 检索滑块页面大小.(译注:此函数解释描述与 _GUICtrlSlider_GetLineSize 函数完全一样,此处依据示例脚本汉化) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPos ( $hWnd ) 检索滑块逻辑位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRange ( $hWnd ) 检索滑块的最高和最低位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMax ( $hWnd ) 检索滑块的最大位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMin ( $hWnd ) 检索滑块的最低位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSel ( $hWnd ) 检索当前选择范围的起始和结束位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelEnd ( $hWnd ) 检索当前选择范围的结束位置 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelStart ( $hWnd ) 检索当前选择范围的起始位置 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbLength ( $hWnd ) 检索滑块的长度 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRect ( $hWnd ) 检索滑块边界矩形的大小和位置.(返回数据数组) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRectEx ( $hWnd ) 检索滑块边界矩形的大小和位置.(返回数据结构) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTic ( $hWnd, $iTic ) 检索刻度线的逻辑位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTicPos ( $hWnd, $iTic ) 检索刻度线的当前物理位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetToolTips ( $hWnd ) 检索滑块的提示工具控件句柄(如果存在). (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_GetUnicodeFormat ( $hWnd ) 检索(滑块)控件的 Unicode 字符格式标志. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetBuddy ( $hWnd, $bLocation, $hBuddy ) 设置滑块控件的合作窗口. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetLineSize ( $hWnd, $iLineSize ) 设置滑动条的通道大小.(译注:此处依据示例脚本汉化,此函数解释描述与 _GUICtrlSlider_SetPageSize 函数完全一样) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPageSize ( $hWnd, $iPageSize ) 设置滑动条的页面大小.(译注:此处依据示例脚本汉化,此函数解释描述与 _GUICtrlSlider_SetLineSize 函数完全一样) (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPos ( $hWnd, $iPosition ) 设置当前滑块的逻辑位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRange ( $hWnd, $iMinimum, $iMaximum ) 设置滑块最低和最高逻辑位置范围. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMax ( $hWnd, $iMaximum ) 设置滑块的最大逻辑位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMin ( $hWnd, $iMinimum ) 设置滑块最小逻辑位置 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSel ( $hWnd, $iMinimum, $iMaximum ) 设置滑块控件有效选择范围的开始和结束位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelEnd ( $hWnd, $iMaximum ) 设置(滑块)当前选择范围的逻辑结束位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelStart ( $hWnd, $iMinimum ) 设置(滑块)当前选择范围的逻辑起点位置. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetThumbLength ( $hWnd, $iLength ) 设置滑块长度. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTic ( $hWnd, $iPosition ) 设置滑块指定逻辑位置的刻度线. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTicFreq ( $hWnd, $iFreg ) 设置滑块刻度间隔频率. (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTipSide ( $hWnd, $iLocation ) 设置(滑块)提示工具控件位置 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetToolTips ( $hWnd, $hWndTT ) 设置滑块控件的提示工具 (需要: #include <GuiSlider.au3>)
_GUICtrlSlider_SetUnicodeFormat ( $hWnd, $bUnicode ) 设置(滑块)控件 Unicode 字符格式标志. (需要: #include <GuiSlider.au3>)
_GUICtrlStatusBar_Create ( $hWnd [, $vPartEdge = -1 [, $vPartText = "" [, $iStyles = -1 [, $iExStyles = 0x00000000]]]] ) 创建状态栏. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Destroy ( ByRef $hWnd ) 删除(状态栏)控件. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_EmbedControl ( $hWnd, $iPart, $hControl [, $iFit = 4] ) 嵌入(状态栏)子控件 (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBorders ( $hWnd ) 检索(状态栏)水平/垂直边框的当前宽度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersHorz ( $hWnd ) 检索(状态栏)当前水平边框宽度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersRect ( $hWnd ) 检索(状态栏)当前矩形边框宽度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersVert ( $hWnd ) 检索(状态栏)当前垂直边框宽度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetCount ( $hWnd ) 检索(状态栏)部件数量. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetHeight ( $hWnd ) 检索状态栏的高度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetIcon ( $hWnd [, $iIndex = 0] ) 检索(状态栏)部件图标. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetParts ( $hWnd ) 检索(状态栏)部件的数量和边框. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRect ( $hWnd, $iPart ) 检索(状态栏)部件边界矩形.(返回数据数组) (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRectEx ( $hWnd, $iPart ) 检索(状态栏)部件边界矩形.(返回数据结构) (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetText ( $hWnd, $iPart ) 检索(状态栏)指定部件的文本. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextFlags ( $hWnd, $iPart ) 检索状态栏部件文本长度标志. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLength ( $hWnd, $iPart ) 检索(状态栏)部件文本长度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLengthEx ( $hWnd, $iPart ) 检索(状态栏)部件的状态标志. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTipText ( $hWnd, $iPart ) 检索(状态栏)部件提示工具的文本. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetUnicodeFormat ( $hWnd ) 检索(状态栏) Unicode 字符格式标志. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetWidth ( $hWnd, $iPart ) 检索(状态栏)部件的宽度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_IsSimple ( $hWnd ) 检查状态栏控件是否为简单模式. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Resize ( $hWnd ) 使状态栏自行调整大小. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetBkColor ( $hWnd, $iColor ) 设置(状态栏)背景颜色. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetIcon ( $hWnd, $iPart [, $hIcon = -1 [, $sIconFile = ""]] ) 设置(状态栏)部件图标. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetMinHeight ( $hWnd, $iMinHeight ) 设置状态窗口绘图区域最低高度. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetParts ( $hWnd [, $aParts = -1 [, $aPartWidth = 25]] ) 设置(状态栏)部件与边框数量. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetSimple ( $hWnd [, $bSimple = True] ) 设置状态窗口是否简单显示为文本, 或显示所有(状态)窗口部件. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetText ( $hWnd [, $sText = "" [, $iPart = 0 [, $iUFlag = 0]]] ) 设置状态窗口指定部件的文本. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetTipText ( $hWnd, $iPart, $sText ) 设置(状态栏)部件的提示工具文本. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] ) 设置(状态栏) Unicode 字符格式标志. (需要: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_ShowHide ( $hWnd, $iState ) 显示/隐藏状态栏控件. (需要: #include <GuiStatusBar.au3>)
_GUICtrlTab_ActivateTab ( $hWnd, $iIndex ) 使用索引激活选项卡标签(Tab). (需要: #include <GuiTab.au3>)
_GUICtrlTab_ClickTab ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) 点击选项卡标签(Tab). (需要: #include <GuiTab.au3>)
_GUICtrlTab_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000040 [, $iExStyle = 0x00000000]]]] ) 创建选项卡(TabControl)控件. (需要: #include <GuiTab.au3>)
_GUICtrlTab_DeleteAllItems ( $hWnd ) 删除(选项卡)所有标签. (需要: #include <GuiTab.au3>)
_GUICtrlTab_DeleteItem ( $hWnd, $iIndex ) 删除选项卡控件的一个标签页. (需要: #include <GuiTab.au3>)
_GUICtrlTab_DeselectAll ( $hWnd [, $bExclude = True] ) 复位选项卡标签, 清除任何被设置为按下的状态. (需要: #include <GuiTab.au3>)
_GUICtrlTab_Destroy ( ByRef $hWnd ) 删除(选项卡标签)控件. (需要: #include <GuiTab.au3>)
_GUICtrlTab_FindTab ( $hWnd, $sText [, $bInStr = False [, $iStart = 0]] ) 搜索特定文本的(选项卡)标签. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetCurFocus ( $hWnd ) 返回标签选项卡控件中焦点标签的索引. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetCurSel ( $hWnd ) 确定当前选定选项卡的标签 (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRect ( $hWnd ) 检索客户区的显示矩形.(返回数据数组) (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRectEx ( $hWnd ) 检索客户区的显示矩形.(返回数据结构) (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetExtendedStyle ( $hWnd ) 检索(标签选项卡)的扩展样式. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetImageList ( $hWnd ) 检索标签选项卡控件的图像列表. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItem ( $hWnd, $iIndex ) 检索标签选项卡信息. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemCount ( $hWnd ) 检索(标签选项卡)的标签数. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemImage ( $hWnd, $iIndex ) 检索(标签选项卡)标签图像索引. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemParam ( $hWnd, $iIndex ) 检索标签的参数数据. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRect ( $hWnd, $iIndex ) 检索(标签选项卡)的标签边界矩形.(返回数据数组) (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRectEx ( $hWnd, $iIndex ) 检索(标签选项卡)的标签边界矩形.(返回数据结构) (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemState ( $hWnd, $iIndex ) 检索(标签选项卡)的标签状态. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemText ( $hWnd, $iIndex ) 检索(标签选项卡)的标签文本. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetRowCount ( $hWnd ) 检索(标签选项卡)当前标签行数量. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetToolTips ( $hWnd ) 检索(标签选项卡)关联的提示工具控件句柄. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetUnicodeFormat ( $hWnd ) 检索(标签选项卡)控件的 Unicode 字符格式标志 (需要: #include <GuiTab.au3>)
_GUICtrlTab_HighlightItem ( $hWnd, $iIndex [, $bHighlight = True] ) 设置(标签选项卡)标签项目高亮状态. (需要: #include <GuiTab.au3>)
_GUICtrlTab_HitTest ( $hWnd, $iX, $iY ) 确定(标签选项卡)控件测试点位所在位置. (需要: #include <GuiTab.au3>)
_GUICtrlTab_InsertItem ( $hWnd, $iIndex, $sText [, $iImage = -1 [, $iParam = 0]] ) (标签选项卡)插入新标签. (需要: #include <GuiTab.au3>)
_GUICtrlTab_RemoveImage ( $hWnd, $iIndex ) 删除(标签选项卡)控件图像列表的图像. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetCurFocus ( $hWnd, $iIndex ) 设置(标签选项卡)指定标签的焦点. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetCurSel ( $hWnd, $iIndex ) 选择(标签选项卡)标签. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetExtendedStyle ( $hWnd, $iStyle ) 设置(标签选项卡)的扩展样式. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetImageList ( $hWnd, $hImage ) 设置(标签选项卡)控件关联的图像列表. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItem ( $hWnd, $iIndex [, $sText = -1 [, $iState = -1 [, $iImage = -1 [, $iParam = -1]]]] ) 设置选项卡标签页的信息. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItemImage ( $hWnd, $iIndex, $iImage ) 设置(标签选项卡)的标签图像. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItemParam ( $hWnd, $iIndex, $iParam ) 设置(标签选项卡)标签参数数据. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItemSize ( $hWnd, $iWidth, $iHeight ) 设置(标签选项卡)固定宽度标签的宽度和高度, 或所有者绘制控件. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItemState ( $hWnd, $iIndex, $iState ) 设置(标签选项卡)标签状态. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetItemText ( $hWnd, $iIndex, $sText ) 设置(标签选项卡)标签文本. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetMinTabWidth ( $hWnd, $iMinWidth ) 设置(标签选项卡)标签项目的最小宽度. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetPadding ( $hWnd, $iHorz, $iVert ) 设置(标签选项卡)标签和图标周围的填充空间 (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetToolTips ( $hWnd, $hToolTip ) 设置(标签选项卡)控件关联的提示工具控件. (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetUnicodeFormat ( $hWnd, $bUnicode ) 设置(标签选项卡)控件 Unicode 字符格式标志. (需要: #include <GuiTab.au3>)
_GUICtrlToolbar_AddBitmap ( $hWnd, $iButtons, $hInst, $iID ) 添加(工具栏)图像到图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddButton ( $hWnd, $iID, $iImage [, $iString = 0 [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] ) 添加(工具栏)按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddButtonSep ( $hWnd [, $iWidth = 6] ) 添加(工具栏)分隔符. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_AddString ( $hWnd, $sString ) 添加新字符串到工具栏的字符串池. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ButtonCount ( $hWnd ) 检索(工具栏)按钮数. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_CheckButton ( $hWnd, $iCommandID [, $bCheck = True] ) 选中或取消选中(工具栏)指定按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickAccel ( $hWnd, $sAccelKey [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) 使用快捷键点击(工具栏)特定按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickButton ( $hWnd, $iCommandID [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) 点击(工具栏)特定按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_ClickIndex ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) 使用索引点击(工具栏)特定按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_CommandToIndex ( $hWnd, $iCommandID ) 检索(工具栏)指定命令标识符关联的按钮索引. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Create ( $hWnd [, $iStyle = 0x00000800 [, $iExStyle = 0x00000000]] ) 创建工具栏控件. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Customize ( $hWnd ) 显示自定义工具栏对话框. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_DeleteButton ( $hWnd, $iCommandID ) 删除工具栏按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_Destroy ( ByRef $hWnd ) 删除(工具栏)控件. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_EnableButton ( $hWnd, $iCommandID [, $bEnable = True] ) 启用或禁用(工具栏)指定按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_FindToolbar ( $hWnd, $sText ) 查找特定工具栏. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetAnchorHighlight ( $hWnd ) 检索(工具栏)定位高亮设置. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetBitmapFlags ( $hWnd ) 检索(工具栏)位图类型标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonBitmap ( $hWnd, $iCommandID ) 检索(工具栏)按钮相关位图的索引. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonInfo ( $hWnd, $iCommandID ) 检索(工具栏)按钮信息.(返回数据数组) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonInfoEx ( $hWnd, $iCommandID ) 检索(工具栏)按钮扩展信息.(返回数据结构) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonParam ( $hWnd, $iCommandID ) 检索(工具栏)按钮参数值. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonRect ( $hWnd, $iCommandID ) 检索(工具栏)按钮矩形.(返回数据数组) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonRectEx ( $hWnd, $iCommandID ) 检索(工具栏)按钮矩形.(返回数据结构) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonSize ( $hWnd ) 检索(工具栏)按钮宽度和高度的像素值. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonState ( $hWnd, $iCommandID ) 检索(工具栏)指定按钮的状态信息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonStyle ( $hWnd, $iCommandID ) 检索(工具栏)按钮的样式标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonText ( $hWnd, $iCommandID ) 检索(工具栏)按钮的显示文本. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetColorScheme ( $hWnd ) 检索(工具栏)配色方案信息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetDisabledImageList ( $hWnd ) 检索(工具栏)按钮禁用(状态)的图像列表 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetExtendedStyle ( $hWnd ) 检索(工具栏)扩展样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetHotImageList ( $hWnd ) 检索(工具栏)热按钮(状态)图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetHotItem ( $hWnd ) 检索(工具栏)热项目索引. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetImageList ( $hWnd ) 检索(工具栏)默认状态的图像列表 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetInsertMark ( $hWnd ) 检索(工具栏)当前插入标记. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetInsertMarkColor ( $hWnd ) 检索(工具栏)绘制插入标记的颜色. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetMaxSize ( $hWnd ) 检索(工具栏)所有可见按钮和分隔符的总大小. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetMetrics ( $hWnd ) 检索工具栏控件规格. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetPadding ( $hWnd ) 检索(工具栏)水平与垂直填充. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetRows ( $hWnd ) 检索(工具栏)按钮行数. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetString ( $hWnd, $iIndex ) 检索(工具栏)字符串池的字符串. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyle ( $hWnd ) 检索工具栏的样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleAltDrag ( $hWnd ) 检索(工具栏)按钮的拖动样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleCustomErase ( $hWnd ) 检索(工具栏)控件是否有生成 NM_CUSTOMDRAW 通知消息的样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleFlat ( $hWnd ) 检索(工具栏)控件是否为平面控件样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleList ( $hWnd ) 检索(工具栏)控件是否为按钮文本在位图右边的样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleRegisterDrop ( $hWnd ) 检索(工具栏)控件是否具有生成 TBN_GETOBJECT 通知消息的样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleToolTips ( $hWnd ) 检索(工具栏)控件是否具有提示工具控件的样式 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleTransparent ( $hWnd ) 检索(工具栏)控件是否为透明的样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetStyleWrapable ( $hWnd ) 检索(工具栏)控件是否具有换行样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetTextRows ( $hWnd ) 检索(工具栏)按钮文本显示行的最大行数. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetToolTips ( $hWnd ) 检索(工具栏)提示工具控件句柄. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetUnicodeFormat ( $hWnd ) 检索(工具栏) Unicode 字符格式标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HideButton ( $hWnd, $iCommandID [, $bHide = True] ) 隐藏或显示(工具栏)指定的按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HighlightButton ( $hWnd, $iCommandID [, $bHighlight = True] ) 设置(工具栏)指定按钮的高亮状态. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_HitTest ( $hWnd, $iX, $iY ) 确定(工具栏)测试点的位置. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IndexToCommand ( $hWnd, $iIndex ) 检索(工具栏)按钮相关的命令标识符. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_InsertButton ( $hWnd, $iIndex, $iID, $iImage [, $sText = "" [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] ) 插入(工具栏)按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_InsertMarkHitTest ( $hWnd, $iX, $iY ) 检索(工具栏)插入标记点信息 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonChecked ( $hWnd, $iCommandID ) 检索(工具栏)按钮是否被选中. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonEnabled ( $hWnd, $iCommandID ) 检索(工具栏)按钮是否启用. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonHidden ( $hWnd, $iCommandID ) 检索(工具栏)按钮是否隐藏. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonHighlighted ( $hWnd, $iCommandID ) 检索(工具栏)检索按钮是否高亮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonIndeterminate ( $hWnd, $iCommandID ) 检索(工具栏)按钮是否为不确定状态. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_IsButtonPressed ( $hWnd, $iCommandID ) 检索(工具栏)按钮是否被按下. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_LoadBitmap ( $hWnd, $sFileName ) (工具栏)从文件添加位图的图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_LoadImages ( $hWnd, $iBitMapID ) 加载系统定义的按钮图像到工具栏控件的图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_MapAccelerator ( $hWnd, $sAccelKey ) 检索(工具栏)快捷键对应的按钮(命令) ID. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_MoveButton ( $hWnd, $iOldPos, $iNewPos ) 使用索引移动(工具栏)按钮的位置. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_PressButton ( $hWnd, $iCommandID [, $bPress = True] ) 按压或释放(工具栏)指定的按钮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetAnchorHighlight ( $hWnd, $bAnchor ) 设置(工具栏)定位高亮. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetBitmapSize ( $hWnd, $iWidth, $iHeight ) 设置工具栏位图图像的大小. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonBitMap ( $hWnd, $iCommandID, $iIndex ) 设置(工具栏)按钮相关的位图索引. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonInfo ( $hWnd, $iCommandID [, $iImage = -3 [, $iState = -1 [, $iStyle = -1 [, $iWidth = -1 [, $iParam = -1]]]]] ) 设置工具栏按钮的信息.(使用参数) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonInfoEx ( $hWnd, $iCommandID, $tButton ) 设置(工具栏)按钮扩展信息.(使用数据结构) (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonParam ( $hWnd, $iCommandID, $iParam ) 设置(工具栏)按钮参数值. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonSize ( $hWnd, $iHeight, $iWidth ) 设置添加到工具栏按钮的大小 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonState ( $hWnd, $iCommandID, $iState ) 设置(工具栏)按钮的状态信息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonStyle ( $hWnd, $iCommandID, $iStyle ) 设置(工具栏)按钮的样式标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonText ( $hWnd, $iCommandID, $sText ) 设置(工具栏)按钮的显示文本. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetButtonWidth ( $hWnd, $iMin, $iMax ) 设置工具栏按钮宽度最小和最大值. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetCmdID ( $hWnd, $iIndex, $iCommandID ) 设置工具栏按钮命令标识符 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetColorScheme ( $hWnd, $iHighlight, $iShadow ) 设置(工具栏)配色方案信息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetDisabledImageList ( $hWnd, $hImageList ) 设置(工具栏按钮)禁用(状态)图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetDrawTextFlags ( $hWnd, $iMask, $iDTFlags ) 设置工具栏文本绘制标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetExtendedStyle ( $hWnd, $iStyle ) 设置(工具栏)控件扩展样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetHotImageList ( $hWnd, $hImageList ) 设置(工具栏)热按钮(状态)图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetHotItem ( $hWnd, $iIndex ) 设置(工具栏)热项目. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetImageList ( $hWnd, $hImageList ) 设置(工具栏)默认(状态)按钮的图像列表. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetIndent ( $hWnd, $iIndent ) 设置(工具栏)第一按钮缩进. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetIndeterminate ( $hWnd, $iCommandID [, $bState = True] ) 设置或清除(工具栏)按钮的不确定状态. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetInsertMark ( $hWnd, $iButton [, $iFlags = 0] ) 设置工具栏当前插入标记. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetInsertMarkColor ( $hWnd, $iColor ) 设置(工具栏)绘制插入标记的颜色. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetMaxTextRows ( $hWnd, $iMaxRows ) 设置(工具栏)按钮文本的最大显示行数. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetMetrics ( $hWnd, $iXPad, $iYPad, $iXSpacing, $iYSpacing ) 设置工具栏控件的度量标准. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetPadding ( $hWnd, $iCX, $iCY ) 设置(工具栏)控件填充. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetParent ( $hWnd, $hParent ) 设置(工具栏)窗口控件发送通知消息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetRows ( $hWnd, $iRows [, $bLarger = True] ) 设置(工具栏)按钮行数. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyle ( $hWnd, $iStyle ) 设置(工具栏)控件样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleAltDrag ( $hWnd [, $bState = True] ) 设置(工具栏)控件按钮是否允许被拖动. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleCustomErase ( $hWnd [, $bState = True] ) 设置(工具栏)控件是否生成 NM_CUSTOMDRAW 通知消息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleFlat ( $hWnd, $bState ) 设置(工具栏)控件是否为平面类型. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleList ( $hWnd, $bState ) 设置(工具栏)按钮文本是否在位图的右边. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleRegisterDrop ( $hWnd, $bState ) 设置(工具栏)控件是否生成 TBN_GETOBJECT 通知消息. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleToolTips ( $hWnd, $bState ) 设置(工具栏)控件是否有提示工具. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleTransparent ( $hWnd, $bState ) 设置(工具栏)控件是否透明. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetStyleWrapable ( $hWnd, $bState ) 设置(工具栏)控件是否 wrapable(换行). (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetToolTips ( $hWnd, $hToolTip ) 设置工具栏关联提示工具控件 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetUnicodeFormat ( $hWnd [, $bUnicode = False] ) 设置(工具栏) Unicode 字符格式标志. (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_SetWindowTheme ( $hWnd, $sTheme ) 设置(工具栏)视觉样式. (需要: #include <GuiToolbar.au3>)
_GUICtrlTreeView_Add ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] ) 添加(树视图)(主)项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChild ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] ) 添加(树视图子)项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChildFirst ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] ) 添加(树视图第一子)项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddFirst ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] ) 添加(树视图第一主)项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_BeginUpdate ( $hWnd ) 开始(树视图)控件更新, 直到 EndUpdate 函数被调用. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ClickItem ( $hWnd, $hItem [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] ) 点击(树视图)项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000037 [, $iExStyle = 0x00000000]]]] ) 创建树视图(TreeView)控件. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateDragImage ( $hWnd, $hItem ) 创建(树视图)项目的拖动位图. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) 创建(树视图)单色位图. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Delete ( $hWnd [, $hItem = 0] ) 删除(树视图)项目及其所有子项. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteAll ( $hWnd ) 移除树视图所有项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteChildren ( $hWnd, $hItem ) 删除(树视图)项目的全部子项. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Destroy ( ByRef $hWnd ) 删除(树视图)控件. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRect ( $hWnd, $hItem [, $bTextOnly = False] ) 检索树项目矩形.(返回数据数组). (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRectEx ( $hWnd, $hItem [, $bTextOnly = False] ) 检索树项目矩形.(返回数据结构) (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EditText ( $hWnd, $hItem ) 开始编辑(树视图)指定项的文本. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndEdit ( $hWnd [, $bCancel = False] ) 结束(树视图)项目的文本编辑. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndUpdate ( $hWnd ) 停止(树视图)控件更新, 并关闭 BeginUpdate 函数. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EnsureVisible ( $hWnd, $hItem ) 展开(树视图)父项目或必要时滚动项目, 确保指定项目可见. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Expand ( $hWnd [, $hItem = 0 [, $bExpand = True]] ) 展开或折叠(树视图)指定父项目相关的子项列表. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ExpandedOnce ( $hWnd, $hItem ) 检索(树视图)项目的子项列表是否至少展开一次. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItem ( $hWnd, $sText [, $bInStr = False [, $hStart = 0]] ) 检索(树视图)指定文本的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItemEx ( $hWnd, $sTreePath [, $hStart = 0] ) 检索(树视图)指定树目录路径的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBkColor ( $hWnd ) 检索(树视图)文本背景色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBold ( $hWnd, $hItem ) 检索(树视图)项目(文本)是否为粗体样式. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChecked ( $hWnd, $hItem ) 检索(树视图)项目复选框是否选中. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildCount ( $hWnd, $hItem ) 检索(树视图)父项的子项数. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildren ( $hWnd, $hItem ) 检索(树视图)项目是否有子项. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCount ( $hWnd ) 检索(树视图)项目数. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCut ( $hWnd, $hItem ) 检索(树视图)项目是否为剪切和粘贴操作的一部分. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetDropTarget ( $hWnd, $hItem ) 检索(树视图)项目是否为拖放目标. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetEditControl ( $hWnd ) 检索(树视图)项目文本的编辑控件句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetExpanded ( $hWnd, $hItem ) 检索(树视图)项目是否展开. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstChild ( $hWnd, $hItem ) 检索(树视图)指定项目的第一子项句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstItem ( $hWnd ) 检索(树视图)顶层或第一项目句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstVisible ( $hWnd ) 检索(树视图)第一可见项目句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFocused ( $hWnd, $hItem ) 检索(树视图)项目是否具有焦点. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetHeight ( $hWnd ) 检索(树视图)当前每个项目的高度. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageIndex ( $hWnd, $hItem ) 检索(树视图)正常状态的图像索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageListIconHandle ( $hWnd, $iIndex ) 检索(树视图)图像列表句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetIndent ( $hWnd ) 检索(树视图)子项相对父项目的缩进像素值. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetInsertMarkColor ( $hWnd ) 检索(树视图)插入标记颜色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetISearchString ( $hWnd ) 检索(树视图)增量搜索字符串. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemByIndex ( $hWnd, $hItem, $iIndex ) 检索(树视图)指定子项列表位置的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemHandle ( $hWnd [, $hItem = 0] ) 检索(树视图)项目句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemParam ( $hWnd [, $hItem = 0] ) 检索(树视图)项目的特定应用值. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLastChild ( $hWnd, $hItem ) 检索(树视图)指定项目的最后子项. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLineColor ( $hWnd ) 检索(树视图层次连接的)线条颜色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNext ( $hWnd, $hItem ) 检索(树视图)调用项目的下一个项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextChild ( $hWnd, $hItem ) 检索(树视图)指定项目同级别的下一个(子)项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextSibling ( $hWnd, $hItem ) 检索(树视图)指定项目同级别的下一个项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextVisible ( $hWnd, $hItem ) 检索(树视图)指定项目的下一个可见项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNormalImageList ( $hWnd ) 检索(树视图)正常图像列表. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentHandle ( $hWnd [, $hItem = 0] ) 检索(树视图)父项目句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentParam ( $hWnd [, $hItem = 0] ) 检索(树视图)项目的父控件 ID / Param(参数) (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrev ( $hWnd, $hItem ) 检索(树视图)调用项目的上一个项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevChild ( $hWnd, $hItem ) 检索(树视图)指定项目的前一子项. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevSibling ( $hWnd, $hItem ) 检索(树视图)调用项目的同级别上一项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevVisible ( $hWnd, $hItem ) 检索(树视图)指定项目之前的第一个可见项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetScrollTime ( $hWnd ) 检索(树视图)最大滚动时间. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelected ( $hWnd, $hItem ) 检索(树视图)项目是否在选定状态 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelectedImageIndex ( $hWnd, $hItem ) 检索(树视图)显示项目选中(状态)图像在图像列表中的索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelection ( $hWnd ) 检索(树视图)当前选定的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSiblingCount ( $hWnd, $hItem ) 检索(树视图)项目的同级项目数. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetState ( $hWnd [, $hItem = 0] ) 检索(树视图)项目状态. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageIndex ( $hWnd, $hItem ) 检索(树视图)显示项目状态的图像索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageList ( $hWnd ) 检索(树视图显示项目)状态的图像列表句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetText ( $hWnd [, $hItem = 0] ) 检索(树视图)项目文本 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTextColor ( $hWnd ) 检索(树视图)文本颜色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetToolTips ( $hWnd ) 检索(树视图)提示工具子控件句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTree ( $hWnd [, $hItem = 0] ) 检索(树视图)项目的树路径. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetUnicodeFormat ( $hWnd ) 检索(树视图) Unicode 字符格式标志. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisible ( $hWnd, $hItem ) 检索(树视图)项目在当前控件视图中是否可见. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisibleCount ( $hWnd ) 检索(树视图)控件完全可见的项目数 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTest ( $hWnd, $iX, $iY ) 检索(树视图)控件点的相对位置信息.(返回结果代码) (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestEx ( $hWnd, $iX, $iY ) 检索(树视图)控件点的相对位置信息.(返回数据结构) (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestItem ( $hWnd, $iX, $iY ) 检索(树视图)指定坐标的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Index ( $hWnd, $hItem ) 检索(树视图)项目在列表的位置. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_InsertItem ( $hWnd, $sItem_Text [, $hItem_Parent = 0 [, $hItem_After = 0 [, $iImage = -1 [, $iSelImage = -1]]]] ) 插入(树视图)项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsFirstItem ( $hWnd, $hItem ) 检索(树视图)项目是否为树的第一项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsParent ( $hWnd, $hParent, $hItem ) 检索(树视图)项目是否为另一个项目的父项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Level ( $hWnd, $hItem ) 检索(树视图)项目缩进级别. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItem ( $hWnd, $hItem [, $iFlag = 0] ) 选中(树视图)项目,并滚动到视图或刷新项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItemByIndex ( $hWnd, $hItem, $iIndex ) 选择(树视图)指定父列表索引的项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBkColor ( $hWnd, $vRGBColor ) 设置(树视图)背景色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBold ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的粗体文本样式. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChecked ( $hWnd, $hItem [, $bCheck = True] ) 设置(树视图)项目复选框选中. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCheckedByIndex ( $hWnd, $hItem, $iIndex [, $bCheck = True] ) 设置(树视图)指定索引的项目复选框选中. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChildren ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的子项标志. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCut ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的剪切和粘贴操作标志. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetDropTarget ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的拖放目标标志 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetFocused ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的焦点. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetHeight ( $hWnd, $iHeight ) 设置(树视图)项目的高度. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIcon ( $hWnd [, $hItem = 0 [, $sIconFile = "" [, $iIconID = 0 [, $iImageMode = 6]]]] ) 设置(树视图)项目图标. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetImageIndex ( $hWnd, $hItem, $iIndex ) 设置(树视图)显示项目正常状态的图像在图像列表中的索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIndent ( $hWnd, $iIndent ) 设置树视图控件的缩进宽度, 并刷新控件到新的宽度. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMark ( $hWnd, $hItem [, $bAfter = True] ) 设置(树视图)插入标记. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMarkColor ( $hWnd, $iColor ) 设置(树视图)插入标记颜色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemHeight ( $hWnd, $hItem, $iIntegral ) 设置(树视图)个别项目的高度 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemParam ( $hWnd, $hItem, $iParam ) 设置(树视图)项目的具体值. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetLineColor ( $hWnd, $vRGBColor ) 设置(树视图层次连接的)线条颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetNormalImageList ( $hWnd, $hImageList ) 设置(树视图)控件正常图像列表. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetScrollTime ( $hWnd, $iTime ) 设置(树视图)最大滚动时间. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelected ( $hWnd, $hItem [, $bFlag = True] ) 设置(树视图)项目的选中状态. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelectedImageIndex ( $hWnd, $hItem, $iIndex ) 设置(树视图)选中的图像索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetState ( $hWnd, $hItem [, $iState = 0 [, $bSetState = True]] ) 设置(树视图)指定项目的状态 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageIndex ( $hWnd, $hItem, $iIndex ) 设置(树视图)项目状态图像在图像列表中的索引. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageList ( $hWnd, $hImageList ) 设置(树视图)控件的状态图像列表. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetText ( $hWnd [, $hItem = 0 [, $sText = ""]] ) 设置(树视图)项目文本. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetTextColor ( $hWnd, $vRGBColor ) 设置(树视图)文本颜色. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetToolTips ( $hWnd, $hToolTip ) 设置(树视图)提示工具子控件句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetUnicodeFormat ( $hWnd [, $bFormat = True] ) 设置(树视图) Unicode 字符格式标志. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Sort ( $hWnd ) 排序(树视图)项目. (需要: #include <GuiTreeView.au3>)
_GUIImageList_Add ( $hWnd, $hImage [, $hMask = 0] ) 添加一或多个图像到图像列表. (需要: #include <GuiImageList.au3>)
_GUIImageList_AddBitmap ( $hWnd, $sImage [, $sMask = ""] ) 添加位图到图像列表. (需要: #include <GuiImageList.au3>)
_GUIImageList_AddIcon ( $hWnd, $sFilePath [, $iIndex = 0 [, $bLarge = False]] ) 添加图标到图像列表. (需要: #include <GuiImageList.au3>)
_GUIImageList_AddMasked ( $hWnd, $hImage [, $iMask = 0] ) 添加一或多个图像或到图像列表, 生成指定位图的掩码. (需要: #include <GuiImageList.au3>)
_GUIImageList_BeginDrag ( $hWnd, $iTrack, $iXHotSpot, $iYHotSpot ) 开始拖动图像. (需要: #include <GuiImageList.au3>)
_GUIImageList_Copy ( $hWnd, $iSource, $iDestination ) 源图像复制到目标图像索引. (需要: #include <GuiImageList.au3>)
_GUIImageList_Create ( [$iCX = 16 [, $iCY = 16 [, $iColor = 4 [, $iOptions = 0 [, $iInitial = 4 [, $iGrow = 4]]]]]] ) 创建图像列表(ImageList)控件. (需要: #include <GuiImageList.au3>)
_GUIImageList_Destroy ( $hWnd ) 销毁图像列表. (需要: #include <GuiImageList.au3>)
_GUIImageList_DestroyIcon ( $hIcon ) 销毁图标并释放图标占用的内存 (需要: #include <GuiImageList.au3>)
_GUIImageList_DragEnter ( $hWnd, $iX, $iY ) 拖动图像显示在窗口的指定位置 (需要: #include <GuiImageList.au3>)
_GUIImageList_DragLeave ( $hWnd ) 解锁指定窗口和隐藏拖动图像, 使窗口更新. (需要: #include <GuiImageList.au3>)
_GUIImageList_DragMove ( $iX, $iY ) 拖放操作期间移动图像. (需要: #include <GuiImageList.au3>)
_GUIImageList_Draw ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iStyle = 0] ) 在指定的设备环境中绘制图像列表项目. (需要: #include <GuiImageList.au3>)
_GUIImageList_DrawEx ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iDX = 0 [, $iDY = 0 [, $iRGBBk = 0xFFFFFFFF [, $iRGBFg = 0xFFFFFFFF [, $iStyle = 0]]]]] ) 在指定的设备环境中绘制图像列表项目(Ex). (需要: #include <GuiImageList.au3>)
_GUIImageList_Duplicate ( $hWnd ) 复制现有图像列表. (需要: #include <GuiImageList.au3>)
_GUIImageList_EndDrag (  ) 结束(图像)拖动操作. (需要: #include <GuiImageList.au3>)
_GUIImageList_GetBkColor ( $hWnd ) 检索图像列表的当前背景颜色. (需要: #include <GuiImageList.au3>)
_GUIImageList_GetIcon ( $hWnd, $iIndex [, $iStyle = 0] ) 创建来自图像列表的图像和掩码的图标 (需要: #include <GuiImageList.au3>)
_GUIImageList_GetIconHeight ( $hWnd ) 检索图像列表中的图像高度. (需要: #include <GuiImageList.au3>)
_GUIImageList_GetIconSize ( $hWnd ) 检索图像列表中图像的尺寸.(返回数据数组) (需要: #include <GuiImageList.au3>)
_GUIImageList_GetIconSizeEx ( $hWnd ) 检索图像列表中图像的尺寸.(返回数据结构) (需要: #include <GuiImageList.au3>)
_GUIImageList_GetIconWidth ( $hWnd ) 检索图像列表中图像的宽度. (需要: #include <GuiImageList.au3>)
_GUIImageList_GetImageCount ( $hWnd ) 检索图像列表中的图像数. (需要: #include <GuiImageList.au3>)
_GUIImageList_GetImageInfoEx ( $hWnd, $iIndex ) 检索图像信息. (需要: #include <GuiImageList.au3>)
_GUIImageList_Remove ( $hWnd [, $iIndex = -1] ) 删除图像列表中的图像. (需要: #include <GuiImageList.au3>)
_GUIImageList_ReplaceIcon ( $hWnd, $iIndex, $hIcon ) 替换图标或光标的图像 (需要: #include <GuiImageList.au3>)
_GUIImageList_SetBkColor ( $hWnd, $iClrBk ) 设置图像列表背景颜色. (需要: #include <GuiImageList.au3>)
_GUIImageList_SetIconSize ( $hWnd, $iCX, $iCY ) 设置图像列表中的图像尺寸, 并删除图像列表中的全部图像. (需要: #include <GuiImageList.au3>)
_GUIImageList_SetImageCount ( $hWnd, $iNewCount ) 调整现有图像列表的大小. (需要: #include <GuiImageList.au3>)
_GUIImageList_Swap ( $hWnd, $iSource, $iDestination ) 交换源和目标图像的索引. (需要: #include <GuiImageList.au3>)
_GUIScrollBars_EnableScrollBar ( $hWnd [, $iSBflags = $SB_BOTH [, $iArrows = $ESB_ENABLE_BOTH]] ) 启用/禁用滚动条 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarInfoEx ( $hWnd, $iObject ) 检索指定滚动条信息. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRect ( $hWnd, $iObject ) 检索滚动条坐标 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRGState ( $hWnd, $iObject ) 检索滚动条组件的状态 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYLineButton ( $hWnd, $iObject ) 检索滚动块(thumb)的高度或宽度 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbBottom ( $hWnd, $iObject ) 检索滚动块(thumb)底部或右侧位置 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbTop ( $hWnd, $iObject ) 检索滚动块(thumb)上部或左侧位置 (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfo ( $hWnd, $iBar, ByRef $tSCROLLINFO ) 检索滚动条的参数. (使用数据结构) (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoEx ( $hWnd, $iBar ) 检索滚动条的参数. (返回数据结构) (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMax ( $hWnd, $iBar ) 检索最大滚动位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMin ( $hWnd, $iBar ) 检索最小滚动位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPage ( $hWnd, $iBar ) 检索页面大小. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPos ( $hWnd, $iBar ) 检索滚动块的位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoTrackPos ( $hWnd, $iBar ) 检索用户拖动滚动块的即时位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollPos ( $hWnd, $iBar ) 检索滚动条内滚动块的当前位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollRange ( $hWnd, $iBar ) 检索滚动条内滚动块当前最低和最高位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_Init ( $hWnd [, $iMaxH = -1 [, $iMaxV = -1]] ) 初始化窗口的滚动条. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_ScrollWindow ( $hWnd, $iXAmount, $iYAmount ) 滚动指定窗口客户区的内容. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfo ( $hWnd, $iBar, $tSCROLLINFO [, $bRedraw = True] ) 设置滚动条的参数. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMax ( $hWnd, $iBar, $iMax ) 设置最大滚动位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMin ( $hWnd, $iBar, $iMin ) 设置最小滚动位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPage ( $hWnd, $iBar, $iPage ) 设置页面大小. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPos ( $hWnd, $iBar, $iPos ) 设置指定滚动条内滚动块(thumb)的位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollRange ( $hWnd, $iBar, $iMinPos, $iMaxPos ) 设置滚动条内滚动块的最小和最大位置. (需要: #include <GuiScrollBars.au3>)
_GUIScrollBars_ShowScrollBar ( $hWnd, $iBar [, $bShow = True] ) 显示或隐藏指定的滚动条. (需要: #include <GuiScrollBars.au3>)
_GUIToolTip_Activate ( $hWnd ) 激活工具提示控制. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_AddTool ( $hTool, $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] ) 注册提示工具控件. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_AdjustRect ( $hWnd, ByRef $tRECT [, $bLarger = True] ) 依据窗口矩形计算显示文本的矩形. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_BitsToTTF ( $iFlags ) 解码位标志为 TTF_* 字符串. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Create ( $hWnd [, $iStyle = $_TT_ghTTDefaultStyle] ) 创建提示工具控件. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Deactivate ( $hWnd ) 停用提示工具控件 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_DelTool ( $hWnd, $hTool [, $iID = 0] ) 从工具提示控制删除工具. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Destroy ( ByRef $hWnd ) 删除提示工具控件. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_EnumTools ( $hWnd, $iIndex ) 检索当前提示工具信息. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleHeight ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) 检索提示工具控件高度. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleSize ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) 检索提示工具控件的宽度和高度. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleWidth ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) 检索提示工具控件的宽度. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetCurrentTool ( $hWnd ) 检索当前提示工具信息. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetDelayTime ( $hWnd, $iDuration ) 检索提示工具控件初始, 弹出或重新显示的持续时间. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMargin ( $hWnd ) 检索提示工具顶部, 左侧, 底部和右侧的边距. (返回数据数组) (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMarginEx ( $hWnd ) 检索提示工具顶部, 左侧, 底部和右侧的边距. (返回数据结构) (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMaxTipWidth ( $hWnd ) 检索提示工具窗口的最大宽度. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetText ( $hWnd, $hTool, $iID ) 检索工具的提示文本. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipBkColor ( $hWnd ) 检索(提示工具)背景颜色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipTextColor ( $hWnd ) 检索提示工具的文本颜色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleBitMap ( $hWnd ) 检索(提示工具)标题位图图标. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleText ( $hWnd ) 检索(提示工具)标题 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolCount ( $hWnd ) 返回提示工具维护的工具计数. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolInfo ( $hWnd, $hTool, $iID ) 检索特定提示工具的信息. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_HitTest ( $hWnd, $hTool, $iX, $iY ) 检索工具控件保留的提示工具信息. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_NewToolRect ( $hWnd, $hTool, $iID, $iLeft, $iTop, $iRight, $iBottom ) 设置提示控件新的边界矩形. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Pop ( $hWnd ) 删除视图中显示的提示工具. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_PopUp ( $hWnd ) 设置提示工具显示在最后的鼠标坐标. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetDelayTime ( $hWnd, $iDuration, $iTime ) 设置提示工具初始, 弹出或重新显示的延迟时间. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetMargin ( $hWnd, $iLeft, $iTop, $iRight, $iBottom ) 设置提示工具顶部,左侧,底部和右侧边距. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetMaxTipWidth ( $hWnd, $iWidth ) 设置提示工具窗口的最大宽度. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipBkColor ( $hWnd, $iColor ) 设置提示工具背景颜色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipTextColor ( $hWnd, $iColor ) 设置提示文本颜色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTitle ( $hWnd, $sTitle [, $iIcon = 0] ) 添加(提示工具)标准图标和标题字符串. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetToolInfo ( $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] ) 设置(提示工具)工具的信息. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetWindowTheme ( $hWnd, $sStyle ) 设置(提示工具)视觉样式. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_ToolExists ( $hWnd ) 确定是否存在当前显示的工具. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_ToolToArray ( $hWnd, ByRef $tToolInfo, $iError ) 传输工具信息结构到数组. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_TrackActivate ( $hWnd [, $bActivate = True [, $hTool = 0 [, $iID = 0]]] ) 激活或停用提示工具跟踪. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_TrackPosition ( $hWnd, $iX, $iY ) 设置跟踪提示工具的位置. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Update ( $hWnd ) 强制刷新当前提示工具 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_UpdateTipText ( $hWnd, $hTool, $iID, $sText ) 设置提示工具文本. (需要: #include <GuiToolTip.au3>)
_HexToString ( $sHex ) 十六进制字符串转换为字符串. (需要: #include <String.au3>)
_IEAction ( ByRef $oObject, $sAction ) 执行浏览器的简单操作. (需要: #include <IE.au3>)
_IEAttach ( $sString [, $sMode = "title" [, $iInstance = 1]] ) 附加匹配搜索字符串的子链的实例到指定 IE 浏览器.(根据所选择的模式). (需要: #include <IE.au3>)
_IEBodyReadHTML ( ByRef $oObject ) 检索文档内 &lt;body&gt; 标签的 HTML. (需要: #include <IE.au3>)
_IEBodyReadText ( ByRef $oObject ) 检索文档 &lt;body&gt; 标签内的文本. (需要: #include <IE.au3>)
_IEBodyWriteHTML ( ByRef $oObject, $sHTML ) 替换文档内 &lt;body&gt; 的 HTML. (需要: #include <IE.au3>)
_IECreate ( [$sUrl = "about:blank" [, $iTryAttach = 0 [, $iVisible = 1 [, $iWait = 1 [, $iTakeFocus = 1]]]]] ) 创建 IE 浏览器窗口. (需要: #include <IE.au3>)
_IECreateEmbedded (  ) 在 AutoIt GUI 使用 GuiCtrlCreateObj() 创建合适的嵌入式 Web 浏览器对象. (需要: #include <IE.au3>)
_IEDocGetObj ( ByRef $oObject ) 依据任何特定 DOM 对象， 返回相关联的文档对象引用. (需要: #include <IE.au3>)
_IEDocInsertHTML ( ByRef $oObject, $sString [, $sWhere = "beforeend"] ) 插入 HTML 文本或元素. (需要: #include <IE.au3>)
_IEDocInsertText ( ByRef $oObject, $sString [, $sWhere = "beforeend"] ) 插入文本或周围元素. (需要: #include <IE.au3>)
_IEDocReadHTML ( ByRef $oObject ) 返回文档完整的 HTML 源. (需要: #include <IE.au3>)
_IEDocWriteHTML ( ByRef $oObject, $sHTML ) 替换整个文档的 HTML. (需要: #include <IE.au3>)
_IEErrorNotify ( [$vNotify = Default] ) 指定是否 IE.au3 自动警告和错误通知 (到控制台) (需要: #include <IE.au3>)
_IEFormElementCheckBoxSelect ( ByRef $oObject, $sString [, $sName = "" [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]]] ) 设定指定表单元素的值. (需要: #include <IE.au3>)
_IEFormElementGetCollection ( ByRef $oObject [, $iIndex = -1] ) 检索给定表的所有表单元素的对象变量集合. (需要: #include <IE.au3>)
_IEFormElementGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) 返回表格元素对象引用的名称. (需要: #include <IE.au3>)
_IEFormElementGetValue ( ByRef $oObject ) 检索给定的表单元素的值. (需要: #include <IE.au3>)
_IEFormElementOptionSelect ( ByRef $oObject, $sString [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]] ) 设置指定的表单元素的值. (需要: #include <IE.au3>)
_IEFormElementRadioSelect ( ByRef $oObject, $sString, $sName [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]] ) 设置指定的表单元素的值 (需要: #include <IE.au3>)
_IEFormElementSetValue ( ByRef $oObject, $sNewValue [, $iFireEvent = 1] ) 设置指定的表单元素的值. (需要: #include <IE.au3>)
_IEFormGetCollection ( ByRef $oObject [, $iIndex = -1] ) 返回文档表单或单一表单索引的集合对象变量. (需要: #include <IE.au3>)
_IEFormGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) 检索对象引用的表单名称. (需要: #include <IE.au3>)
_IEFormImageClick ( ByRef $oObject, $sLinkText [, $sMode = "src" [, $iIndex = 0 [, $iWait = 1]]] ) 模拟鼠标点击 &lt;input type=image&gt;.  匹配子链匹配 alt 的文本, 名称或 src. (需要: #include <IE.au3>)
_IEFormReset ( ByRef $oObject ) 重置指定表单设置值回到自己的加载默认. (需要: #include <IE.au3>)
_IEFormSubmit ( ByRef $oObject [, $iWait = 1] ) 提交指定的表单. (需要: #include <IE.au3>)
_IEFrameGetCollection ( ByRef $oObject [, $iIndex = -1] ) 返回一个集合对象, 包含框架帧, 或普通页的iframe, 或单帧, 或 IFRAME 的索引. (需要: #include <IE.au3>)
_IEFrameGetObjByName ( ByRef $oObject, $sName ) 返回对象引用的框架或 iframe 名字. (需要: #include <IE.au3>)
_IEGetObjById ( ByRef $oObject, $sID ) 返回对象 ID 变量. (需要: #include <IE.au3>)
_IEGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) 返回对象名称变量. (需要: #include <IE.au3>)
_IEHeadInsertEventScript ( ByRef $oObject, $sHTMLFor, $sEvent, $sScript ) 插入 Javascript 到文档头. (需要: #include <IE.au3>)
_IEImgClick ( ByRef $oObject, $sLinkText [, $sMode = "src" [, $iIndex = 0 [, $iWait = 1]]] ) 模拟鼠标点击图像. 匹配子链的 alt 文本, 名称, 或 Src. (需要: #include <IE.au3>)
_IEImgGetCollection ( ByRef $oObject [, $iIndex = -1] ) 返回集合中的对象变量, 代表文档中的 IMG 标记, 或由单图象索引. (需要: #include <IE.au3>)
_IEIsFrameSet ( ByRef $oObject ) 检查指定窗口是否包含框架. (需要: #include <IE.au3>)
_IELinkClickByIndex ( ByRef $oObject, $iIndex [, $iWait = 1] ) 模拟鼠标点击 0 基索引链接 (源顺序). (需要: #include <IE.au3>)
_IELinkClickByText ( ByRef $oObject, $sLinkText [, $iIndex = 0 [, $iWait = 1]] ) 模拟鼠标点击匹配子链链接的字符串. (需要: #include <IE.au3>)
_IELinkGetCollection ( ByRef $oObject [, $iIndex = -1] ) 返回对象集合，其中包含文档或单一链接的所有链接索引. (需要: #include <IE.au3>)
_IELoadWait ( ByRef $oObject [, $iDelay = 0 [, $iTimeout = -1]] ) 等待浏览器的页面加载完成之前返回. (需要: #include <IE.au3>)
_IELoadWaitTimeout ( [$iTimeout = -1] ) 检索或设置 _IELoadWait() 尝试超时之前的当前毫秒值. (需要: #include <IE.au3>)
_IENavigate ( ByRef $oObject, $sUrl [, $iWait = 1] ) 设置现有浏览器窗口定位到指定的 URL. (需要: #include <IE.au3>)
_IEPropertyGet ( ByRef $oObject, $sProperty ) 返回浏览器的选择属性或 DOM 元素. (需要: #include <IE.au3>)
_IEPropertySet ( ByRef $oObject, $sProperty, $vValue ) 设置浏览器的选择属性或 DOM 元素. (需要: #include <IE.au3>)
_IEQuit ( ByRef $oObject ) 关闭浏览器并删除对象引用. (需要: #include <IE.au3>)
_IETableGetCollection ( ByRef $oObject [, $iIndex = -1] ) 检索对象变量集合, 代表文档中的所有表或由单个表的索引. (需要: #include <IE.au3>)
_IETableWriteToArray ( ByRef $oObject [, $bTranspose = False] ) 表内容读入数组. (需要: #include <IE.au3>)
_IETagNameAllGetCollection ( ByRef $oObject [, $iIndex = -1] ) 返回对象集合的所有元素索引, 包括文档或文档层次结构中源顺序或单个元素索引. (需要: #include <IE.au3>)
_IETagNameGetCollection ( ByRef $oObject, $sTagName [, $iIndex = -1] ) 返回对象所有元素的集合, 包含指定的标记名称或单个元素的索引. (需要: #include <IE.au3>)
_IE_Example ( [$sModule = "basic"] ) 显示新浏览器窗口, 预加载 IE.au3 例子或测试中使用的文件. (需要: #include <IE.au3>)
_IE_Introduction ( [$sModule = "basic"] ) 在浏览器窗口显示 IE.au3 相关介绍信息. (需要: #include <IE.au3>)
_IE_VersionInfo (  ) 返回关于 IE.au3 版本信息的数组. (需要: #include <IE.au3>)
_INetExplorerCapable ( $sIEString ) 将字符串转换为 IE 浏览器的有效行. (需要: #include <Inet.au3>)
_INetGetSource ( $sURL [, $bString = True] ) 获取 URL 源, 不写临时文件. (需要: #include <Inet.au3>)
_INetMail ( $sMailTo, $sMailSubject, $sMailBody ) 打开给定地址, 主题, 和正文的默认用户邮件客户端. (需要: #include <Inet.au3>)
_INetSmtpMail ( $sSMTPServer, $sFromName, $sFromAddress, $sToAddress [, $sSubject = "" [, $aBody = "" [, $sEHLO = "" [, $sFirst = "" [, $bTrace = 0]]]]] ) 发送一封电子邮件, 不使用外部电子邮件程序. (需要: #include <Inet.au3>)
_IsPressed ( $sHexKey [, $vDLL = 'user32.dll'] ) 检查点击的键盘键码. (需要: #include <Misc.au3>)
_MathCheckDiv ( $iNum1 [, $iNum2 = 2] ) 检查第 1 个数字是否可被第 2 个数字整除. (需要: #include <Math.au3>)
_Max ( $iNum1, $iNum2 ) 确定两数中的较大数. (需要: #include <Math.au3>)
_MemGlobalAlloc ( $iBytes [, $iFlags = 0] ) 从堆中分配指定的字节数. (需要: #include <Memory.au3>)
_MemGlobalFree ( $hMemory ) 释放全局内存对象并使其句柄无效. (需要: #include <Memory.au3>)
_MemGlobalLock ( $hMemory ) 锁定全局内存对象, 并返回内存块的第一字节指针. (需要: #include <Memory.au3>)
_MemGlobalSize ( $hMemory ) 检索指定全局内存对象的当前大小. (需要: #include <Memory.au3>)
_MemGlobalUnlock ( $hMemory ) 递减 GMEM_MOVEABLE 分配的内存对象的锁定计数. (需要: #include <Memory.au3>)
_MemMoveMemory ( $pSource, $pDest, $iLength ) 向前或向后移动内存, 对齐或不对齐 (需要: #include <Memory.au3>)
_MemVirtualAlloc ( $pAddress, $iSize, $iAllocation, $iProtect ) 储备或提交调用进程的虚拟地址空间中的页面区域 (需要: #include <Memory.au3>)
_MemVirtualAllocEx ( $hProcess, $pAddress, $iSize, $iAllocation, $iProtect ) 保留虚拟地址空间内指定进程的内存区域 (需要: #include <Memory.au3>)
_MemVirtualFree ( $pAddress, $iSize, $iFreeType ) 释放进程虚拟地址空间的页面区域 (需要: #include <Memory.au3>)
_MemVirtualFreeEx ( $hProcess, $pAddress, $iSize, $iFreeType ) 释放进程虚拟地址空间的页面区域 (需要: #include <Memory.au3>)
_Min ( $iNum1, $iNum2 ) 确定两数中的较小数. (需要: #include <Math.au3>)
_MouseTrap ( [$iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0]]]] ) 限制鼠标光标到指定矩形坐标的范围内. (需要: #include <Misc.au3>)
_NamedPipes_CallNamedPipe ( $sPipeName, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize, ByRef $iRead [, $iTimeOut = 0] ) 执行命名管道的读/写操作. (需要: #include <NamedPipes.au3>)
_NamedPipes_ConnectNamedPipe ( $hNamedPipe [, $tOverlapped = 0] ) 启用命名管道服务器进程等待客户进程连接. (需要: #include <NamedPipes.au3>)
_NamedPipes_CreateNamedPipe ( $sName [, $iAccess = 2 [, $iFlags = 2 [, $iACL = 0 [, $iType = 1 [, $iRead = 1 [, $iWait = 0 [, $iMaxInst = 25 [, $iOutBufSize = 4096 [, $iInpBufSize = 4096 [, $iDefaultTimeout = 5000 [, $tSecurity = 0]]]]]]]]]]] ) 创建命名管道实例. (需要: #include <NamedPipes.au3>)
_NamedPipes_CreatePipe ( ByRef $hReadPipe, ByRef $hWritePipe [, $tSecurity = 0 [, $iSize = 0]] ) 创建一个匿名管道. (需要: #include <NamedPipes.au3>)
_NamedPipes_DisconnectNamedPipe ( $hNamedPipe ) 从客户端进程断开服务器端命名管道实例. (需要: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeHandleState ( $hNamedPipe ) 检索指定命名管道的信息. (需要: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeInfo ( $hNamedPipe ) 检索指定命名管道的信息. (需要: #include <NamedPipes.au3>)
_NamedPipes_PeekNamedPipe ( $hNamedPipe ) 从管道复制数据到缓冲区, 并且不从管道中删除该数据. (需要: #include <NamedPipes.au3>)
_NamedPipes_SetNamedPipeHandleState ( $hNamedPipe, $iRead, $iWait [, $iBytes = 0 [, $iTimeOut = 0]] ) 设置指定的命名管道读模式和阻塞模式. (需要: #include <NamedPipes.au3>)
_NamedPipes_TransactNamedPipe ( $hNamedPipe, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize [, $tOverlapped = 0] ) 在网络操作中读取和写入命名管道. (需要: #include <NamedPipes.au3>)
_NamedPipes_WaitNamedPipe ( $sPipeName [, $iTimeOut = 0] ) 等待命名管道实例可用. (需要: #include <NamedPipes.au3>)
_Net_Share_ConnectionEnum ( $sServer, $sQualifier ) 列出共享资源的所有连接. (需要: #include <NetShare.au3>)
_Net_Share_FileClose ( $sServer, $iFileID ) 强制关闭资源. (需要: #include <NetShare.au3>)
_Net_Share_FileEnum ( [$sServer = "" [, $sBaseName = "" [, $sUserName = ""]]] ) 返回服务器上打开的文件信息. (需要: #include <NetShare.au3>)
_Net_Share_FileGetInfo ( $sServer, $iFileID ) 检索服务器特定资源的信息. (需要: #include <NetShare.au3>)
_Net_Share_PermStr ( $iPerm ) 返回资源权限字符串. (需要: #include <NetShare.au3>)
_Net_Share_ResourceStr ( $iResource ) 返回资源的字符串表示形式 (需要: #include <NetShare.au3>)
_Net_Share_SessionDel ( [$sServer = "" [, $sClientName = "" [, $sUserName = ""]]] ) 结束服务器和工作站之间的网络会话. (需要: #include <NetShare.au3>)
_Net_Share_SessionEnum ( [$sServer = "" [, $sClientName = "" [, $sUserName = ""]]] ) 提供有关在服务器上建立会话的信息 (需要: #include <NetShare.au3>)
_Net_Share_SessionGetInfo ( $sServer, $sClientName, $sUserName ) 检索服务器和工作站之间建立会话的信息. (需要: #include <NetShare.au3>)
_Net_Share_ShareAdd ( $sServer, $sShare, $iType, $sResourcePath [, $sComment = "" [, $iMaxUses = -1]] ) 共享服务器资源. (需要: #include <NetShare.au3>)
_Net_Share_ShareCheck ( $sServer, $sShare ) 检查服务器是否为共享设备. (需要: #include <NetShare.au3>)
_Net_Share_ShareDel ( $sServer, $sShare ) 从服务器的共享资源列表中删除一个共享名 (需要: #include <NetShare.au3>)
_Net_Share_ShareEnum ( [$sServer = ""] ) 检索服务器上每个共享资源的信息. (需要: #include <NetShare.au3>)
_Net_Share_ShareGetInfo ( $sServer, $sShare ) 检索特定服务器上共享资源的信息. (需要: #include <NetShare.au3>)
_Net_Share_ShareSetInfo ( $sServer, $sShare, $sComment, $iMaxUses ) 共享服务器资源. (需要: #include <NetShare.au3>)
_Net_Share_StatisticsGetSvr ( [$sServer = ""] ) 检索服务器操作统计. (需要: #include <NetShare.au3>)
_Net_Share_StatisticsGetWrk ( [$sWorkStation = ""] ) 检索工作站操作统计. (需要: #include <NetShare.au3>)
_Now (  ) 返回电脑格式的当前日期和时间. (需要: #include <Date.au3>)
_NowCalc (  ) 返回用于日期计算的当前日期和时间格式 YYYY/MM/DD HH:MM:SS. (需要: #include <Date.au3>)
_NowCalcDate (  ) 检索当前日期的 YYYY/MM/DD 格式. (需要: #include <Date.au3>)
_NowDate (  ) 返回当前日期的 PC 格式. (需要: #include <Date.au3>)
_NowTime ( [$sType = 3] ) 返回请求格式的当前时间. (需要: #include <Date.au3>)
_PathFull ( $sRelativePath [, $sBasePath = @WorkingDir] ) 基于提供的相对路径创建路径, 并返回新创建的绝对路径 (需要: #include <File.au3>)
_PathGetRelative ( $sFrom, $sTo ) 返回一个目录的相对路径 (需要: #include <File.au3>)
_PathMake ( $sDrive, $sDir, $sFileName, $sExtension ) 创建包含驱动器, 目录, 文件名和扩展名的路径. (需要: #include <File.au3>)
_PathSplit ( $sFilePath, ByRef $sDrive, ByRef $sDir, ByRef  $sFileName, ByRef  $sExtension ) 拆分完整路径为驱动器, 目录, 文件名和扩展名. 缺少部分由空字符串代替. (需要: #include <File.au3>)
_ProcessGetName ( $iPID ) 返回进程标识符(PID)的进程名称. (需要: #include <Process.au3>)
_ProcessGetPriority ( $vProcess ) 获取打开进程的优先级. (需要: #include <Process.au3>)
_Radian ( $iDegrees ) 度数值转换为弧度值. (需要: #include <Math.au3>)
_ReplaceStringInFile ( $sFilePath, $sSearchString, $sReplaceString [, $iCaseSensitive = 0 [, $iOccurance = 1]] ) 替换文件中的子字符串 (需要: #include <File.au3>)
_RunDos ( $sCommand ) 在隐藏的命令窗口执行 DOS 命令. (需要: #include <Process.au3>)
_ScreenCapture_Capture ( [$sFileName = "" [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]]] ) 捕获屏幕区域. (需要: #include <ScreenCapture.au3>)
_ScreenCapture_CaptureWnd ( $sFileName, $hWnd [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]] ) 捕捉指定窗口或控件 ID 的屏幕快照 (需要: #include <ScreenCapture.au3>)
_ScreenCapture_SaveImage ( $sFileName, $hBitmap [, $bFreeBmp = True] ) 保存图像到文件. (需要: #include <ScreenCapture.au3>)
_ScreenCapture_SetBMPFormat ( $iFormat ) 设置屏幕捕捉的 BMP 位格式. (需要: #include <ScreenCapture.au3>)
_ScreenCapture_SetJPGQuality ( $iQuality ) 设置屏幕捕获的 JPEG 质量级别. (需要: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFColorDepth ( $iDepth ) 设置屏幕捕捉的 TIFF 颜色深度. (需要: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFCompression ( $iCompress ) 设置屏幕捕捉的 TIFF 压缩类型. (需要: #include <ScreenCapture.au3>)
_Security__AdjustTokenPrivileges ( $hToken, $bDisableAll, $tNewState, $iBufferLen [, $tPrevState = 0 [, $pRequired = 0]] ) 启用或禁用指定的访问令牌特权. (需要: #include <Security.au3>)
_Security__CreateProcessWithToken ( $hToken, $iLogonFlags, $sCommandLine, $iCreationFlags, $sCurDir, $tSTARTUPINFO, $tPROCESS_INFORMATION ) 创建运行指定令牌安全环境的新进程及其主线程. (需要: #include <Security.au3>)
_Security__DuplicateTokenEx ( $hExistingToken, $iDesiredAccess, $iImpersonationLevel, $iTokenType ) 创建一个重复现有令牌的新访问令牌. (需要: #include <Security.au3>)
_Security__GetAccountSid ( $sAccount [, $sSystem = ""] ) 检索帐户的安全标识符(SID). (需要: #include <Security.au3>)
_Security__GetLengthSid ( $pSID ) 返回有效 SID 的字节长度 (需要: #include <Security.au3>)
_Security__GetTokenInformation ( $hToken, $iClass ) 检索访问令牌指定类型的信息 (需要: #include <Security.au3>)
_Security__ImpersonateSelf ( [$iLevel = $SECURITYIMPERSONATION] ) 获取访问令牌调用进程的模拟安全环境. (需要: #include <Security.au3>)
_Security__IsValidSid ( $pSID ) 验证 SID (需要: #include <Security.au3>)
_Security__LookupAccountName ( $sAccount [, $sSystem = ""] ) 检索账户和域名的安全标识符(SID). (需要: #include <Security.au3>)
_Security__LookupAccountSid ( $vSID [, $sSystem = ""] ) 检索 SID 的帐户名称. (需要: #include <Security.au3>)
_Security__LookupPrivilegeValue ( $sSystem, $sName ) 检索 64 位整数形式特权值的本地唯一标识符 (LUID). (需要: #include <Security.au3>)
_Security__OpenProcessToken ( $hProcess, $iAccess ) 返回与进程关联的访问令牌. (需要: #include <Security.au3>)
_Security__OpenThreadToken ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] ) 打开与线程相关联的访问令牌 (需要: #include <Security.au3>)
_Security__OpenThreadTokenEx ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] ) 打开与线程相关联的访问令牌, 如果需要则模拟客户端的安全环境 (需要: #include <Security.au3>)
_Security__SetPrivilege ( $hToken, $sPrivilege, $bEnable ) 启用或禁用本地令牌特权. (需要: #include <Security.au3>)
_Security__SetTokenInformation ( $hToken, $iTokenInformation, $vTokenInformation, $iTokenInformationLength ) 设置指定访问令牌的各类信息. (需要: #include <Security.au3>)
_Security__SidToStringSid ( $pSID ) 转换二进制 SID 为字符串. (需要: #include <Security.au3>)
_Security__SidTypeStr ( $iType ) 转换 SID 类型为字符串形式. (需要: #include <Security.au3>)
_Security__StringSidToSid ( $sSID ) 转换字符串 SID 为二进制 SID. (需要: #include <Security.au3>)
_SendMessage ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lresult"]]]]]] ) 封装常用 DLL 调用. (需要: #include <SendMessage.au3>)
_SendMessageA ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lresult"]]]]]] ) 消息发送到窗口或控件 (强制 Ansi 调用). (需要: #include <SendMessage.au3>)
_SetDate ( $iDay [, $iMonth = 0 [, $iYear = 0]] ) 设置系统的当前日期. (需要: #include <Date.au3>)
_SetTime ( $iHour, $iMinute [, $iSecond = 0 [, $iMSeconds = 0]] ) 设置系统的当前时间. (需要: #include <Date.au3>)
_Singleton ( $sOccurrenceName [, $iFlag = 0] ) 强制脚本仅执行一个设计实例. (需要: #include <Misc.au3>)
_SoundClose ( $aSndID ) 关闭 _SoundOpen 打开的声音. (需要: #include <Sound.au3>)
_SoundLength ( $aSndID [, $iMode = 1] ) 返回声音文件长度. (需要: #include <Sound.au3>)
_SoundOpen ( $sFilePath ) 打开声音文件供其它 _Sound 函数使用. (需要: #include <Sound.au3>)
_SoundPause ( $aSndID ) 暂停正在播放的声音. (需要: #include <Sound.au3>)
_SoundPlay ( $aSndID [, $iWait = 0] ) 播放声音文件. (需要: #include <Sound.au3>)
_SoundPos ( $aSndID [, $iMode = 1] ) 返回当前位置的声音. (需要: #include <Sound.au3>)
_SoundResume ( $aSndID ) 恢复暂停的声音. (需要: #include <Sound.au3>)
_SoundSeek ( ByRef $aSndID, $iHour, $iMin, $iSec ) 寻道指定位置的声音. (需要: #include <Sound.au3>)
_SoundStatus ( $aSndID ) 返回声音的状态. (需要: #include <Sound.au3>)
_SoundStop ( ByRef $aSndID ) 停止播放声音. (需要: #include <Sound.au3>)
_SQLite_Changes ( [$hDB = -1] ) 返回最近完成语句已更改的数据库行数. (需要: #include <SQLite.au3>)
_SQLite_Close ( [$hDB = -1] ) 关闭打开的数据库. (需要: #include <SQLite.au3>)
_SQLite_Display2DResult ( $aResult [, $iCellWidth = 0 [, $bReturn = False]] ) 返回或打印一个格式化的二维数组到控制台. (需要: #include <SQLite.au3>)
_SQLite_Encode ( $vData ) 编码 SQLite 语句 BLOB 使用的二进制字符串, 数字或二进制数据. (需要: #include <SQLite.au3>)
_SQLite_ErrCode ( [$hDB = -1] ) 返回最后一个错误代码 (数字) (需要: #include <SQLite.au3>)
_SQLite_ErrMsg ( [$hDB = -1] ) 返回最近调用 sqlite3_* API 描述错误条件的英文字符串 (需要: #include <SQLite.au3>)
_SQLite_Escape ( $sString [, $iBuffSize = Default] ) 转义 SQLite 语句作为文字使用的字符串或数字. (需要: #include <SQLite.au3>)
_SQLite_Exec ( $hDB, $sSQL [, $sCallBack = ""] ) 执行 SQLite 查询, 不处理结果. (需要: #include <SQLite.au3>)
_SQLite_FastEncode ( $vData ) 快速编码 SQLite 语句使用的二进制数据(专用). (需要: #include <SQLite.au3>)
_SQLite_FastEscape ( $sString ) 快速转义 SQLite 语句的文本字符串或数字 (需要: #include <SQLite.au3>)
_SQLite_FetchData ( $hQuery, ByRef $aRow [, $bBinary = False [, $bDoNotFinalize = False [, $iColumns = 0]]] ) 提取 _SQLite_Query() 查询的一行数据. (需要: #include <SQLite.au3>)
_SQLite_FetchNames ( $hQuery, ByRef $aNames ) 读出 _SQLite_Query() 查询的列名. (需要: #include <SQLite.au3>)
_SQLite_GetTable ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1] ) 传递包含执行查询的表名和数据的的一维数组. (需要: #include <SQLite.au3>)
_SQLite_GetTable2d ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $bSwichDimensions = False]] ) 传递包含执行查询的列名和数据的 2 维数组. (需要: #include <SQLite.au3>)
_SQLite_LastInsertRowID ( [$hDB = -1] ) 返回数据库中最新插入的 ROWID. (需要: #include <SQLite.au3>)
_SQLite_LibVersion (  ) 返回库的版本号. (需要: #include <SQLite.au3>)
_SQLite_Open ( [$sDatabase_Filename = ":memory:" [, $iAccessMode = Default [, $iEncoding = $SQLITE_ENCODING_UTF8]]] ) 打开或创建 SQLite 数据库. (需要: #include <SQLite.au3>)
_SQLite_Query ( $hDB, $sSQL, ByRef $hQuery ) 准备 SQLite 查询. (需要: #include <SQLite.au3>)
_SQLite_QueryFinalize ( $hQuery ) 基于 _SQLite_Query() 的查询. 查询中断. (需要: #include <SQLite.au3>)
_SQLite_QueryReset ( $hQuery ) 重置 _SQLite_Query() 查询. (需要: #include <SQLite.au3>)
_SQLite_QuerySingleRow ( $hDB, $sSQL, ByRef $aRow ) 读出指定查询结果的第一行. (需要: #include <SQLite.au3>)
_SQLite_SafeMode ( $bSafeModeState ) 禁用或启用安全模式. (需要: #include <SQLite.au3>)
_SQLite_SetTimeout ( [$hDB = -1 [, $iTimeout = 1000]] ) 为忙碌的处理程序设置超时. (需要: #include <SQLite.au3>)
_SQLite_Shutdown (  ) 卸载 SQLite.dll (需要: #include <SQLite.au3>)
_SQLite_SQLiteExe ( $sDatabaseFile, $sInput, ByRef $sOutput [, $sSQLiteExeFilename = "sqlite3.exe" [, $bDebug = False]] ) 在 SQLite3.exe 中执行命令. (需要: #include <SQLite.au3>)
_SQLite_Startup ( [$sDll_Filename = "" [, $bUTF8ErrorMsg = False [, $iForceLocal = 0 [, $hPrintCallback = $__g_hPrintCallback_SQLite]]]] ) 加载 SQLite3.dll (需要: #include <SQLite.au3>)
_SQLite_TotalChanges ( [$hDB = -1] ) 从连接开始返回所有更改数(包括通过触发器和外键) (需要: #include <SQLite.au3>)
_StringBetween ( $sString, $sStart, $sEnd [, $iMode = $STR_ENDISSTART [, $bCase = False]] ) 查找两组字符之间的字符串. (需要: #include <String.au3>)
_StringExplode ( $sString, $sDelimiter [, $iLimit = 0] ) 指定分隔符将字符串拆分为子字符串, 如同 PHP v5 分解. (需要: #include <String.au3>)
_StringInsert ( $sString, $sInsertString, $iPosition ) 插入字符串到另外一个字符串. (需要: #include <String.au3>)
_StringProper ( $sString ) 转换英文单词首字母为大写, 其余字母为小写.等同于 Excel 中的 Proper 函数 (需要: #include <String.au3>)
_StringRepeat ( $sString, $iRepeatCount ) 指定次数重复一个字符串. (需要: #include <String.au3>)
_StringTitleCase ( $sString ) 更改标题实例字符串. (需要: #include <String.au3>)
_StringToHex ( $sString ) 转换字符串为十六进制字符串. (需要: #include <String.au3>)
_TCPIpToName ( $sIp [, $iOption = 0 [, $hDll = "Ws2_32.dll"]] ) 解析 IP 地址到主机名 (需要: #include <Inet.au3>)
_TempFile ( [$sDirectoryName = @TempDir [, $sFilePrefix = "~" [, $sFileExtension = ".tmp" [, $iRandomLength = 7]]]] ) 为临时文件创建名称,且保证不存在同名文件. (需要: #include <File.au3>)
_TicksToTime ( $iTicks, ByRef $iHours, ByRef $iMins, ByRef $iSecs ) 转换指定刻度量(tick)到时, 分, 秒.(译注:计时器) (需要: #include <Date.au3>)
_Timer_Diff ( $iTimeStamp ) 返回先前调用 _Timer_Init 的时间差. (需要: #include <Timers.au3>)
_Timer_GetIdleTime (  ) 返回最后一次用户活动(即键盘/鼠标)的标记数(时间差) (需要: #include <Timers.au3>)
_Timer_GetTimerID ( $wParam ) 从 $iwParam 返回计时器 ID. (需要: #include <Timers.au3>)
_Timer_Init (  ) 返回时间戳 (以毫秒为单位). (需要: #include <Timers.au3>)
_Timer_KillAllTimers ( $hWnd ) 销毁所有的计时器. (需要: #include <Timers.au3>)
_Timer_KillTimer ( $hWnd, $iTimerID ) 销毁指定的定时器. (需要: #include <Timers.au3>)
_Timer_SetTimer ( $hWnd [, $iElapse = 250 [, $sTimerFunc = "" [, $iTimerID = -1]]] ) 创建具有指定超时值的计时器. (需要: #include <Timers.au3>)
_TimeToTicks ( [$iHours = @HOUR [, $iMins = @MIN [, $iSecs = @SEC]]] ) 转换指定的小时, 分钟, 秒到刻度量. (需要: #include <Date.au3>)
_VersionCompare ( $sVersion1, $sVersion2 ) 比较两个同等文件的版本. (需要: #include <Misc.au3>)
_viClose ( $hSession ) 关闭连接到装置/设备的 VISA. (需要: #include <Visa.au3>)
_viExecCommand ( $hSession, $sCommand [, $iTimeoutMS = -1 [, $sMode = @LF]] ) 通过 VISA 卡接口(GPIB/TCP)发送命令查询装置或设备. (需要: #include <Visa.au3>)
_viFindGpib ( ByRef $aDescriptorList, ByRef $aIDNList [, $iShow_Search_Results = 0] ) 通过 VISA 接口(GPIB/TCP)发送命令或查询到仪器或设备. (需要: #include <Visa.au3>)
_viGpibBusReset (  ) GPIB 总线"复位": 使用此函数获取 GPIB 总线某种原因的滞留. 调用这个函数可能会幸运地解决问题. (需要: #include <Visa.au3>)
_viGTL ( $hSession ) 转至本地模式: 仪器接受此命令将退出"远程控制模式", 进入"本地模式". 如果仪器已在"本地模式"则忽略. 通常情况下, 如果仪器不支持此命令, 则仅仅停留在"远程控制模式". (需要: #include <Visa.au3>)
_viInteractiveControl ( [$sCommand_Save_FilePath = ""] ) 互动 VISA 控制, 以测试 SCPI 命令. (需要: #include <Visa.au3>)
_viOpen ( $sVisa_Address [, $sVisa_Secondary_Address = 0] ) 打开仪器/设备的 VISA 连接 (需要: #include <Visa.au3>)
_viSetAttribute ( $hSession, $iAttribute, $iValue ) 设置供 _viSetTimeout 调用的任何 VISA 属性, 也可以设置其他 VISA 的特定属性. 欲了解更多信息,请阅读 VISA 文档及 VISA 属性及其相应值列表. (需要: #include <Visa.au3>)
_viSetTimeout ( $hSession, $iTimeoutMS ) 设置 VISA 超时时间的毫秒值. (需要: #include <Visa.au3>)
_WeekNumberISO ( [$iYear = @YEAR [, $iMonth = @MON [, $iDay = @MDAY]]] ) 计算给定日期的周数.(译注:年度的第几周) (需要: #include <Date.au3>)
_WinAPI_AbortPath ( $hDC ) 关闭和删除指定设备环境的任何路径. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ActivateKeyboardLayout ( $hLocale [, $iFlag = 0] ) 设置调用线程或当前进程的输入法区域设置标识符. (需要: #include <WinAPISys.au3>)
_WinAPI_AddClipboardFormatListener ( $hWnd ) 将特定窗口放到系统维护剪贴板格式侦听器列表. (需要: #include <WinAPISys.au3>)
_WinAPI_AddFontMemResourceEx ( $pData, $iSize ) 添加系统内存映像的字体资源. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AddFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] ) 添加指定文件的字体资源到系统字体表. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AddIconOverlay ( $hIcon, $hOverlay ) 通过合并源图标和覆盖掩码创建新图标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AddIconTransparency ( $hIcon [, $iPercent = 50 [, $bDelete = False]] ) 添加透明度到指定 32 位每像素图标. (需要: #include <WinAPIRes.au3>)
_WinAPI_AddMRUString ( $hMRU, $sStr ) 添加字符串到最近使用的(MRU)列表顶部. (需要: #include <WinAPIReg.au3>)
_WinAPI_AdjustBitmap ( $hBitmap, $iWidth, $iHeight [, $iMode = 3 [, $tAdjustment = 0]] ) 从源位图以新尺寸和颜色调整创建一个设备相关(DDB)的新位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AdjustTokenPrivileges ( $hToken, $aPrivileges, $iAttributes, ByRef $aAdjust ) 启用或禁用指定访问令牌的权限. (需要: #include <WinAPIProc.au3>)
_WinAPI_AdjustWindowRectEx ( ByRef $tRECT, $iStyle [, $iExStyle = 0 [, $bMenu = False]] ) 根据客户端矩形尺寸, 计算所需窗口的矩形大小. (需要: #include <WinAPISys.au3>)
_WinAPI_AlphaBlend ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $bAlpha = False] ) 显示位图的透明或半透明像素. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AngleArc ( $hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle ) 绘制线段与圆弧. (需要: #include <WinAPIGdi.au3>)
_WinAPI_AnimateWindow ( $hWnd, $iFlags [, $iDuration = 1000] ) 启用窗口显示或隐藏的特殊效果. (需要: #include <WinAPISys.au3>)
_WinAPI_Arc ( $hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc ) 绘制椭圆弧. (不更新当前位置). (需要: #include <WinAPIGdi.au3>)
_WinAPI_ArcTo ( $hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2 ) 绘制椭圆弧. (更新当前位置). (需要: #include <WinAPIGdi.au3>)
_WinAPI_ArrayToStruct ( Const ByRef $aData [, $iStart = 0 [, $iEnd = -1]] ) 转换字符串数组到结构. (需要: #include <WinAPIMisc.au3>)
_WinAPI_AssignProcessToJobObject ( $hJob, $hProcess ) 分配进程到现有作业对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_AssocGetPerceivedType ( $sExt ) 根据文件扩展名检索文件的识别类型. (需要: #include <WinAPIReg.au3>)
_WinAPI_AssocQueryString ( $sAssoc, $iType [, $iFlags = 0 [, $sExtra = '']] ) 从注册表搜索并获取文件或协议关联的字符串. (需要: #include <WinAPIReg.au3>)
_WinAPI_AttachConsole ( [$iPID = -1] ) 附加调用进程到控制台指定进程 (需要: #include <WinAPI.au3>)
_WinAPI_AttachThreadInput ( $iAttach, $iAttachTo, $bAttach ) 附加一个线程输入处理机制到另一个线程 (需要: #include <WinAPI.au3>)
_WinAPI_BackupRead ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] ) 备份包括其安全信息的文件或目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_BackupReadAbort ( ByRef $pContext ) 结束 _WinAPI_BackupRead() . (需要: #include <WinAPIFiles.au3>)
_WinAPI_BackupSeek ( $hFile, $iSeek, ByRef $iBytes, ByRef $pContext ) 请求发送 _WinAPI_BackupRead() 或_WinAPI_BackupWrite() 函数使用的最初访问的数据流. (需要: #include <WinAPIFiles.au3>)
_WinAPI_BackupWrite ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] ) 还原 _WinAPI_BackupRead() 函数备份的文件或目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_BackupWriteAbort ( ByRef $pContext ) 结束 _WinAPI_BackupWrite() 函数操作. (需要: #include <WinAPIFiles.au3>)
_WinAPI_Beep ( [$iFreq = 500 [, $iDuration = 1000]] ) 生成简单的扬声器单音. (需要: #include <WinAPI.au3>)
_WinAPI_BeginBufferedPaint ( $hDC, $tTarget, ByRef $hNewDC [, $iFormat = 0 [, $iFlags = 0 [, $tExclude = 0 [, $iAlpha = -1]]]] ) 开始一个缓冲区描述(paint)操作. (需要: #include <WinAPITheme.au3>)
_WinAPI_BeginDeferWindowPos ( [$iAmount = 1] ) 为多窗口位置结构分配内存. (需要: #include <WinAPISys.au3>)
_WinAPI_BeginPaint ( $hWnd, ByRef $tPAINTSTRUCT ) 准备绘制指定的窗口. (需要: #include <WinAPIGdi.au3>)
_WinAPI_BeginPath ( $hDC ) 打开指定设备环境的路径层次(bracket). (需要: #include <WinAPIGdi.au3>)
_WinAPI_BeginUpdateResource ( $sFilePath [, $bDelete = False] ) 获取用于添加, 删除或替换资源的二进制模块句柄. (需要: #include <WinAPIRes.au3>)
_WinAPI_BitBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $iROP ) 执行颜色数据位块传输. (需要: #include <WinAPI.au3>)
_WinAPI_BringWindowToTop ( $hWnd ) 将指定窗口置于 Z 序的顶层. (需要: #include <WinAPISys.au3>)
_WinAPI_BroadcastSystemMessage ( $iMsg [, $wParam = 0 [, $lParam = 0 [, $iFlags = 0 [, $iRecipients = 0]]]] ) 发送消息到指定的收件人(recipients). (需要: #include <WinAPISys.au3>)
_WinAPI_BrowseForFolderDlg ( [$sRoot = '' [, $sText = '' [, $iFlags = 0 [, $pBrowseProc = 0 [, $lParam = 0 [, $hParent = 0]]]]]] ) 显示选择处理程序(Shell)文件夹的对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_BufferedPaintClear ( $hBP [, $tRECT = 0] ) 清除缓冲区指定矩形为 ARGB = {0,0,0,0}. (需要: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintInit (  ) 初始化当前线程的缓冲区描述. (需要: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintSetAlpha ( $hBP [, $iAlpha = 255 [, $tRECT = 0]] ) 设置指定矩形的 alpha 值. (需要: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintUnInit (  ) 关闭当前线程缓冲绘制. (需要: #include <WinAPITheme.au3>)
_WinAPI_CallNextHookEx ( $hHook, $iCode, $wParam, $lParam ) 目前钩链的钩子信息传递到下一个钩子程序。 (需要: #include <WinAPI.au3>)
_WinAPI_CallWindowProc ( $pPrevWndFunc, $hWnd, $iMsg, $wParam, $lParam ) 目前钩链的钩子信息传递到下一个钩子程序. (需要: #include <WinAPI.au3>)
_WinAPI_CallWindowProcW ( $pPrevWndProc, $hWnd, $iMsg, $wParam, $lParam ) 传递消息信息到指定的窗口程序. (需要: #include <WinAPISys.au3>)
_WinAPI_CascadeWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] ) 级联父窗指定的子窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_ChangeWindowMessageFilterEx ( $hWnd, $iMsg, $iAction ) 修改指定窗口的用户界面特权隔离(UIPI)消息过滤器 (需要: #include <WinAPISys.au3>)
_WinAPI_CharToOem ( $sStr ) 转换字符串为 OEM 定义的字符集. (需要: #include <WinAPIMisc.au3>)
_WinAPI_ChildWindowFromPointEx ( $hWnd, $tPOINT [, $iFlags = 0] ) 确定子窗口(如果存在)是否属于有指定点的父窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_ClientToScreen ( $hWnd, ByRef $tPoint ) 转换客户端指定点的坐标到屏幕坐标. (需要: #include <WinAPI.au3>)
_WinAPI_ClipCursor ( $tRECT ) 限制光标在屏幕的一个矩形区域. (需要: #include <WinAPIRes.au3>)
_WinAPI_CloseDesktop ( $hDesktop ) 关闭一个打开的桌面对象句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_CloseEnhMetaFile ( $hDC ) 关闭增强型图元文件设备环境, 并返回标识增强型图元文件格式的句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CloseFigure ( $hDC ) 关闭路径中打开的图形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CloseHandle ( $hObject ) 关闭打开的对象句柄. (需要: #include <WinAPI.au3>)
_WinAPI_CloseThemeData ( $hTheme ) 关闭主题数据句柄. (需要: #include <WinAPITheme.au3>)
_WinAPI_CloseWindow ( $hWnd ) 最小化(但不破坏)指定的窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_CloseWindowStation ( $hStation ) 关闭打开的窗口站句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_CLSIDFromProgID ( $sProgID ) 指定 ProgID 在注册表中查找 CLSID. (需要: #include <WinAPICom.au3>)
_WinAPI_CoInitialize ( [$iFlags = 0] ) 初始化由调用进程使用的 COM 库. (需要: #include <WinAPICom.au3>)
_WinAPI_ColorAdjustLuma ( $iRGB, $iPercent [, $bScale = True] ) 改变 RGB 值的亮度. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ColorHLSToRGB ( $iHue, $iLuminance, $iSaturation ) 转换色调, 亮度, 饱和度(HLS)颜色为 RGB 格式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ColorRGBToHLS ( $iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation ) 转换 RGB 颜色到 HLS 格式的色调, 亮度, 饱和度. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CombineRgn ( $hRgnDest, $hRgnSrc1, $hRgnSrc2, $iCombineMode ) 结合两个区域, 并存储结果在第三区域. (需要: #include <WinAPI.au3>)
_WinAPI_CombineTransform ( $tXFORM1, $tXFORM2 ) 连接两个通用空间(world-space)到页面空间(page-space)的转换. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CommandLineToArgv ( $sCmd ) 解析命令行字符串, 并返回命令行参数的数组. (需要: #include <WinAPIShPath.au3>)
_WinAPI_CommDlgExtendedError (  ) 返回执行通用对话框函数时发生错误的字符串. (需要: #include <WinAPI.au3>)
_WinAPI_CommDlgExtendedErrorEx (  ) 返回一个通用对话框的错误代码. (需要: #include <WinAPIDlg.au3>)
_WinAPI_CompareString ( $iLCID, $sString1, $sString2 [, $iFlags = 0] ) 比较指定语言环境的两个字符串. (需要: #include <WinAPILocale.au3>)
_WinAPI_CompressBitmapBits ( $hBitmap, ByRef $pBuffer [, $iCompression = 0 [, $iQuality = 100]] ) 创建指定位图的数据压缩块. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormatAndEngine = 0x0002] ) 指定压缩格式和引擎类型压缩缓冲区. (需要: #include <WinAPISys.au3>)
_WinAPI_ComputeCrc32 ( $pMemory, $iLength ) 计算内存块的 CRC32 校验和. (需要: #include <WinAPISys.au3>)
_WinAPI_ConfirmCredentials ( $sTarget, $bConfirm ) 确认接收凭证的有效性. (需要: #include <WinAPIDlg.au3>)
_WinAPI_CopyBitmap ( $hBitmap ) 创建设备无关位图(DIB)指定区段的副本. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CopyCursor ( $hCursor ) 创建一个指定光标的副本. (需要: #include <WinAPIRes.au3>)
_WinAPI_CopyEnhMetaFile ( $hEmf [, $sFilePath = ''] ) 复制增强型图元文件格式到指定的文件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CopyFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] ) 复制现有文件到一个新文件, 将应用及其进度通知回调函数. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CopyIcon ( $hIcon ) 复制另一个模块指定的图标. (需要: #include <WinAPI.au3>)
_WinAPI_CopyImage ( $hImage [, $iType = 0 [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) 创建新图像(图标, 光标或位图), 并复制指定图像的属性 (需要: #include <WinAPIGdi.au3>)
_WinAPI_CopyRect ( $tRECT ) 复制一个矩形坐标到另外一个矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CopyStruct ( $tStruct [, $sStruct = ''] ) 创建指定结构的副本. (需要: #include <WinAPIMisc.au3>)
_WinAPI_CoTaskMemAlloc ( $iSize ) 分配任务内存块. (需要: #include <WinAPICom.au3>)
_WinAPI_CoTaskMemFree ( $pMemory ) 释放任务内存块. (需要: #include <WinAPICom.au3>)
_WinAPI_CoTaskMemRealloc ( $pMemory, $iSize ) 修改先前分配的任务内存块大小. (需要: #include <WinAPICom.au3>)
_WinAPI_CoUninitialize (  ) 关闭当前进程的 COM 库. (需要: #include <WinAPICom.au3>)
_WinAPI_Create32BitHBITMAP ( $hIcon [, $bDib = False [, $bDelete = False]] ) 创建指定图标的 32 位每像素位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_Create32BitHICON ( $hIcon [, $bDelete = False] ) 转换图标到 32 位每像素格式, 并拷贝到新的图标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateANDBitmap ( $hBitmap ) 创建指定位图的 AND 位掩码设备无关位图 (DIB). (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateBitmap ( $iWidth, $iHeight [, $iPlanes = 1 [, $iBitsPerPel = 1 [, $pBits = 0]]] ) 创建指定宽度，高度和颜色格式的位图. (需要: #include <WinAPI.au3>)
_WinAPI_CreateBitmapIndirect ( $tBITMAP ) 创建具有指定的宽度, 高度和颜色格式(颜色的每像素位)的位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateBrushIndirect ( $iStyle, $iRGB [, $iHatch = 0] ) 创建指定样式, 颜色和图案的逻辑刷(brush). (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateBuffer ( $iLength [, $pBuffer = 0 [, $bAbort = True]] ) 从内部程序库堆分配内存块. (需要: #include <WinAPISys.au3>)
_WinAPI_CreateBufferFromStruct ( $tStruct [, $pBuffer = 0 [, $bAbort = True]] ) 从内部库堆分配一个内存块, 并初始化数据结构. (需要: #include <WinAPISys.au3>)
_WinAPI_CreateCaret ( $hWnd, $hBitmap [, $iWidth = 0 [, $iHeight = 0]] ) 创建系统插入符的形状, 并分配给指定窗口. (需要: #include <WinAPIRes.au3>)
_WinAPI_CreateColorAdjustment ( [$iFlags = 0 [, $iIlluminant = 0 [, $iGammaR = 10000 [, $iGammaG = 10000 [, $iGammaB = 10000 [, $iBlack = 0 [, $iWhite = 10000 [, $iContrast = 0 [, $iBrightness = 0 [, $iColorfulness = 0 [, $iTint = 0]]]]]]]]]]] ) 创建指定色彩调整的 $tagCOLORADJUSTMENT 结构. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateCompatibleBitmap ( $hDC, $iWidth, $iHeight ) 创建与指定设备环境兼容的位图. (需要: #include <WinAPI.au3>)
_WinAPI_CreateCompatibleBitmapEx ( $hDC, $iWidth, $iHeight, $iRGB ) 创建与设备兼容的位图, 并填充指定的颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateCompatibleDC ( $hDC ) 创建与指定设备兼容的内存设备环境. (需要: #include <WinAPI.au3>)
_WinAPI_CreateDesktop ( $sName [, $iAccess = 0x0002 [, $iFlags = 0 [, $iHeap = 0 [, $tSecurity = 0]]]] ) 创建一个新的桌面, 关联到当前窗口站的调用进程. (需要: #include <WinAPISys.au3>)
_WinAPI_CreateDIB ( $iWidth, $iHeight [, $iBitsPerPel = 32 [, $tColorTable = 0 [, $iColorCount = 0]]] ) 创建指定宽度, 高度和颜色深度, 未压缩的设备无关位图(DIB). (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBColorTable ( Const ByRef $aColorTable [, $iStart = 0 [, $iEnd = -1]] ) 从指定颜色数组创建 RGB 颜色表. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBitmap ( $hDC, $tBITMAPINFO, $iUsage [, $pBits = 0] ) 从一个可选 DIB 创建一个兼容位图(DDB), 并设置位图位. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBSection ( $hDC, $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection = 0 [, $iOffset = 0]] ) 创建应用程序可以直接写入的 DIB(设备无关位图文件). (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateDirectory ( $sDir [, $tSecurity = 0] ) 创建一个新目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateDirectoryEx ( $sNewDir, $sTemplateDir [, $tSecurity = 0] ) 创建指定模板目录的新目录和属性. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateEllipticRgn ( $tRECT ) 创建椭圆区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateEmptyIcon ( $iWidth, $iHeight [, $iBitsPerPel = 32] ) 创建指定宽度, 高度, 和颜色深度的全透明图标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateEnhMetaFile ( [$hDC = 0 [, $tRECT = 0 [, $bPixels = False [, $sFilePath = '' [, $sDescription = '']]]]] ) 创建增强型图元文件格式的设备环境. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateEvent ( [$tAttributes = 0 [, $bManualReset = True [, $bInitialState = True [, $sName = ""]]]] ) 创建或打开一个有名或无名的事件对象 (需要: #include <WinAPI.au3>)
_WinAPI_CreateFile ( $sFileName, $iCreation [, $iAccess = 4 [, $iShare = 0 [, $iAttributes = 0 [, $tSecurity = 0]]]] ) 创建或打开文件或其它设备. (需要: #include <WinAPI.au3>)
_WinAPI_CreateFileEx ( $sFilePath, $iCreation [, $iAccess = 0 [, $iShare = 0 [, $iFlagsAndAttributes = 0 [, $tSecurity = 0 [, $hTemplate = 0]]]]] ) 创建或打开文件或 I/O 设备. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateFileMapping ( $hFile [, $iSize = 0 [, $sName = '' [, $iProtect = 0x0004 [, $tSecurity = 0]]]] ) 创建或打开一个有名或无名的文件映射对象指定的文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateFont ( $iHeight, $iWidth [, $iEscape = 0 [, $iOrientn = 0 [, $iWeight = $FW_NORMAL [, $bItalic = False [, $bUnderline = False [, $bStrikeout = False [, $iCharset = $DEFAULT_CHARSET [, $iOutputPrec = $OUT_DEFAULT_PRECIS [, $iClipPrec = $CLIP_DEFAULT_PRECIS [, $iQuality = $DEFAULT_QUALITY [, $iPitch = 0 [, $sFace = 'Arial']]]]]]]]]]]] ) 创建指定特性的逻辑字体. (需要: #include <WinAPI.au3>)
_WinAPI_CreateFontEx ( $iHeight [, $iWidth = 0 [, $iEscapement = 0 [, $iOrientation = 0 [, $iWeight = 400 [, $bItalic = False [, $bUnderline = False [, $bStrikeOut = False [, $iCharSet = 1 [, $iOutPrecision = 0 [, $iClipPrecision = 0 [, $iQuality = 0 [, $iPitchAndFamily = 0 [, $sFaceName = '' [, $iStyle = 0]]]]]]]]]]]]]] ) 创建具有指定特性的逻辑字体. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateFontIndirect ( $tLogFont ) 创建具有特定特征的逻辑字体. (需要: #include <WinAPI.au3>)
_WinAPI_CreateGUID (  ) 创建全局唯一标识符 (GUID). (需要: #include <WinAPICom.au3>)
_WinAPI_CreateHardLink ( $sNewFile, $sExistingFile ) 建立一个现有文件和一个新文件之间的硬链接. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateIcon ( $hInstance, $iWidth, $iHeight, $iPlanes, $iBitsPixel, $pANDBits, $pXORBits ) 创建指定大小, 颜色, 位模式的图标. (需要: #include <WinAPIRes.au3>)
_WinAPI_CreateIconFromResourceEx ( $pData, $iSize [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) 创建图标资源位描述的图标或光标. (需要: #include <WinAPIRes.au3>)
_WinAPI_CreateIconIndirect ( $hBitmap, $hMask [, $iXHotspot = 0 [, $iYHotspot = 0 [, $bIcon = True]]] ) 创建指定大小, 颜色和位模式的图标或光标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateJobObject ( [$sName = '' [, $tSecurity = 0]] ) 创建或打开作业对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_CreateMargins ( $iLeftWidth, $iRightWidth, $iTopHeight, $iBottomHeight ) 创建指定左, 右, 顶部, 底部保留边框的 $tagMARGINS 结构. (需要: #include <WinAPIMisc.au3>)
_WinAPI_CreateMRUList ( $hKey, $sSubKey [, $iMax = 26] ) 创建一个新的最近使用(MRU)列表. (需要: #include <WinAPIReg.au3>)
_WinAPI_CreateMutex ( $sMutex [, $bInitial = True [, $tSecurity = 0]] ) 创建或打开一个有名或无名的互斥(mutex)对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_CreateNullRgn (  ) 创建一个空的区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateNumberFormatInfo ( $iNumDigits, $iLeadingZero, $iGrouping, $sDecimalSep, $sThousandSep, $iNegativeOrder ) 创建一个指定数字格式信息的 $tagNUMBERFMT 结构. (需要: #include <WinAPILocale.au3>)
_WinAPI_CreateObjectID ( $sFilePath ) 创建或检索指定文件或目录的对象标识符. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreatePen ( $iPenStyle, $iWidth, $iColor ) 创建指定样式,宽度和颜色的逻辑笔. (需要: #include <WinAPI.au3>)
_WinAPI_CreatePoint ( $iX, $iY ) 创建指定 x 和 y 坐标点的 $tagPOINT 结构. (需要: #include <WinAPIMisc.au3>)
_WinAPI_CreatePolygonRgn ( Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1 [, $iMode = 1]]] ) 创建一个多边形区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateProcess ( $sAppName, $sCommand, $tSecurity, $tThread, $bInherit, $iFlags, $pEnviron, $sDir, $tStartupInfo, $tProcess ) 创建新的进程及其主线程. (需要: #include <WinAPI.au3>)
_WinAPI_CreateProcessWithToken ( $sApp, $sCmd, $iFlags, $tStartupInfo, $tProcessInfo, $hToken [, $iLogon = 0 [, $pEnvironment = 0 [, $sDir = '']]] ) 在安全范围内使用指定令牌创建一个新的进程及其主线程. (需要: #include <WinAPIProc.au3>)
_WinAPI_CreateRect ( $iLeft, $iTop, $iRight, $iBottom ) 创建指定矩形坐标的 $tagRECT 结构.(使用矩形 4 角坐标) (需要: #include <WinAPIMisc.au3>)
_WinAPI_CreateRectEx ( $iX, $iY, $iWidth, $iHeight ) 创建指定矩形坐标的 $tagRECT 结构.(使用矩形左上角坐标和宽,高值) (需要: #include <WinAPIMisc.au3>)
_WinAPI_CreateRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect ) 创建一个矩形区域. (需要: #include <WinAPI.au3>)
_WinAPI_CreateRectRgnIndirect ( $tRECT ) 创建一个矩形区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateRoundRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect, $iWidthEllipse, $iHeightEllipse ) 创建圆角矩形. (需要: #include <WinAPI.au3>)
_WinAPI_CreateSemaphore ( $sSemaphore, $iInitial, $iMaximum [, $tSecurity = 0] ) 创建或打开一个有名或无名的信号量(semaphore)对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_CreateSize ( $iWidth, $iHeight ) 创建指定矩形宽度和高度的 $tagSIZE 结构. (需要: #include <WinAPIMisc.au3>)
_WinAPI_CreateSolidBitmap ( $hWnd, $iColor, $iWidth, $iHeight [, $bRGB = 1] ) 创建单色位图. (需要: #include <WinAPI.au3>)
_WinAPI_CreateSolidBrush ( $iColor ) 创建指定纯色的逻辑画刷. (需要: #include <WinAPI.au3>)
_WinAPI_CreateStreamOnHGlobal ( [$hGlobal = 0 [, $bDeleteOnRelease = True]] ) 创建一个流对象, 使用内存句柄储存流内容. (需要: #include <WinAPICom.au3>)
_WinAPI_CreateString ( $sString [, $pString = 0 [, $iLength = -1 [, $bUnicode = True [, $bAbort = True]]]] ) 复制指定字符串到内存, 并返回其指针. (需要: #include <WinAPISys.au3>)
_WinAPI_CreateSymbolicLink ( $sSymlink, $sTarget [, $bDirectory = False] ) 创建一个符号链接. (需要: #include <WinAPIFiles.au3>)
_WinAPI_CreateTransform ( [$nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] ) 创建 $tagXFORM 结构, 指定一个通用空间到页面空间的变换. (需要: #include <WinAPIGdi.au3>)
_WinAPI_CreateWindowEx ( $iExStyle, $sClass, $sName, $iStyle, $iX, $iY, $iWidth, $iHeight, $hParent [, $hMenu = 0 [, $hInstance = 0 [, $pParam = 0]]] ) 创建重叠, 弹出, 或子窗口. (需要: #include <WinAPI.au3>)
_WinAPI_CreateWindowStation ( [$sName = '' [, $iAccess = 0 [, $iFlags = 0 [, $tSecurity = 0]]]] ) 创建一个窗口站对象, 关联调用进程, 并分配到当前会话期. (需要: #include <WinAPISys.au3>)
_WinAPI_DecompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormat = 0x0002] ) 解压缩整个压缩缓冲区. (需要: #include <WinAPISys.au3>)
_WinAPI_DecryptFile ( $sFilePath ) 解密已加密的文件或目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DeferWindowPos ( $hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags ) 更新多窗口位置结构指定的窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_DefineDosDevice ( $sDevice, $iFlags [, $sFilePath = ''] ) 定义, 重新定义, 或删除 MS-DOS 设备名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DefRawInputProc ( $paRawInput, $iInput ) 调用应用程序不处理的默认原始输入程序处理原始输入信息. (需要: #include <WinAPISys.au3>)
_WinAPI_DefSubclassProc ( $hWnd, $iMsg, $wParam, $lParam ) 调用窗口子类链的下一个处理程序. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_DefWindowProc ( $hWnd, $iMsg, $wParam, $lParam ) 调用默认窗口程序, 以提供默认处理. (需要: #include <WinAPI.au3>)
_WinAPI_DefWindowProcW ( $hWnd, $iMsg, $wParam, $lParam ) 调用默认窗口程序提供的任何窗口消息的默认处理. (需要: #include <WinAPISys.au3>)
_WinAPI_DeleteDC ( $hDC ) 删除指定的设备环境. (需要: #include <WinAPI.au3>)
_WinAPI_DeleteEnhMetaFile ( $hEmf ) 删除增强型图元文件格式, 或格式句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DeleteFile ( $sFilePath ) 删除现有文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DeleteObject ( $hObject ) 删除逻辑笔, 画刷, 字体, 位图, 区域或调色板. (需要: #include <WinAPI.au3>)
_WinAPI_DeleteObjectID ( $sFilePath ) 从指定的文件或目录中删除对象标识符. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DeleteVolumeMountPoint ( $sMountedPath ) 删除驱动器盘符或安装文件夹. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DeregisterShellHookWindow ( $hWnd ) 注销接收命令解释程序(shell)钩子消息的窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_DestroyCaret (  ) 销毁插入符号当前的形状, 释放窗口插入符号, 并删除屏幕的插入符号. (需要: #include <WinAPIRes.au3>)
_WinAPI_DestroyCursor ( $hCursor ) 销毁光标并释放任何内存占用的光标. (需要: #include <WinAPIRes.au3>)
_WinAPI_DestroyIcon ( $hIcon ) 销毁图标并释放图标占用的内存. (需要: #include <WinAPI.au3>)
_WinAPI_DestroyWindow ( $hWnd ) 销毁指定的窗口. (需要: #include <WinAPI.au3>)
_WinAPI_DeviceIoControl ( $hDevice, $iControlCode [, $pInBuffer = 0 [, $iInBufferSize = 0 [, $pOutBuffer = 0 [, $iOutBufferSize = 0]]]] ) 发送控制代码到指定的设备驱动程序. (需要: #include <WinAPIFiles.au3>)
_WinAPI_DisplayStruct ( $tStruct [, $sStruct = '' [, $sTitle = '' [, $iItem = 0 [, $iSubItem = 0 [, $iFlags = 0 [, $bTop = True [, $hParent = 0]]]]]]] ) 显示指定结构或内存地址列表的数据. (需要: #include <WinAPIDiag.au3>)
_WinAPI_DllGetVersion ( $sFilePath ) 检索特定 DLL 版本信息. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_DllInstall ( $sFilePath ) 注册 OLE 控件(例如 DLL) 或 ActiveX 控件(OCX)文件. (需要: #include <WinAPIReg.au3>)
_WinAPI_DllUninstall ( $sFilePath ) 注销 OLE 控件(例如 DLL) 或 ActiveX 控件(OCX)文件. (需要: #include <WinAPIReg.au3>)
_WinAPI_DPtoLP ( $hDC, ByRef $tPOINT [, $iCount = 1] ) 设备坐标转换成逻辑单位坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DragAcceptFiles ( $hWnd [, $bAccept = True] ) 确定窗口是否接受拖放文件. (需要: #include <WinAPISys.au3>)
_WinAPI_DragFinish ( $hDrop ) 释放系统应用程序传输文件名称使用的内存. (需要: #include <WinAPISys.au3>)
_WinAPI_DragQueryFileEx ( $hDrop [, $iFlag = 0] ) 检索拖放操作成功后的文件名称. (需要: #include <WinAPISys.au3>)
_WinAPI_DragQueryPoint ( $hDrop ) 检索拖放操作时的鼠标指针位置. (需要: #include <WinAPISys.au3>)
_WinAPI_DrawAnimatedRects ( $hWnd, $tRectFrom, $tRectTo ) 动画窗口的标题, 显示打开图标或窗口的最小化或最大化. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DrawBitmap ( $hDC, $iX, $iY, $hBitmap [, $iRop = 0x00CC0020] ) 绘制位图到指定的设备环境. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DrawEdge ( $hDC, $tRECT, $iEdgeType, $iFlags ) 绘制一或多个矩形的边缘. (需要: #include <WinAPI.au3>)
_WinAPI_DrawFocusRect ( $hDC, $tRECT ) 绘制一个矩形, 用来表示矩形具有焦点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DrawFrameControl ( $hDC, $tRECT, $iType, $iState ) 绘制指定类型和样式的框架控件. (需要: #include <WinAPI.au3>)
_WinAPI_DrawIcon ( $hDC, $iX, $iY, $hIcon ) 绘制图标或光标到指定的设备环境. (需要: #include <WinAPI.au3>)
_WinAPI_DrawIconEx ( $hDC, $iX, $iY, $hIcon [, $iWidth = 0 [, $iHeight = 0 [, $iStep = 0 [, $hBrush = 0 [, $iFlags = 3]]]]] ) 绘制图标或光标到指定的设备环境(扩展). (需要: #include <WinAPI.au3>)
_WinAPI_DrawLine ( $hDC, $iX1, $iY1, $iX2, $iY2 ) 绘制一条线 (需要: #include <WinAPI.au3>)
_WinAPI_DrawShadowText ( $hDC, $sText, $iRGBText, $iRGBShadow [, $iXOffset = 0 [, $iYOffset = 0 [, $tRECT = 0 [, $iFlags = 0]]]] ) 绘制指定矩形阴影格式化的文本. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DrawText ( $hDC, $sText, ByRef $tRECT, $iFlags ) 在指定矩形绘制格式化的文本. (需要: #include <WinAPI.au3>)
_WinAPI_DrawThemeBackground ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT [, $tCLIP = 0] ) 绘制指定控件的边界, 并依据视觉样式的定义填充. (需要: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeEdge ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $iEdge, $iFlags [, $tAREA = 0] ) 依据视觉样式定义绘制矩形的一个或多个边界. (需要: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeIcon ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $hIL, $iIndex ) 从图像列表和视觉样式定义的图标效果绘制图像. (需要: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeParentBackground ( $hWnd, $hDC [, $tRECT = 0] ) 绘制父控件部分, 即部分透明或 alpha 混合子控件. (需要: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeText ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags ) 绘制视觉样式定义颜色和字体的文本. (需要: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeTextEx ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags, $tDTTOPTS ) 绘制由视觉样式定义颜色和字体的文本.(扩展). (需要: #include <WinAPITheme.au3>)
_WinAPI_DuplicateEncryptionInfoFile ( $sSrcFilePath, $sDestFilePath [, $iCreation = 2 [, $iAttributes = 0 [, $tSecurity = 0]]] ) 复制一个文件或目录的 EFS 元数据到另一个文件或目录. <span class="STYLE1">(译注: 网络解释, EFS = Encrypting File System, 加密文件系统)</span> (需要: #include <WinAPIFiles.au3>)
_WinAPI_DuplicateHandle ( $hSourceProcessHandle, $hSourceHandle, $hTargetProcessHandle, $iDesiredAccess, $iInheritHandle, $iOptions ) 复制对象的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_DuplicateTokenEx ( $hToken, $iAccess, $iLevel [, $iType = 1 [, $tSecurity = 0]] ) 创建一个新的基本或模拟的访问令牌重复现有令牌. (需要: #include <WinAPIProc.au3>)
_WinAPI_DwmDefWindowProc ( $hWnd, $iMsg, $wParam, $lParam ) 在桌面窗口管理器 (DWM) 非客户区测试点击默认窗口程序. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmEnableBlurBehindWindow ( $hWnd [, $bEnable = True [, $bTransition = False [, $hRgn = 0]]] ) 启用指定窗口的模糊效果. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmEnableComposition ( $bEnable ) 启用或禁用桌面窗口管理器(WM)组成. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmExtendFrameIntoClientArea ( $hWnd [, $tMARGINS = 0] ) 扩展客户区背后的窗口框架. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetColorizationColor (  ) 检索当前桌面窗口管理器(DWM)玻璃组成的颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetColorizationParameters (  ) 检索用于桌面窗口管理器(DWM)的着色参数 (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetWindowAttribute ( $hWnd, $iAttribute ) 检索指定窗口应用属性的当前值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmInvalidateIconicBitmaps ( $hWnd ) 刷新窗口先前提供的所有标志性位图, 缩略图和 PEEK 陈述. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmIsCompositionEnabled (  ) 确定是否启用桌面窗口管理器(DWM)组成. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmQueryThumbnailSourceSize ( $hThumbnail ) 返回桌面窗口管理器(DWM)源缩略图的大小. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmRegisterThumbnail ( $hDestination, $hSource ) 创建目标和源窗口之间的桌面窗口管理器(DWM)缩略图的关系. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetColorizationParameters ( $tDWMCP ) 设置桌面窗口管理器 (DWM) 的着色参数 (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetIconicLivePreviewBitmap ( $hWnd, $hBitmap [, $bFrame = False [, $tClient = 0]] ) 设置一个静态的, 标志性的位图用于显示窗口或标签(又称 PEEK 预览). (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetIconicThumbnail ( $hWnd, $hBitmap [, $bFrame = False] ) 设置使用一个静态的, 标志性的点阵图作为一个窗口或标签的缩略图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetWindowAttribute ( $hWnd, $iAttribute, $iData ) 设置适用于窗口非客户端的属性值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmUnregisterThumbnail ( $hThumbnail ) 移除桌面窗口管理器(DWM)缩略图关系. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DwmUpdateThumbnailProperties ( $hThumbnail [, $bVisible = True [, $bClientAreaOnly = False [, $iOpacity = 255 [, $tRectDest = 0 [, $tRectSrc = 0]]]]] ) 指定桌面窗口管理器(DWM)缩略图属性. (需要: #include <WinAPIGdi.au3>)
_WinAPI_DWordToFloat ( $iValue ) 转换 DWORD 类型值为浮点(FLOAT)类型值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_DWordToInt ( $iValue ) 转换 DWORD 类型值为 INT 类型的值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_EjectMedia ( $sDrive ) 从设备中弹出媒体. (需要: #include <WinAPIFiles.au3>)
_WinAPI_Ellipse ( $hDC, $tRECT ) 绘制椭圆. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EmptyWorkingSet ( [$iPID = 0] ) 删除指定进程工作集尽可能多的页面. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnableWindow ( $hWnd [, $bEnable = True] ) 启用或禁用鼠标和键盘输入到指定的窗口或控件. (需要: #include <WinAPI.au3>)
_WinAPI_EncryptFile ( $sFilePath ) 加密一个文件或目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_EncryptionDisable ( $sDir, $bDisable ) 禁用或启用指定目录和文件的加密. (需要: #include <WinAPIFiles.au3>)
_WinAPI_EndBufferedPaint ( $hBP [, $bUpdate = True] ) 完成一个缓冲的绘制操作, 并释放相关的缓冲绘制句柄. (需要: #include <WinAPITheme.au3>)
_WinAPI_EndDeferWindowPos ( $hInfo ) 屏幕刷新周期内同时更新一或多个窗口的位置和大小. (需要: #include <WinAPISys.au3>)
_WinAPI_EndPaint ( $hWnd, ByRef $tPAINTSTRUCT ) 标记指定窗口的绘图终点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EndPath ( $hDC ) 关闭路径括号, 并选择由括号中定义的路径到指定的设备环境. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EndUpdateResource ( $hUpdate [, $bDiscard = False] ) 更新或删除资源模块内的修改. (需要: #include <WinAPIRes.au3>)
_WinAPI_EnumChildProcess ( [$iPID = 0] ) 枚举指定进程的子进程. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumChildWindows ( $hWnd [, $bVisible = True] ) 枚举指定父窗的子窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumDesktops ( $hStation ) 枚举调用进程指定窗口站关联的所有桌面. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumDesktopWindows ( $hDesktop [, $bVisible = True] ) 枚举指定桌面关联的所有顶层窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumDeviceDrivers (  ) 检索系统设备驱动程序的加载地址. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumDisplayDevices ( $sDevice, $iDevNum ) 获取系统显示设备的信息. (需要: #include <WinAPI.au3>)
_WinAPI_EnumDisplayMonitors ( [$hDC = 0 [, $tRECT = 0]] ) 枚举显示监视器(包括镜像驱动的无形伪显示器). (需要: #include <WinAPIGdi.au3>)
_WinAPI_EnumDisplaySettings ( $sDevice, $iMode ) 检索显示设备图形模式信息. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EnumDllProc ( $sFilePath [, $sMask = '' [, $iFlags = 0]] ) 枚举指定动态链接库 (DLL) 的函数. (需要: #include <WinAPIDiag.au3>)
_WinAPI_EnumFiles ( $sDir [, $iFlag = 0 [, $sTemplate = '' [, $bExclude = False]]] ) 枚举与指定模板匹配的目录文件和子目录名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_EnumFileStreams ( $sFilePath ) 枚举指定文件或目录的 a ::$DATA 流类型的所有流. (需要: #include <WinAPIFiles.au3>)
_WinAPI_EnumFontFamilies ( [$hDC = 0 [, $sFaceName = '' [, $iCharSet = 1 [, $iFontType = 0x07 [, $sPattern = '' [, $bExclude = False]]]]]] ) 枚举系统中匹配指定字体特征的所有唯一命名的字体. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EnumHardLinks ( $sFilePath ) 枚举所有硬链接的指定文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_EnumMRUList ( $hMRU, $iItem ) 枚举最近使用(MRU)列表的内容. (需要: #include <WinAPIReg.au3>)
_WinAPI_EnumPageFiles (  ) 检索系统安装的每个页面文件的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumProcessHandles ( [$iPID = 0 [, $iType = 0]] ) 列举指定进程的句柄. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessModules ( [$iPID = 0 [, $iFlag = 0]] ) 检索指定进程中每个模块的句柄和名称. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessThreads ( [$iPID = 0] ) 枚举指定进程的线程. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessWindows ( [$iPID = 0 [, $bVisible = True]] ) 枚举指定进程的窗口. (需要: #include <WinAPIProc.au3>)
_WinAPI_EnumRawInputDevices (  ) 枚举连接到系统的原始输入设备. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumResourceLanguages ( $hModule, $sType, $sName ) 枚举特定语言资源, 类型与名称, 以及相关的二进制模块. (需要: #include <WinAPIRes.au3>)
_WinAPI_EnumResourceNames ( $hModule, $sType ) 枚举二进制模块指定类型的资源. (需要: #include <WinAPIRes.au3>)
_WinAPI_EnumResourceTypes ( $hModule ) 枚举二进制模块的资源类型. (需要: #include <WinAPIRes.au3>)
_WinAPI_EnumSystemGeoID (  ) 枚举操作系统地理位置标识符 (GEOID). (需要: #include <WinAPILocale.au3>)
_WinAPI_EnumSystemLocales ( $iFlag ) 枚举操作系统安装或支持的语言环境. (需要: #include <WinAPILocale.au3>)
_WinAPI_EnumUILanguages ( [$iFlag = 0] ) 枚举操作系统的用户界面语言. (需要: #include <WinAPILocale.au3>)
_WinAPI_EnumWindows ( [$bVisible = True [, $hWnd = Default]] ) 枚举所有窗口. (需要: #include <WinAPI.au3>)
_WinAPI_EnumWindowsPopup (  ) 枚举弹出窗口. (需要: #include <WinAPI.au3>)
_WinAPI_EnumWindowStations (  ) 枚举当前会话的所有窗口站. (需要: #include <WinAPISys.au3>)
_WinAPI_EnumWindowsTop (  ) 枚举所有顶层窗口. (需要: #include <WinAPI.au3>)
_WinAPI_EqualMemory ( $pSource1, $pSource2, $iLength ) 比较两个内存块, 确定是否指定的字节数是相同的. (需要: #include <WinAPISys.au3>)
_WinAPI_EqualRect ( $tRECT1, $tRECT2 ) 确定两个指定矩形是否相等. (需要: #include <WinAPIGdi.au3>)
_WinAPI_EqualRgn ( $hRgn1, $hRgn2 ) 检查两个指定区域是否相同. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ExcludeClipRect ( $hDC, $tRECT ) 创建现有裁剪区域减去指定矩形的新裁剪区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ExpandEnvironmentStrings ( $sString ) 展开环境变量字符串, 并返回其定义值. (需要: #include <WinAPI.au3>)
_WinAPI_ExtCreatePen ( $iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch = 0 [, $aUserStyle = 0 [, $iStart = 0 [, $iEnd = -1]]]] ) 创建指定样式, 宽度, 和刷(brush)属性的逻辑装饰或几何笔(pen). (需要: #include <WinAPIGdi.au3>)
_WinAPI_ExtCreateRegion ( $tRGNDATA [, $tXFORM = 0] ) 从指定的区域变换数据创建一个区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ExtFloodFill ( $hDC, $iX, $iY, $iRGB [, $iType = 0] ) 使用当前画刷(brush)填充一个显示面. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ExtractIcon ( $sIcon, $iIndex [, $bSmall = False] ) 提取可执行文件, DLL, 或图标文件中的图标. (需要: #include <WinAPIRes.au3>)
_WinAPI_ExtractIconEx ( $sFilePath, $iIndex, $paLarge, $paSmall, $iIcons ) 创建文件中提取的大或小图标的句柄数组 (需要: #include <WinAPI.au3>)
_WinAPI_ExtSelectClipRgn ( $hDC, $hRgn [, $iMode = 5] ) 组合指定区域与当前剪贴区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_FatalAppExit ( $sMessage ) 显示消息框, 并终止应用程序. (需要: #include <WinAPI.au3>)
_WinAPI_FatalExit ( $iCode ) 执行传送控制到调试器. (需要: #include <WinAPIDiag.au3>)
_WinAPI_FileEncryptionStatus ( $sFilePath ) 检索指定文件的加密状态. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FileExists ( $sFilePath ) 测试指定路径是否为现有文件的路径. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FileIconInit ( [$bRestore = True] ) 初始化或重新初始化系统图像列表. (需要: #include <WinAPIRes.au3>)
_WinAPI_FileInUse ( $sFilePath ) 测试指定文件是否被另一个应用程序使用. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FillMemory ( $pMemory, $iLength [, $iValue = 0] ) 使用指定值填充内存块. (需要: #include <WinAPISys.au3>)
_WinAPI_FillPath ( $hDC ) 关闭使用当前画刷(brush)时, 在当前路径和填充路径内部打开的任何图形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_FillRect ( $hDC, $tRECT, $hBrush ) 使用指定的笔刷填充矩形. (需要: #include <WinAPI.au3>)
_WinAPI_FillRgn ( $hDC, $hRgn, $hBrush ) 使用指定画刷(brush)填充区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_FindClose ( $hSearch ) 关闭文件搜索句柄. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindCloseChangeNotification ( $hChange ) 停止变更通知句柄监测. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindExecutable ( $sFileName [, $sDirectory = ""] ) 检索与指定文件名相关联的可执行文件的名称. (需要: #include <WinAPI.au3>)
_WinAPI_FindFirstChangeNotification ( $sDirectory, $iFlags [, $bSubtree = False] ) 创建一个更改通知句柄, 并设置初始更改通知过滤条件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstFile ( $sFilePath, $tData ) 搜索匹配特定名称的文件或子目录的名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstFileName ( $sFilePath, ByRef $sLink ) 创建所有硬链接指定文件的枚举. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstStream ( $sFilePath, $tData ) 枚举指定文件或目录 a ::$DATA 类型的第一个流. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindNextChangeNotification ( $hChange ) 请求操作系统更改通知信号句柄, 以便检测下一次适当的变化. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindNextFile ( $hSearch, $tData ) 继续搜索文件或目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindNextFileName ( $hSearch, ByRef $sLink ) 继续枚举的硬链接. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindNextStream ( $hSearch, $tData ) 继续流搜索. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FindResource ( $hInstance, $sType, $sName ) 确定指定类型和名称的模块资源位置. (需要: #include <WinAPIRes.au3>)
_WinAPI_FindResourceEx ( $hInstance, $sType, $sName, $iLanguage ) 确定指定类型, 名称和语言的模块资源位置. (需要: #include <WinAPIRes.au3>)
_WinAPI_FindTextDlg ( $hOwner [, $sFindWhat = '' [, $iFlags = 0 [, $pFindProc = 0 [, $lParam = 0]]]] ) 为搜索文档文本创建一个系统定义的无模式查找对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_FindWindow ( $sClassName, $sWindowName ) 检索类名和窗口名称相匹配的顶层窗口句柄. (需要: #include <WinAPI.au3>)
_WinAPI_FlashWindow ( $hWnd [, $bInvert = True] ) 指定的窗口闪烁一次. (需要: #include <WinAPI.au3>)
_WinAPI_FlashWindowEx ( $hWnd [, $iFlags = 3 [, $iCount = 3 [, $iTimeout = 0]]] ) 闪烁指定的窗口 (需要: #include <WinAPI.au3>)
_WinAPI_FlattenPath ( $hDC ) 转换当前 DC 路径选中的任何曲线为系列直线. (需要: #include <WinAPIGdi.au3>)
_WinAPI_FloatToDWord ( $iValue ) 转换浮点(FLOAT)类型值为 DWORD 类型值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_FloatToInt ( $nFloat ) 转换 4 字节浮点值为整型值 (需要: #include <WinAPI.au3>)
_WinAPI_FlushFileBuffers ( $hFile ) 刷新缓冲区的指定文件, 并写入所有缓冲数据. (需要: #include <WinAPI.au3>)
_WinAPI_FlushFRBuffer (  ) 销毁 _WinAPI_FindTextDlg() 和 _WinAPI_ReplaceTextDlg() 函数使用的内部缓冲区. (需要: #include <WinAPIDlg.au3>)
_WinAPI_FlushViewOfFile ( $pAddress [, $iBytes = 0] ) 将文件映射视图写入到磁盘上的字节范围. (需要: #include <WinAPIFiles.au3>)
_WinAPI_FormatDriveDlg ( $sDrive [, $iOption = 0 [, $hParent = 0]] ) 打开格式化命令解释程序(Shell)对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_FormatMessage ( $iFlags, $pSource, $iMessageID, $iLanguageID, ByRef $pBuffer, $iSize, $vArguments ) 格式化消息字符串. (需要: #include <WinAPI.au3>)
_WinAPI_FrameRect ( $hDC, $tRECT, $hBrush ) 使用指定的画刷绘制指定的矩形边框. (需要: #include <WinAPI.au3>)
_WinAPI_FrameRgn ( $hDC, $hRgn, $hBrush, $iWidth, $iHeight ) 使用指定画刷(brush)绘制指定区域周围边框. (需要: #include <WinAPIGdi.au3>)
_WinAPI_FreeLibrary ( $hModule ) 递减加载的动态链接库（DLL）模块引用计数. (需要: #include <WinAPI.au3>)
_WinAPI_FreeMemory ( $pMemory ) 释放内部程序库堆的内存块. (需要: #include <WinAPISys.au3>)
_WinAPI_FreeMRUList ( $hMRU ) 释放最近使用(MRU)列表相关的句柄, 缓存数据写入注册表. (需要: #include <WinAPIReg.au3>)
_WinAPI_FreeResource ( $hData ) 递减(减少一)加载资源的引用计数. (需要: #include <WinAPIRes.au3>)
_WinAPI_GdiComment ( $hDC, $pBuffer, $iSize ) 复制缓冲区注释到指定的增强格式图元文件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetActiveWindow (  ) 检索附加到调用进程消息队列的活动窗口句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_GetAllUsersProfileDirectory (  ) 检索包含所有用户共享程序数据的根目录路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_GetAncestor ( $hWnd [, $iFlags = 1] ) 检索指定窗口的祖窗句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetApplicationRestartSettings ( [$iPID = 0] ) 检索指定进程重新启动的注册信息. (需要: #include <WinAPIDiag.au3>)
_WinAPI_GetArcDirection ( $hDC ) 检索指定设备环境当前弧线的方向. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetAsyncKeyState ( $iKey ) 确定函数调用时, 按键是按下还是松开. (需要: #include <WinAPI.au3>)
_WinAPI_GetBinaryType ( $sFilePath ) 确定文件是否为可执行(.exe)文件, 如果是, 则子系统运行这个可执行文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetBitmapBits ( $hBitmap, $iSize, $pBits ) 复制指定位图位的设备相关位图到缓冲区. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBitmapDimension ( $hBitmap ) 检索指定位图的大小. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBitmapDimensionEx ( $hBitmap ) 检索兼容位图的尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBkColor ( $hDC ) 检索指定设备环境的当前背景颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBkMode ( $hDC ) 检索指定设备环境的当前背景混合模式. (需要: #include <WinAPI.au3>)
_WinAPI_GetBoundsRect ( $hDC [, $iFlags = 0] ) 获取指定设备环境目前累计边界矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBrushOrg ( $hDC ) 检索指定设备环境当前画笔(brush)原点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetBufferedPaintBits ( $hBP ) 检索指向缓冲区位图的指针(如果缓冲区是一个设备无关位图 DIB). (需要: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintDC ( $hBP ) 获取设备环境(DC)描述. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintTargetDC ( $hBP ) 检索目标设备环境(DC). (需要: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintTargetRect ( $hBP ) 检索目标矩形. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetBValue ( $iRGB ) 检索 32 位 RGB 值蓝色成分的亮度值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetCaretBlinkTime (  ) 返回闪烁插入符像素所需的时间. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetCaretPos (  ) 检索插入符号的位置. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetCDType ( $sDrive ) 检索指定 CD-ROM 设备加载的媒体类型. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetClassInfoEx ( $sClass [, $hInstance = 0] ) 检索窗口的类信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetClassLongEx ( $hWnd, $iIndex ) 检索指定窗口关联的给定值. (需要: #include <WinAPISys.au3>)
_WinAPI_GetClassName ( $hWnd ) 检索指定窗口的类名称. (需要: #include <WinAPI.au3>)
_WinAPI_GetClientHeight ( $hWnd ) 检索窗口客户区的高度. (需要: #include <WinAPI.au3>)
_WinAPI_GetClientRect ( $hWnd ) 检索窗口客户区坐标. (需要: #include <WinAPI.au3>)
_WinAPI_GetClientWidth ( $hWnd ) 检索窗口的客户区宽度. (需要: #include <WinAPI.au3>)
_WinAPI_GetClipboardSequenceNumber (  ) 检索当前窗口站的剪贴板序列号. (需要: #include <WinAPISys.au3>)
_WinAPI_GetClipBox ( $hDC, ByRef $tRECT ) 检索可见区域边界的矩形尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetClipCursor (  ) 检索限制光标的屏幕矩形区域坐标. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetClipRgn ( $hDC ) 检索标识当前应用程序定义裁剪区域的句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetColorAdjustment ( $hDC ) 检索指定设备环境(DC)的色彩调整. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetCompressedFileSize ( $sFilePath ) 检索指定文件的磁盘存储实际字节数. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetCompression ( $sFilePath ) 检索文件或目录的当前压缩状态. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetConnectedDlg ( $iDlg [, $iFlags = 0 [, $hParent = 0]] ) 启动应用程序网络连接的连接向导. (需要: #include <WinAPIDlg.au3>)
_WinAPI_GetCurrentDirectory (  ) 检索当前进程的当前目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetCurrentHwProfile (  ) 检索本地计算机当前硬件配置文件信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetCurrentObject ( $hDC, $iType ) 检索设备环境选定指定类型的对象句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetCurrentPosition ( $hDC ) 检索指定设备环境的当前位置. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetCurrentProcess (  ) 检索调用进程的进程句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetCurrentProcessExplicitAppUserModelID (  ) 检索当前进程定义的应用程序用户模式 ID. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetCurrentProcessID (  ) 检索调用进程的进程标识符. (需要: #include <WinAPI.au3>)
_WinAPI_GetCurrentThemeName (  ) 检索当前视觉样式名称, 配色方案名称, 尺寸名称. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetCurrentThread (  ) 检索调用线程的伪句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetCurrentThreadId (  ) 检索调用线程的线程标识符. (需要: #include <WinAPI.au3>)
_WinAPI_GetCursor (  ) 检索当前光标句柄. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetCursorInfo (  ) 检索全局光标的信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetDateFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] ) 格式化指定区域设置标识符的日期字符串. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetDC ( $hWnd ) 检索窗口客户区的显示设备环境句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetDCEx ( $hWnd, $hRgn, $iFlags ) 检索指定窗口客户区的设备环境(DC)句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetDefaultPrinter (  ) 检索当前用户默认打印机的名称. (需要: #include <WinAPISys.au3>)
_WinAPI_GetDefaultUserProfileDirectory (  ) 检索默认用户配置文件的根路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_GetDesktopWindow (  ) 检索 Windows 桌面窗口的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetDeviceCaps ( $hDC, $iIndex ) 检索指定设备的特定信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetDeviceDriverBaseName ( $pDriver ) 检索指定设备驱动程序的基本名称. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetDeviceDriverFileName ( $pDriver ) 检索指定设备驱动程序的有效路径. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetDeviceGammaRamp ( $hDC, ByRef $aRamp ) 获取支持下载 gamma ramp(伽玛斜面)的直接彩色显示板硬件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetDIBColorTable ( $hBitmap ) 检索 DIB 位图的 RGB 颜色表. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBI, $iUsage ) 检索指定位图, 并将它作为 DIB 拷贝到缓冲区. (需要: #include <WinAPI.au3>)
_WinAPI_GetDiskFreeSpaceEx ( $sDrive ) 检索磁盘可用空间信息. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetDlgCtrlID ( $hWnd ) 检索指定控件的标识符. (需要: #include <WinAPI.au3>)
_WinAPI_GetDlgItem ( $hWnd, $iItemID ) 检索指定的对话框控件句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetDllDirectory (  ) 检索应用程序定位 DLL 搜索路径的特定部分. (需要: #include <WinAPISys.au3>)
_WinAPI_GetDriveBusType ( $sDrive ) 检索指定驱动器总线类型. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveGeometryEx ( $iDrive ) 检索磁盘的几何结构扩展信息. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveNumber ( $sDrive ) 检索指定驱动器的类型, 设备编号, 和分区号. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveType ( [$sDrive = ''] ) 检索磁盘驱动器类型(可移动, 固定, 光驱, RAM 磁盘或网络驱动器). (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetDurationFormat ( $iLCID, $iDuration [, $sFormat = ''] ) 格式化标识符指定的语言环境的持续时间为字符串时间. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetEffectiveClientRect ( $hWnd, $aCtrl [, $iStart = 0 [, $iEnd = -1]] ) 计算包含所有指定控件的客户区矩形尺寸. (需要: #include <WinAPISys.au3>)
_WinAPI_GetEnhMetaFile ( $sFilePath ) 创建储存在指定文件中的增强型图元文件句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileBits ( $hEmf, ByRef $pBuffer ) 检索指定增强型图元文件的内容. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileDescription ( $hEmf ) 检索增强型图元文件格式的可选文字说明. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileDimension ( $hEmf ) 检索指定增强格式图元文件的尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileHeader ( $hEmf ) 检索包含指定增强格式图元文件的头记录. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetErrorMessage ( $iCode [, $iLanguage = 0] ) 检索指定系统错误代码的错误信息. (需要: #include <WinAPIDiag.au3>)
_WinAPI_GetErrorMode (  ) 检索当前进程的错误模式. (需要: #include <WinAPIDiag.au3>)
_WinAPI_GetExitCodeProcess ( $hProcess ) 检索指定进程的终止状态. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetExtended (  ) 检索函数最后返回的扩展值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_GetFileAttributes ( $sFilePath ) 检索指定文件或目录的文件系统属性. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileID ( $hFile ) 检索一个文件的文件系统 8 字节的文件访问编号. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileInformationByHandle ( $hFile ) 检索指定文件的信息.(返回信息数组) (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileInformationByHandleEx ( $hFile ) 检索指定文件的信息.(返回信息结构) (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFilePointerEx ( $hFile ) 检索指定文件的文件指针. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileSizeEx ( $hFile ) 检索指定文件的大小. (需要: #include <WinAPI.au3>)
_WinAPI_GetFileSizeOnDisk ( $sFilePath ) 检索文件分配磁盘的大小. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileTitle ( $sFilePath ) 检索指定文件的名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileType ( $hFile ) 检索指定文件的文件类型. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFileVersionInfo ( $sFilePath, ByRef $pBuffer [, $iFlags = 0] ) 检索指定文件的版本信息. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetFinalPathNameByHandle ( $hFile ) 检索指定文件的最终路径. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFinalPathNameByHandleEx ( $hFile [, $iFlags = 0] ) 检索指定文件的最终路径(扩展). (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetFocus (  ) 检索具有键盘焦点的窗口句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetFontMemoryResourceInfo ( $pMemory [, $iFlag = 1] ) 读取加载到内存的 TTF 字体信息 (需要: #include <GDIPlus.au3>)
_WinAPI_GetFontName ( $sFaceName [, $iStyle = 0 [, $iCharSet = 1]] ) 基于 typeface 名称, 字符集, 与样式检索字体的唯一名称. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetFontResourceInfo ( $sFont [, $bForce = False [, $iFlag = Default]] ) 检索指定字体资源文件的字体名称. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetForegroundWindow (  ) 检索前台窗口的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetFRBuffer (  ) 检索 _WinAPI_FindTextDlg() 与 _WinAPI_ReplaceTextDlg() 函数使用的内部缓冲区当前的大小. (需要: #include <WinAPIDlg.au3>)
_WinAPI_GetFullPathName ( $sFilePath ) 检索指定文件的完整路径和文件名. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetGeoInfo ( $iGEOID, $iType [, $iLanguage = 0] ) 检索指定地理位置的相关信息. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetGlyphOutline ( $hDC, $sChar, $iFormat, ByRef $pBuffer [, $tMAT2 = 0] ) 检索 TrueType 字体的字符轮廓或位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetGraphicsMode ( $hDC ) 检索指定设备环境的当前图形模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetGuiResources ( [$iFlag = 0 [, $hProcess = -1]] ) 检索指定进程使用的 GUI 对象句柄数. (需要: #include <WinAPI.au3>)
_WinAPI_GetGUIThreadInfo ( $iThreadId ) 检索活动窗口或指定 GUI 线程的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetGValue ( $iRGB ) 检索 32 位 RGB 值的绿色成分亮度值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetHandleInformation ( $hObject ) 检索对象的句柄属性. (需要: #include <WinAPISys.au3>)
_WinAPI_GetHGlobalFromStream ( $pStream ) 检索流的全局内存句柄. (需要: #include <WinAPICom.au3>)
_WinAPI_GetIconDimension ( $hIcon ) 检索指定图标的尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetIconInfo ( $hIcon ) 检索指定图标或光标的信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetIconInfoEx ( $hIcon ) 检索指定图标或光标的相关信息. (需要: #include <WinAPIRes.au3>)
_WinAPI_GetIdleTime (  ) 检索自上次输入经过的时间. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardLayout ( $hWnd ) 检索指定窗口当前激活的输入法区域设置标识符. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardLayoutList (  ) 检索系统中当前所有输入法区域设置标识符. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardState (  ) 复制 256 个虚拟键的状态到指定缓冲区. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardType ( $iType ) 检索当前键盘的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyNameText ( $lParam ) 检索表示键名称的字符串. (需要: #include <WinAPISys.au3>)
_WinAPI_GetKeyState ( $vKey ) 检索指定虚拟键的状态. (需要: #include <WinAPISys.au3>)
_WinAPI_GetLastActivePopup ( $hWnd ) 确定弹出窗口由哪个指定拥有的窗口最近激活. (需要: #include <WinAPISys.au3>)
_WinAPI_GetLastError (  ) 检索调用线程的最后一个错误代码值. (需要: #include <WinAPI.au3>)
_WinAPI_GetLastErrorMessage (  ) 返回调用线程的最后一个错误消息 (需要: #include <WinAPI.au3>)
_WinAPI_GetLayeredWindowAttributes ( $hWnd, ByRef $iTransColor, ByRef $iTransGUI [, $bColorRef = False] ) 获取分层窗口属性. (需要: #include <WinAPI.au3>)
_WinAPI_GetLocaleInfo ( $iLCID, $iType ) 检索标识符指定区域的信息. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetLogicalDrives (  ) 检索当前可用磁盘驱动器的位掩码. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetMapMode ( $hDC ) 获取当前(设备)映射模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetMemorySize ( $pMemory ) 检索从内部程序库堆分配的内存块大小. (需要: #include <WinAPISys.au3>)
_WinAPI_GetMessageExtraInfo (  ) 获取当前线程额外消息的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetModuleFileNameEx ( $hProcess [, $hModule = 0] ) 检索指定模块文件的完全有效路径. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetModuleHandle ( $sModuleName ) 返回指定模块的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetModuleHandleEx ( $sModule [, $iFlags = 0] ) 检索指定模块的句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_GetModuleInformation ( $hProcess [, $hModule = 0] ) 检索指定模块的信息. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetMonitorInfo ( $hMonitor ) 检索显示器的相关信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetMousePos ( [$bToClient = False [, $hWnd = 0]] ) 返回当前鼠标位置. (需要: #include <WinAPI.au3>)
_WinAPI_GetMousePosX ( [$bToClient = False [, $hWnd = 0]] ) 检索当前鼠标的 X 位置. (需要: #include <WinAPI.au3>)
_WinAPI_GetMousePosY ( [$bToClient = False [, $hWnd = 0]] ) 检索当前鼠标的 Y 位置. (需要: #include <WinAPI.au3>)
_WinAPI_GetMUILanguage (  ) 获取当前特定进程常见控件使用的语言. (需要: #include <WinAPISys.au3>)
_WinAPI_GetNumberFormat ( $iLCID, $sNumber [, $tNUMBERFMT = 0] ) 格式化标识符指定语言环境的数字字符串为自定义数字字符串. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetObject ( $hObject, $iSize, $pObject ) 检索指定图形对象的信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetObjectID ( $sFilePath ) 检索指定文件或目录的对象标识符. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetObjectInfoByHandle ( $hObject ) 检索指定对象的相关信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetObjectNameByHandle ( $hObject ) 获取指定对象的名称. (需要: #include <WinAPISys.au3>)
_WinAPI_GetObjectType ( $hObject ) 检索指定对象的类型. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetOpenFileName ( [$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] ) 创建一个打开对话框, 允许用户指定驱动器, 目录和文件名或设置打开的文件. (需要: #include <WinAPI.au3>)
_WinAPI_GetOutlineTextMetrics ( $hDC ) 检索 TrueType 字体文本规格. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetOverlappedResult ( $hFile, $tOverlapped, ByRef $iBytes [, $bWait = False] ) 检索重叠操作的结果. (需要: #include <WinAPI.au3>)
_WinAPI_GetParent ( $hWnd ) 检索指定子窗口的父窗口句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetParentProcess ( [$iPID = 0] ) 检索指定进程的父进程 PID. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetPerformanceInfo (  ) 检索性能信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetPEType ( $sFilePath ) 检索指定可移植可执行(PE)的机器类型. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetPhysicallyInstalledSystemMemory (  ) 检索物理计算机上安装的 RAM 数量. (需要: #include <WinAPISys.au3>)
_WinAPI_GetPixel ( $hDC, $iX, $iY ) 检索指定坐标的像素颜色值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetPolyFillMode ( $hDC ) 检索当前多边形填充模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetPosFromRect ( $tRECT ) 解读矩形坐标的偏移量和位置坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetPriorityClass ( [$iPID = 0] ) 检索指定进程的优先级. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcAddress ( $hModule, $vName ) 检索指定模块的导出函数或变量的地址. (需要: #include <WinAPI.au3>)
_WinAPI_GetProcessAffinityMask ( $hProcess ) 获取进程和系统的相似掩码. (需要: #include <WinAPI.au3>)
_WinAPI_GetProcessCommandLine ( [$iPID = 0] ) 检索指定进程的命令行字符串. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessFileName ( [$iPID = 0] ) 检索指定进程可执行文件的完全有效路径. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessHandleCount ( [$iPID = 0] ) 检索指定进程打开句柄的数量. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessID ( $hProcess ) 检索指定进程的进程标识符. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessIoCounters ( [$iPID = 0] ) 检索指定进程所有执行 I/O 操作的统计信息. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessMemoryInfo ( [$iPID = 0] ) 检索指定进程的内存使用信息. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessName ( [$iPID = 0] ) 检索指定进程的名称. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessShutdownParameters (  ) 获取当前调用进程的关机参数. (需要: #include <WinAPISys.au3>)
_WinAPI_GetProcessTimes ( [$iPID = 0] ) 检索指定进程的计时信息. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessUser ( [$iPID = 0] ) 检索指定进程的用户和域名. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProcessWindowStation (  ) 检索调用进程的当前窗口站的句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_GetProcessWorkingDirectory ( [$iPID = 0] ) 检索指定进程的当前工作目录. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetProfilesDirectory (  ) 检索存储用户配置文件的根目录路径. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetPwrCapabilities (  ) 检索系统电源能力的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRawInputBuffer ( $pBuffer, $iLength ) 执行读取原始输入数据的缓冲. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRawInputBufferLength (  ) 获取 _WinAPI_GetRawInputBuffer() 函数调用所需的缓冲区大小. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRawInputData ( $hRawInput, $pBuffer, $iLength, $iFlag ) 获取指定设备的原始输入. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRawInputDeviceInfo ( $hDevice, $pBuffer, $iLength, $iFlag ) 检索原始输入设备的相关信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRegionData ( $hRgn, ByRef $tRGNDATA ) 填充指定缓冲区的描述区域数据 (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetRegisteredRawInputDevices ( $pBuffer, $iLength ) 检索当前应用程序的原始输入设备有关的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetRegKeyNameByHandle ( $hKey ) 检索指定注册表项的名称. (需要: #include <WinAPIReg.au3>)
_WinAPI_GetRgnBox ( $hRgn, ByRef $tRECT ) 检索指定区域的边界矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetROP2 ( $hDC ) 检索指定设备环境的前景混合模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetRValue ( $iRGB ) 检索 32 位 RGB 值的红色成分的亮度值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetSaveFileName ( [$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] ) 创建一个保存对话框, 允许用户指定驱动器, 目录, 并且保存文件名. (需要: #include <WinAPI.au3>)
_WinAPI_GetShellWindow (  ) 检索命令解释程序(Shell)的桌面窗口句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_GetStartupInfo (  ) 检索指定调用进程创建的 STARTUPINFO(启动信息) 结构的内容. (需要: #include <WinAPISys.au3>)
_WinAPI_GetStdHandle ( $iStdHandle ) 检索标准输入,标准输出,或标准错误设备的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetStockObject ( $iObject ) 检索预定义常规笔, 笔刷, 字体, 或调色板的句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetStretchBltMode ( $hDC ) 检索(设备环境)当前的伸展模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetString ( $pString [, $bUnicode = True] ) 返回位于指定内存地址的字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_GetSysColor ( $iIndex ) 检索当前指定的显示元素颜色. (需要: #include <WinAPI.au3>)
_WinAPI_GetSysColorBrush ( $iIndex ) 检索指定颜色索引对应的逻辑笔刷句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetSystemDefaultLangID (  ) 返回系统区域设置的语言标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDefaultLCID (  ) 返回系统的区域设置标识符(LCID). (需要: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDefaultUILanguage (  ) 检索操作系统默认系统 UI 语言标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDEPPolicy (  ) 获取系统数据保护(DEP)策略设置. (需要: #include <WinAPISys.au3>)
_WinAPI_GetSystemInfo (  ) 检索当前系统的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetSystemMetrics ( $iIndex ) 检索指定的系统度量或系统配置设置. (需要: #include <WinAPI.au3>)
_WinAPI_GetSystemPowerStatus (  ) 检索系统的电源状态. (需要: #include <WinAPISys.au3>)
_WinAPI_GetSystemTimes (  ) 检索系统计时信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetSystemWow64Directory (  ) 检索 WOW64 使用的系统目录路径. (需要: #include <WinAPISys.au3>)
_WinAPI_GetTabbedTextExtent ( $hDC, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1]]] ) 计算字符串的宽度和高度, 可能包含一或多个制表符. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetTempFileName ( $sFilePath [, $sPrefix = ''] ) 创建临时文件的名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetTextAlign ( $hDC ) 检索指定设备环境文本对齐的设定值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetTextCharacterExtra ( $hDC ) 检索当前指定设备环境的字符间距. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetTextColor ( $hDC ) 检索指定设备环境的当前文本颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetTextExtentPoint32 ( $hDC, $sText ) 计算指定文本字符串的宽度和高度. (需要: #include <WinAPI.au3>)
_WinAPI_GetTextFace ( $hDC ) 检索指定设备环境选定字体的字体名称. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetTextMetrics ( $hDC ) 检索当前选定字体的基本信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetThemeAppProperties (  ) 检索当前应用程序控制视觉样式的属性标志. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundContentRect ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) 检索视觉样式定义背景的内容区域大小. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundExtent ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) 计算视觉样式定义的背景内容区域的大小和位置. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundRegion ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) 计算指定矩形范围内的整体或部分区域的透明背景. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBitmap ( $hTheme, $iPartID, $iStateID, $iPropID [, $iFlag = 0x01] ) 检索与某一主题相关的位图, 部件, 状态, 和属性. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBool ( $hTheme, $iPartID, $iStateID, $iPropID ) 获取 SysMetrics 区段主题数据的属性布尔值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeColor ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索颜色的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeDocumentationProperty ( $sFilePath, $sProperty ) 检索指定主题文件文档的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeEnumValue ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索枚举类型的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeFilename ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索文件名的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeFont ( $hTheme, $iPartID, $iStateID, $iPropID [, $hDC = 0] ) 检索字体的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeInt ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索 int 的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeMargins ( $hTheme, $iPartID, $iStateID, $iPropID, $hDC, $tRECT ) 检索 MARGINS(页边空白) 的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeMetric ( $hTheme, $iPartID, $iStateID, $iPropID [, $hDC = 0] ) 检索度量属性的值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemePartSize ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $iType ) 计算视觉样式定义部件的原始大小. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemePosition ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索位置属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemePropertyOrigin ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索主题属性定义的位置属性. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeRect ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索 RECT(矩形) 的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeString ( $hTheme, $iPartID, $iStateID, $iPropID ) 检索字符串的属性值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysBool ( $hTheme, $iBoolID ) 检索系统度量的布尔值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysColor ( $hTheme, $iColorID ) 检索系统的颜色值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysColorBrush ( $hTheme, $iColorID ) 检索系统的画刷(brush)颜色. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysFont ( $hTheme, $iFontID ) 检索系统字体的字体信息. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysInt ( $hTheme, $iIntID ) 检索系统的 INT 值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysSize ( $hTheme, $iSizeID ) 检索系统主题数据的大小度量值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysString ( $hTheme, $iStringID ) 检索系统字符串值. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTextExtent ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags ) 计算视觉样式字体指定的文本大小和位置. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTextMetrics ( $hTheme, $iPartID, $iStateID [, $hDC = 0] ) 检索视觉样式指定特定部分的字体信息. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTransitionDuration ( $hTheme, $iPartID, $iStateIDFrom, $iStateIDTo, $iPropID ) 获取指定过渡的持续时间. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetThreadDesktop ( $iThreadId ) 检索分配给指定线程的桌面句柄. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetThreadErrorMode (  ) 检索调用线程的错误模式. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetThreadLocale (  ) 检索调用线程的当前语言环境的区域设置标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetThreadUILanguage (  ) 检索当前线程的第一个用户界面的语言标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetTickCount (  ) 检索系统启动以来运行的毫秒数. (需要: #include <WinAPISys.au3>)
_WinAPI_GetTickCount64 (  ) 检索系统启动以来运行的毫秒数(64). (需要: #include <WinAPISys.au3>)
_WinAPI_GetTimeFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] ) 格式化区域标识符指定的时间字符串. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetTopWindow ( $hWnd ) 检索 Z 序顶部的子窗口句柄. (需要: #include <WinAPISys.au3>)
_WinAPI_GetUDFColorMode (  ) 检索 WinAPIEx UDF 库当前颜色模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetUpdateRect ( $hWnd [, $bErase = True] ) 检索包围指定窗口更新区域的矩形坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetUpdateRgn ( $hWnd, $hRgn [, $bErase = True] ) 检索复制指定区域的窗口更新区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetUserDefaultLangID (  ) 返回当前用户区域设置的语言标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetUserDefaultLCID (  ) 返回默认用户语言环境的区域设置标识符 (LCID). (需要: #include <WinAPILocale.au3>)
_WinAPI_GetUserDefaultUILanguage (  ) 返回当前用户的 UI 语言标识符. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetUserGeoID (  ) 检索相关用户的地理位置信息. (需要: #include <WinAPILocale.au3>)
_WinAPI_GetUserObjectInformation ( $hObject, $iIndex ) 获取指定窗口站或桌面对象的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetVersion (  ) 获取当前操作系统的版本. (需要: #include <WinAPISys.au3>)
_WinAPI_GetVersionEx (  ) 检索当前操作系统信息. (需要: #include <WinAPISys.au3>)
_WinAPI_GetVolumeInformation ( [$sRoot = ''] ) 检索指定根目录的文件系统和卷的相关信息. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetVolumeInformationByHandle ( $hFile ) 检索指定文件关联的文件系统和卷的信息. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetVolumeNameForVolumeMountPoint ( $sMountedPath ) 检索指定装入点的卷 GUID 路径. (需要: #include <WinAPIFiles.au3>)
_WinAPI_GetWindow ( $hWnd, $iCmd ) 检索与指定窗口有特定关系的窗口句柄. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowDC ( $hWnd ) 检索整个窗口的设备环境 (DC). (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowDisplayAffinity ( $hWnd ) 检索给定窗口任何进程当前显示的类似设置. (需要: #include <WinAPISys.au3>)
_WinAPI_GetWindowExt ( $hDC ) 检索指定设备环境窗口的 x 范围(extent)和 y 范围(extent). (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowFileName ( $hWnd ) 检索指定窗口句柄关联模块的完全有效路径. (需要: #include <WinAPIProc.au3>)
_WinAPI_GetWindowHeight ( $hWnd ) 检索窗口的高度. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowInfo ( $hWnd ) 检索指定窗口的信息(返回信息结构). (需要: #include <WinAPISys.au3>)
_WinAPI_GetWindowLong ( $hWnd, $iIndex ) 检索指定窗口的信息. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowOrg ( $hDC ) 检索指定设备环境窗口的起始点 X 坐标和 y 坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowPlacement ( $hWnd ) 检索窗口最小, 最大和正常的位置 (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowRect ( $hWnd ) 检索指定窗口矩形尺寸. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowRgn ( $hWnd, $hRgn ) 获取窗口区域的副本. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowRgnBox ( $hWnd, ByRef $tRECT ) 检索窗口区域边界矩形的尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass ) 检索指定窗口子类回调的参考数据. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_GetWindowText ( $hWnd ) 检索指定窗口的标题栏文本. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowTheme ( $hWnd ) 检索窗口应用视觉样式的主题句柄. (需要: #include <WinAPITheme.au3>)
_WinAPI_GetWindowThreadProcessId ( $hWnd, ByRef $iPID ) 检索指定窗口创建的线程标识符. (需要: #include <WinAPI.au3>)
_WinAPI_GetWindowWidth ( $hWnd ) 检索窗口宽度. (需要: #include <WinAPI.au3>)
_WinAPI_GetWorkArea (  ) 检索主显示器工作区的大小. (需要: #include <WinAPISys.au3>)
_WinAPI_GetWorldTransform ( $hDC ) 检索当前通用空间到页面空间的变换. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GetXYFromPoint ( ByRef $tPoint, ByRef $iX, ByRef $iY ) 获取 $tagPOINT 结构的 X/Y 值. (需要: #include <WinAPI.au3>)
_WinAPI_GlobalMemoryStatus (  ) 检索当前可用内存的信息. (需要: #include <WinAPI.au3>)
_WinAPI_GradientFill ( $hDC, Const ByRef $aVertex [, $iStart = 0 [, $iEnd = -1 [, $bRotate = False]]] ) 渐变填充矩形或三角形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_GUIDFromString ( $sGUID ) 转换 GUID 字符串为二进制 GUID.(返回结构) (需要: #include <WinAPI.au3>)
_WinAPI_GUIDFromStringEx ( $sGUID, $tGUID ) 转换 GUID 字符串为二进制 GUID.(使用结构) (需要: #include <WinAPI.au3>)
_WinAPI_HashData ( $pMemory, $iSize [, $iLength = 32] ) 哈希(Hashes)一个内存块. (需要: #include <WinAPIMisc.au3>)
_WinAPI_HashString ( $sString [, $bCaseSensitive = True [, $iLength = 32]] ) 哈希(Hashes)一个字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_HiByte ( $iValue ) 返回一个16位(2字节)值的高字节. (需要: #include <WinAPIMisc.au3>)
_WinAPI_HideCaret ( $hWnd ) 从屏幕上删除插入符. (需要: #include <WinAPIRes.au3>)
_WinAPI_HiDWord ( $iValue ) 返回 64 位(8字节)值的高位字值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_HiWord ( $iLong ) 获取一个长字值的高位字 (需要: #include <WinAPI.au3>)
_WinAPI_InflateRect ( ByRef $tRECT, $iDX, $iDY ) 增加或减少指定矩形的宽度和高度. (需要: #include <WinAPIGdi.au3>)
_WinAPI_InitMUILanguage ( $iLanguage ) 允许应用程序指定常见控件使用与系统语言不同的语言. (需要: #include <WinAPISys.au3>)
_WinAPI_InProcess ( $hWnd, ByRef $hLastWnd ) 确定窗口是否属于当前进程. (需要: #include <WinAPI.au3>)
_WinAPI_IntersectClipRect ( $hDC, $tRECT ) 从当前裁剪区域的交集创建一个新的裁剪区域和指定矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_IntersectRect ( $tRECT1, $tRECT2 ) 创造两个矩形的交集. (需要: #include <WinAPIGdi.au3>)
_WinAPI_IntToDWord ( $iValue ) 转换 INT 类型值为 DWORD 类型值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_IntToFloat ( $iInt ) 返回 4 字节整数为浮点值. (需要: #include <WinAPI.au3>)
_WinAPI_InvalidateRect ( $hWnd [, $tRECT = 0 [, $bErase = True]] ) 添加矩形到指定窗口的更新区域. (需要: #include <WinAPI.au3>)
_WinAPI_InvalidateRgn ( $hWnd [, $hRgn = 0 [, $bErase = True]] ) 增加区域到指定窗口的更新区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_InvertANDBitmap ( $hBitmap [, $bDelete = False] ) 执行逻辑 NOT 运算反转指定 AND 位掩码的位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_InvertColor ( $iColor ) 倒置指定的颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_InvertRect ( $hDC, $tRECT ) 对每个像素颜色值执行逻辑 NOT 运算, 使窗口矩形反转. (需要: #include <WinAPIGdi.au3>)
_WinAPI_InvertRgn ( $hDC, $hRgn ) 反转指定区域的颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_IOCTL ( $iDeviceType, $iFunction, $iMethod, $iAccess ) 创建一个独特的系统 I/O 控制代码 (IOCTL). (需要: #include <WinAPIFiles.au3>)
_WinAPI_IsAlphaBitmap ( $hBitmap ) 确定指定位图是否有 alpha 通道. (需要: #include <WinAPIGdi.au3>)
_WinAPI_IsBadCodePtr ( $pAddress ) 确定调用进程是否具有读取指定内存地址的访问权. (需要: #include <WinAPISys.au3>)
_WinAPI_IsBadReadPtr ( $pAddress, $iLength ) 验证调用进程具有指定内存范围的读访问权.(使用内存块参数). (需要: #include <WinAPISys.au3>)
_WinAPI_IsBadStringPtr ( $pAddress, $iLength ) 验证调用进程具有指定内存范围的读访问权.(使用字符串参数). (需要: #include <WinAPISys.au3>)
_WinAPI_IsBadWritePtr ( $pAddress, $iLength ) 验证调用进程的指定内存范围写访问权. (需要: #include <WinAPISys.au3>)
_WinAPI_IsChild ( $hWnd, $hWndParent ) 测试窗口是否为指定父窗的子窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_IsClassName ( $hWnd, $sClassName ) 检查控件的类名(是否匹配它的句柄). (需要: #include <WinAPI.au3>)
_WinAPI_IsDoorOpen ( $sDrive ) 检查光驱托盘的开/关状态. (需要: #include <WinAPIFiles.au3>)
_WinAPI_IsElevated (  ) 判断当前进程是否提升. (需要: #include <WinAPIProc.au3>)
_WinAPI_IsHungAppWindow ( $hWnd ) 确定指定的应用程序是否没有响应. (需要: #include <WinAPISys.au3>)
_WinAPI_IsIconic ( $hWnd ) 确定指定窗口是否最小化. (需要: #include <WinAPISys.au3>)
_WinAPI_IsInternetConnected (  ) 确定当前用户是否连接到互联网. (需要: #include <WinAPIDiag.au3>)
_WinAPI_IsLoadKBLayout ( $iLanguage ) 确定指定输入法区域设置是否加载到系统中. (需要: #include <WinAPISys.au3>)
_WinAPI_IsMemory ( $pMemory ) 确定指定指针是否指向内部程序库堆内存块. (需要: #include <WinAPISys.au3>)
_WinAPI_IsNameInExpression ( $sString, $sPattern [, $bCaseSensitive = False] ) 确定一个字符串是否符合指定的模式. (需要: #include <WinAPIShPath.au3>)
_WinAPI_IsNetworkAlive (  ) 确定本地系统的网络连接状态与类型. (需要: #include <WinAPIDiag.au3>)
_WinAPI_IsPathShared ( $sFilePath ) 确定路径是否共享. (需要: #include <WinAPIFiles.au3>)
_WinAPI_IsProcessInJob ( $hProcess [, $hJob = 0] ) 确定进程是否运行在指定的作业对象中. (需要: #include <WinAPIProc.au3>)
_WinAPI_IsProcessorFeaturePresent ( $iFeature ) 确定当前计算机是否支持指定处理器的特征. (需要: #include <WinAPISys.au3>)
_WinAPI_IsRectEmpty ( $tRECT ) 确定指定矩形是否为空. (需要: #include <WinAPIGdi.au3>)
_WinAPI_IsThemeActive (  ) 测试当前应用程序的可视化样式是否激活. (需要: #include <WinAPITheme.au3>)
_WinAPI_IsThemeBackgroundPartiallyTransparent ( $hTheme, $iPartID, $iStateID ) 检索视觉样式指定的背景是否为透明或 alpha 混合. (需要: #include <WinAPITheme.au3>)
_WinAPI_IsThemePartDefined ( $hTheme, $iPartID ) 检索视觉样式是否为指定的部件参数定义的. (需要: #include <WinAPITheme.au3>)
_WinAPI_IsValidLocale ( $iLCID [, $iFlag = 0] ) 确定操作系统是否安装或支持指定的语言环境. (需要: #include <WinAPILocale.au3>)
_WinAPI_IsWindow ( $hWnd ) 确定指定的句柄是否标识为现有窗口. (需要: #include <WinAPI.au3>)
_WinAPI_IsWindowEnabled ( $hWnd ) 确定指定窗口是否启用鼠标和键盘输入. (需要: #include <WinAPISys.au3>)
_WinAPI_IsWindowUnicode ( $hWnd ) 确定指定窗口是否为本地 Unicode 窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_IsWindowVisible ( $hWnd ) 检索指定窗口的可见状态. (需要: #include <WinAPI.au3>)
_WinAPI_IsWow64Process ( [$iPID = 0] ) 确定指定的进程是否在 WOW64 下运行. (需要: #include <WinAPIProc.au3>)
_WinAPI_IsWritable ( $sDrive ) 确定磁盘是否为可写磁盘. (需要: #include <WinAPIFiles.au3>)
_WinAPI_IsZoomed ( $hWnd ) 确定窗口是否最大化. (需要: #include <WinAPISys.au3>)
_WinAPI_Keybd_Event ( $vKey, $iFlags [, $iScanCode = 0 [, $iExtraInfo = 0]] ) 合成按键. (需要: #include <WinAPISys.au3>)
_WinAPI_KillTimer ( $hWnd, $iTimerID ) 销毁指定的计时器. (需要: #include <WinAPISys.au3>)
_WinAPI_LineDDA ( $iX1, $iY1, $iX2, $iY2, $pLineProc [, $pData = 0] ) 确定像素行的高亮显示. (需要: #include <WinAPIGdi.au3>)
_WinAPI_LineTo ( $hDC, $iX, $iY ) 从当前位置绘制一条线, 但不包括指定点. (需要: #include <WinAPI.au3>)
_WinAPI_LoadBitmap ( $hInstance, $sBitmap ) 加载模块的可执行文件指定的位图资源. (需要: #include <WinAPI.au3>)
_WinAPI_LoadCursor ( $hInstance, $sName ) 加载可执行(.EXE)文件指定的光标资源. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoadCursorFromFile ( $sFilePath ) 创建基于文件数据的光标. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoadIcon ( $hInstance, $sName ) 加载应用程序实例关联的可执行(.exe)文件指定的图标资源. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoadIconMetric ( $hInstance, $sName, $iMetric ) 加载客户指定系统度量的特定图标资源. (需要: #include <WinAPISys.au3>)
_WinAPI_LoadIconWithScaleDown ( $hInstance, $sName, $iWidth, $iHeight ) 加载图标并按比例缩小大图像; 而不是按比例放大小图像. (需要: #include <WinAPISys.au3>)
_WinAPI_LoadImage ( $hInstance, $sImage, $iType, $iXDesired, $iYDesired, $iLoad ) 加载图标, 光标或位图. (需要: #include <WinAPI.au3>)
_WinAPI_LoadIndirectString ( $sStrIn ) 提取指定资源的字符串时, 考虑间接字符串. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoadKeyboardLayout ( $iLanguage [, $iFlag = 0] ) 加载新的输入法区域设置标识符到系统. (需要: #include <WinAPISys.au3>)
_WinAPI_LoadLibrary ( $sFileName ) 映射指定的可执行模块到调用进程的地址空间. (需要: #include <WinAPI.au3>)
_WinAPI_LoadLibraryEx ( $sFileName [, $iFlags = 0] ) 映射指定的可执行模块到调用进程的地址空间(扩展). (需要: #include <WinAPI.au3>)
_WinAPI_LoadMedia ( $sDrive ) 加载媒体到设备. (需要: #include <WinAPIFiles.au3>)
_WinAPI_LoadResource ( $hInstance, $hResource ) 加载指定资源到全局内存. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoadShell32Icon ( $iIconID ) 提取 Shell32.dll 文件的图标. (需要: #include <WinAPI.au3>)
_WinAPI_LoadString ( $hInstance, $iStringID ) 加载指定模块关联的可执行文件字符串资源. (需要: #include <WinAPI.au3>)
_WinAPI_LoadStringEx ( $hModule, $iID [, $iLanguage = $LOCALE_USER_DEFAULT] ) 加载指定语言字符串资源的模块. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoByte ( $iValue ) 返回 16 位(2 字节)值的低字节. (需要: #include <WinAPIMisc.au3>)
_WinAPI_LocalFree ( $hMemory ) 释放指定本地内存对象极其无效的句柄 (需要: #include <WinAPI.au3>)
_WinAPI_LockDevice ( $sDrive, $bLock ) 启用或禁用具有锁定功能的设备的弹出媒体机制. (需要: #include <WinAPIFiles.au3>)
_WinAPI_LockFile ( $hFile, $iOffset, $iLength ) 锁定调用进程独占访问指定的文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_LockResource ( $hData ) 锁定内存中指定的资源. (需要: #include <WinAPIRes.au3>)
_WinAPI_LockWindowUpdate ( $hWnd ) 禁用或启用指定窗口的绘图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_LockWorkStation (  ) 锁定工作站的显示器. (需要: #include <WinAPISys.au3>)
_WinAPI_LoDWord ( $iValue ) 返回 64 位(8字节)值的低位 DWORD. (需要: #include <WinAPIMisc.au3>)
_WinAPI_LongMid ( $iValue, $iStart, $iCount ) 提取 DWORD(32位) 值的位数. (需要: #include <WinAPIMisc.au3>)
_WinAPI_LookupIconIdFromDirectoryEx ( $pData [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) 搜索最适合当前显示设备的图标或光标数据. (需要: #include <WinAPIRes.au3>)
_WinAPI_LoWord ( $iLong ) 检索长字值的低位字. (需要: #include <WinAPI.au3>)
_WinAPI_LPtoDP ( $hDC, ByRef $tPOINT [, $iCount = 1] ) 转换逻辑单位坐标为设备坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_MAKELANGID ( $iLngIDPrimary, $iLngIDSub ) 从主语言 ID 和子语言标识构建语言 ID. (需要: #include <WinAPI.au3>)
_WinAPI_MAKELCID ( $iLngID, $iSortID ) 从语言 ID 和分类 ID 构建区域 ID. (需要: #include <WinAPI.au3>)
_WinAPI_MakeLong ( $iLo, $iHi ) 从两个 int 值返回长整型值 (需要: #include <WinAPI.au3>)
_WinAPI_MakeQWord ( $iLoDWORD, $iHiDWORD ) 从两个 int 值返回 QWORD 值. (需要: #include <WinAPI.au3>)
_WinAPI_MakeWord ( $iLo, $iHi ) 从两个字节(8位)值返回一个字(16位)值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_MapViewOfFile ( $hMapping [, $iOffset = 0 [, $iBytes = 0 [, $iAccess = 0x0006]]] ) 视图映射文件映射到调用进程的地址空间. (需要: #include <WinAPIFiles.au3>)
_WinAPI_MapVirtualKey ( $iCode, $iType [, $hLocale = 0] ) 转换虚拟键码为扫描码或字符值, 或扫描码转换成一个虚拟键代码. (需要: #include <WinAPISys.au3>)
_WinAPI_MaskBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop ) 使用指定的遮罩和光栅操作结合源和目标位图的颜色数据. (需要: #include <WinAPIGdi.au3>)
_WinAPI_MessageBeep ( [$iType = 1] ) 播放波形声音. (需要: #include <WinAPI.au3>)
_WinAPI_MessageBoxCheck ( $iType, $sTitle, $sText, $sRegVal [, $iDefault = -1 [, $hParent = 0]] ) 显示一个消息框, 为用户提供取消更多事件的选项. (需要: #include <WinAPIDlg.au3>)
_WinAPI_MessageBoxIndirect ( $tMSGBOXPARAMS ) 创建, 显示并操作一个消息框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_MirrorIcon ( $hIcon [, $bDelete = False] ) 反转(镜像)图标, 使其正确地镜像显示在设备环境. (需要: #include <WinAPISys.au3>)
_WinAPI_ModifyWorldTransform ( $hDC, $tXFORM, $iMode ) 使用指定的模式改变设备环境的通用变换(world transformation). (需要: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromPoint ( $tPOINT [, $iFlag = 1] ) 检索包含指定点的显示器句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromRect ( $tRECT [, $iFlag = 1] ) 检索与指定矩形有最大交集面积的显示器句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromWindow ( $hWnd [, $iFlag = 1] ) 检索与指定窗口有最大交集面积的显示器句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_Mouse_Event ( $iFlags [, $iX = 0 [, $iY = 0 [, $iData = 0 [, $iExtraInfo = 0]]]] ) 合成鼠标移动和按钮单击. (需要: #include <WinAPI.au3>)
_WinAPI_MoveFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] ) 移动一个文件或目录, 通过回调函数将移动进度通知应用程序. (需要: #include <WinAPIFiles.au3>)
_WinAPI_MoveMemory ( $pDestination, $pSource, $iLength ) 移动内存块的位置. (需要: #include <WinAPISys.au3>)
_WinAPI_MoveTo ( $hDC, $iX, $iY ) 更新当前位置到指定点. (需要: #include <WinAPI.au3>)
_WinAPI_MoveToEx ( $hDC, $iX, $iY ) 更新当前位置到指定点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_MoveWindow ( $hWnd, $iX, $iY, $iWidth, $iHeight [, $bRepaint = True] ) 更改指定窗口的位置和尺寸. (需要: #include <WinAPI.au3>)
_WinAPI_MsgBox ( $iFlags, $sTitle, $sText ) 显示大于原始宽度的消息框. (需要: #include <WinAPI.au3>)
_WinAPI_MulDiv ( $iNumber, $iNumerator, $iDenominator ) 两个 32 位的值相乘, 然后除以第三个 32 位值的 64 位结果 (需要: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideChar ( $vText [, $iCodePage = 0 [, $iFlags = 0 [, $bRetString = False]]] ) 映射字符串到宽字符(Unicode)字符串. (需要: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideCharEx ( $sText, $pText [, $iCodePage = 0 [, $iFlags = 0]] ) 映射字符串到宽字符(Unicode)字符串(扩展). (需要: #include <WinAPI.au3>)
_WinAPI_NtStatusToDosError ( $iStatus ) 转换指定 NTSTATUS 代码为等效的系统错误代码. (需要: #include <WinAPIDiag.au3>)
_WinAPI_OemToChar ( $sStr ) 转换 OEM 定义的字符串为 ANSI 字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_OffsetClipRgn ( $hDC, $iXOffset, $iYOffset ) 依据指定的偏移量移动设备环境剪辑区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_OffsetPoints ( ByRef $aPoint, $iXOffset, $iYOffset [, $iStart = 0 [, $iEnd = -1]] ) 根据数组指定的偏移值移动一个点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_OffsetRect ( ByRef $tRECT, $iDX, $iDY ) 依据指定的偏移量移动指定的矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_OffsetRgn ( $hRgn, $iXOffset, $iYOffset ) 依据指定的偏移量移动区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_OffsetWindowOrg ( $hDC, $iXOffset, $iYOffset ) 使用指定的水平和垂直偏移修改设备环境窗口原点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_OpenDesktop ( $sName [, $iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] ) 打开指定的桌面对象. (需要: #include <WinAPISys.au3>)
_WinAPI_OpenFileById ( $hFile, $vID [, $iAccess = 0 [, $iShare = 0 [, $iFlags = 0]]] ) 打开指定对象标识符匹配的文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_OpenFileDlg ( [$sTitle = '' [, $sInitDir = '' [, $sFilters = '' [, $iDefaultFilter = 0 [, $sDefaultFilePath = '' [, $sDefaultExt = '' [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] ) 创建允许用户指定驱动器, 目录, 文件名, 或设置要打开的文件的打开对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_OpenFileMapping ( $sName [, $iAccess = 0x0006 [, $bInherit = False]] ) 打开命名文件映射对象. (需要: #include <WinAPIFiles.au3>)
_WinAPI_OpenIcon ( $hWnd ) 还原最小化窗口到原来的大小和位置, 并激活窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_OpenInputDesktop ( [$iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] ) 打开接收用户输入的桌面. (需要: #include <WinAPISys.au3>)
_WinAPI_OpenJobObject ( $sName [, $iAccess = $JOB_OBJECT_ALL_ACCESS [, $bInherit = False]] ) 打开现有的作业对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_OpenMutex ( $sMutex [, $iAccess = $MUTEX_ALL_ACCESS [, $bInherit = False]] ) 打开一个现有命名的互斥(mutex)对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_OpenProcess ( $iAccess, $bInherit, $iPID [, $bDebugPriv = False] ) 返回现有进程对象句柄. (需要: #include <WinAPI.au3>)
_WinAPI_OpenProcessToken ( $iAccess [, $hProcess = 0] ) 打开与进程关联的访问令牌. (需要: #include <WinAPIProc.au3>)
_WinAPI_OpenSemaphore ( $sSemaphore [, $iAccess = 0x001F0003 [, $bInherit = False]] ) 打开一个现有的命名信号量对象. (需要: #include <WinAPIProc.au3>)
_WinAPI_OpenThemeData ( $hWnd, $sClass ) 打开一个窗口主题数据及其关联的类. (需要: #include <WinAPITheme.au3>)
_WinAPI_OpenWindowStation ( $sName [, $iAccess = 0 [, $bInherit = False]] ) 打开指定的窗口站. (需要: #include <WinAPISys.au3>)
_WinAPI_PageSetupDlg ( ByRef $tPAGESETUPDLG ) 创建一个页面设置对话框, 使用户可以指定打印页面的属性. (需要: #include <WinAPIDlg.au3>)
_WinAPI_PaintDesktop ( $hDC ) 填充指定设备环境桌面图案或墙纸的裁剪区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PaintRgn ( $hDC, $hRgn ) 使用当前设备环境选择的画刷(brush)绘制指定区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ParseURL ( $sUrl ) 执行一个 URL 的初步解析. (需要: #include <WinAPIShPath.au3>)
_WinAPI_ParseUserName ( $sUser ) 提取有效用户名的域和用户帐户名称. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PatBlt ( $hDC, $iX, $iY, $iWidth, $iHeight, $iRop ) 使用指定设备环境当前选定的画刷(brush)绘制指定的矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PathAddBackslash ( $sFilePath ) 添加反斜杠到路径字符串, 创建正确的路径语法. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathAddExtension ( $sFilePath [, $sExt = ''] ) 添加文件扩展名到路径字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathAppend ( $sFilePath, $sMore ) 添加一个路径到另一路径结尾. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathBuildRoot ( $iDrive ) 创建给定驱动器号的根路径. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathCanonicalize ( $sFilePath ) 根据插入到路径的特殊字符串删除文件路径中的元素. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathCommonPrefix ( $sPath1, $sPath2 ) 比较两条路径, 以确定它们是否有一个共同的前缀. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathCompactPath ( $hWnd, $sFilePath [, $iWidth = 0] ) 使用省略号截短文件路径,以符合特定的像素宽度. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathCompactPathEx ( $sFilePath, $iMax ) 使用省略号截断路径, 以适应特定字符数的路径组件. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathCreateFromUrl ( $sUrl ) 转换文件 URL 到 Microsoft 的 MS-DOS 路径. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathFindExtension ( $sFilePath ) 搜索路径中的文件扩展名. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathFindFileName ( $sFilePath ) 检索路径中的文件名. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathFindNextComponent ( $sFilePath ) 解析路径, 并返回路径中第一个反斜杠后面的部分. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathFindOnPath ( $sFilePath [, $aExtraPaths = "" [, $sPathDelimiter = @LF]] ) 搜索默认系统路径文件. (需要: #include <WinAPI.au3>)
_WinAPI_PathGetArgs ( $sFilePath ) 查找给定路径的命令行参数. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathGetCharType ( $sChar ) 确定路径相关的字符类型. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathGetDriveNumber ( $sFilePath ) 搜索 'A' 到 'Z' 范围内驱动符路径, 并返回相应驱动器号. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsContentType ( $sFilePath, $sType ) 确定文件的注册内容类型是否匹配指定的内容类型. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsDirectory ( $sFilePath ) 验证路径是否为一个有效的目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_PathIsDirectoryEmpty ( $sFilePath ) 确定指定路径是否为一个空目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_PathIsExe ( $sFilePath ) 检查文件扩展名确定是否为可执行文件. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsFileSpec ( $sFilePath ) 搜索路径的路径分隔符. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsLFNFileSpec ( $sFilePath ) 确定文件名是否为长格式. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsRelative ( $sFilePath ) 搜索路径并确定是否为相对路径. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsRoot ( $sFilePath ) 解析路径, 确定它是否为根目录. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsSameRoot ( $sPath1, $sPath2 ) 比较两条路径, 以确定它们是否有共同的根组件. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsSystemFolder ( $sFilePath ) 确定现有文件夹中包含的属性是否是一个系统文件夹. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNC ( $sFilePath ) 确定服务器和共享的路径字符串是否为有效通用命名约定(UNC). (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNCServer ( $sFilePath ) 确定服务器路径字符串是否为有效通用命名约定(UNC. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNCServerShare ( $sFilePath ) 确定共享路径字符串是否为有效通用命名约定(UNC. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathMakeSystemFolder ( $sFilePath ) 提供现有文件夹的适当属性, 使其成为一个系统文件夹. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathMatchSpec ( $sFilePath, $sSpec ) 搜索匹配 Microsoft MS-DOS 通配符的字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathParseIconLocation ( $sFilePath ) 解析包含文件位置和图标索引的文件位置字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRelativePathTo ( $sPathFrom, $bDirFrom, $sPathTo, $bDirTo ) 创建文件或文件夹到另一个相对路径. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveArgs ( $sFilePath ) 删除给定路径的任何(变量)参数. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveBackslash ( $sFilePath ) 删除给定路径尾部的反斜杠. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveExtension ( $sFilePath ) 删除路径中的文件扩展名(如果存在). (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveFileSpec ( $sFilePath ) 删除路径结尾的文件名和反斜杠(如果存在). (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathRenameExtension ( $sFilePath, $sExt ) 替换文件的扩展名. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathSearchAndQualify ( $sFilePath [, $bExists = False] ) 格式化路径为完整有效的路径. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathSkipRoot ( $sFilePath ) 解析路径, 忽略驱动器盘符或通用命名约定(UNC)服务器/共享路径元素. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathStripPath ( $sFilePath ) 删除包含文件的完整路径的一部分.<span class="STYLE1">(译注:示例结果与 _WinAPI_PathSkipRoot 完全一致)</span> (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathStripToRoot ( $sFilePath ) 检索路径的根目录(驱动器盘符). (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathToRegion ( $hDC ) 创建指定设备环境选中路径的区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PathUndecorate ( $sFilePath ) 删除路径的修饰字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathUnExpandEnvStrings ( $sFilePath ) 替换完整路径及其相关环境的文件夹名称. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathUnmakeSystemFolder ( $sFilePath ) 删除文件夹的系统文件夹属性. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathUnquoteSpaces ( $sFilePath ) 删除路径的开始和结束的引号. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PathYetAnotherMakeUniqueName ( $sFilePath ) 基于现有文件名创建特有的文件名. (需要: #include <WinAPIShPath.au3>)
_WinAPI_PickIconDlg ( [$sIcon = '' [, $iIndex = 0 [, $hParent = 0]]] ) 显示图标选择对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_PlayEnhMetaFile ( $hDC, $hEmf, $tRECT ) 显示储存在指定格式的增强图元文件的图片. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PlaySound ( $sSound [, $iFlags = $SND_SYSTEM_NOSTOP [, $hInstance = 0]] ) 播放指定文件名, 资源或系统事件的声音. (需要: #include <WinAPIMisc.au3>)
_WinAPI_PlgBlt ( $hDestDC, Const ByRef $aPoint, $hSrcDC, $iXSrc, $iYSrc, $iWidth, $iHeight [, $hMask = 0 [, $iXMask = 0 [, $iYMask = 0]]] ) 执行 DC 环境内源 DC 指定平行四边形颜色数据的位块传输. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PointFromRect ( ByRef $tRECT [, $bCenter = True] ) 提取 $tagRECT 的顶部/左坐标到 $tagPOINT 结构 (需要: #include <WinAPI.au3>)
_WinAPI_PolyBezier ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) 绘制一个或多个贝塞尔曲线(当前位置不更新). (需要: #include <WinAPIGdi.au3>)
_WinAPI_PolyBezierTo ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) 绘制一个或多个贝塞尔曲线(当前位置移动). (需要: #include <WinAPIGdi.au3>)
_WinAPI_PolyDraw ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) 绘制贝塞尔曲线的线段. (需要: #include <WinAPIGdi.au3>)
_WinAPI_Polygon ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) 绘制由两个或两个以上的顶点用直线连接的多边形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PostMessage ( $hWnd, $iMsg, $wParam, $lParam ) 放置消息到消息队列并返回. (需要: #include <WinAPI.au3>)
_WinAPI_PrimaryLangId ( $iLngID ) 从语言 ID 提取主语言 ID. (需要: #include <WinAPI.au3>)
_WinAPI_PrintDlg ( ByRef $tPRINTDLG ) 显示打印对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_PrintDlgEx ( ByRef $tPRINTDLGEX ) 显示打印属性表, 使用户可以指定特定打印作业的属性. (需要: #include <WinAPIDlg.au3>)
_WinAPI_PrintWindow ( $hWnd, $hDC [, $bClient = False] ) 复制指定可见窗口到设备环境. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ProgIDFromCLSID ( $sCLSID ) 检索指定 CLSID 的 ProgID. (需要: #include <WinAPICom.au3>)
_WinAPI_PtInRect ( ByRef $tRECT, ByRef $tPoint ) 确定指定点是否在指定矩形中. (需要: #include <WinAPI.au3>)
_WinAPI_PtInRectEx ( $iX, $iY, $iLeft, $iTop, $iRight, $iBottom ) 确定指定点是否在指定的矩形中. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PtInRegion ( $hRgn, $iX, $iY ) 确定指定点是否在指定区域内. (需要: #include <WinAPIGdi.au3>)
_WinAPI_PtVisible ( $hDC, $iX, $iY ) 确定指定点是否是在裁剪区域内. (需要: #include <WinAPIGdi.au3>)
_WinAPI_QueryDosDevice ( $sDevice ) 检索特定 MS - DOS 设备名称的当前映射. (需要: #include <WinAPIFiles.au3>)
_WinAPI_QueryInformationJobObject ( $hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo ) 检索作业对象的限制和作业状态信息. (需要: #include <WinAPIProc.au3>)
_WinAPI_QueryPerformanceCounter (  ) 获取高分辨率性能计数器的当前值. (需要: #include <WinAPISys.au3>)
_WinAPI_QueryPerformanceFrequency (  ) 检索高分辨率性能计数器的频率. (需要: #include <WinAPISys.au3>)
_WinAPI_RadialGradientFill ( $hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $fAngleStart = 0 [, $fAngleEnd = 360 [, $fStep = 5]]] ) 填充径向渐变. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ReadDirectoryChanges ( $hDirectory, $iFilter, $pBuffer, $iLength [, $bSubtree = 0] ) 检索指定目录内信息描述的变化. (需要: #include <WinAPIFiles.au3>)
_WinAPI_ReadFile ( $hFile, $pBuffer, $iToRead, ByRef $iRead [, $tOverlapped = 0] ) 读取文件中的数据 (需要: #include <WinAPI.au3>)
_WinAPI_ReadProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iRead ) 读取指定进程的内存. (需要: #include <WinAPI.au3>)
_WinAPI_Rectangle ( $hDC, $tRECT ) 绘制矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RectInRegion ( $hRgn, $tRECT ) 确定指定矩形的任何部分是否在一个区域内. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RectIsEmpty ( ByRef $tRECT ) 确定矩形是否为空. (需要: #include <WinAPI.au3>)
_WinAPI_RectVisible ( $hDC, $tRECT ) 确定指定矩形的任何部分是否位于裁剪区域内. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RedrawWindow ( $hWnd [, $tRECT = 0 [, $hRegion = 0 [, $iFlags = 5]]] ) 更新指定矩形或窗口客户区域. (需要: #include <WinAPI.au3>)
_WinAPI_RegCloseKey ( $hKey [, $bFlush = False] ) 关闭指定注册表项的句柄. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegConnectRegistry ( $sComputer, $hKey ) 创建到预定义另一台计算机上的注册表项的连接. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegCopyTree ( $hSrcKey, $sSrcSubKey, $hDestKey ) 递归复制源子项的子项和值到目的键项. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegCopyTreeEx ( $hSrcKey, $sSrcSubKey, $hDestKey ) 复制指定的注册表项及其子项到指定的目标键项. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegCreateKey ( $hKey [, $sSubKey = '' [, $iAccess = $KEY_ALL_ACCESS [, $iOptions = 0 [, $tSecurity = 0]]]] ) 创建指定的注册表键. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteEmptyKey ( $hKey [, $sSubKey = ''] ) 删除一个空键项. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteKey ( $hKey [, $sSubKey = ''] ) 删除一个子项及其值. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteKeyValue ( $hKey, $sSubKey, $sValueName ) 删除指定注册表键和子项的指定值. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteTree ( $hKey [, $sSubKey = ''] ) 删除注册表指定子项及其所有的子节点. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteTreeEx ( $hKey [, $sSubKey = 0] ) 递归删除指定键的子项和值. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteValue ( $hKey, $sValueName ) 删除指定注册表键的命名值. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDisableReflectionKey ( $hKey ) 禁用指定键的注册表反射. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegDuplicateHKey ( $hKey ) 复制注册表项的句柄. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegEnableReflectionKey ( $hKey ) 恢复禁用的注册表键项反射. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegEnumKey ( $hKey, $iIndex ) 枚举指定并已打开的注册表键的子项. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegEnumValue ( $hKey, $iIndex ) 枚举指定打开的注册表项值. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegFlushKey ( $hKey ) 写入指定打开的注册表键的所有属性到注册表. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegisterApplicationRestart ( [$iFlags = 0 [, $sCmd = '']] ) 注册重新启动应用程序的激活实例. (需要: #include <WinAPIDiag.au3>)
_WinAPI_RegisterClass ( $tWNDCLASS ) 注册一个窗口类. (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterClassEx ( $tWNDCLASSEX ) 注册一个窗口类(扩展). (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterHotKey ( $hWnd, $iID, $iModifiers, $vKey ) 定义全系统热键. (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterPowerSettingNotification ( $hWnd, $sGUID ) 注册接收电源设置事件通知的应用程序. (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterRawInputDevices ( $paDevice [, $iCount = 1] ) 注册设备提供的原始输入数据. (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterShellHookWindow ( $hWnd ) 注册接收事件或通知消息的 shell 窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_RegisterWindowMessage ( $sMessage ) 定义新窗口消息, 保证在整个系统中是唯一的 (需要: #include <WinAPI.au3>)
_WinAPI_RegLoadMUIString ( $hKey, $sValueName [, $sDirectory = ''] ) 加载指定项和子项中指定的字符串. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegNotifyChangeKeyValue ( $hKey, $iFilter [, $bSubtree = False [, $bAsync = False [, $hEvent = 0]]] ) 通知调用程序有关指定注册表项属性或内容的变化. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegOpenKey ( $hKey [, $sSubKey = '' [, $iAccess = 0x000F003F]] ) 打开指定的注册表项. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegQueryInfoKey ( $hKey ) 检索指定注册表键的信息. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegQueryLastWriteTime ( $hKey ) 检索指定注册表项的最后写入时间. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegQueryMultipleValues ( $hKey, ByRef $aValent, ByRef $pBuffer [, $iStart = 0 [, $iEnd = -1]] ) 检索注册表键的类型和名称值列表数据. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegQueryReflectionKey ( $hKey ) 确定指定键的反射是否禁用或启用. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegQueryValue ( $hKey, $sValueName, ByRef $tValueData ) 检索注册表项指定值名称的类型和数据. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegRestoreKey ( $hKey, $sFilePath ) 读取指定文件的注册表信息, 并复制指定键. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegSaveKey ( $hKey, $sFilePath [, $bReplace = False [, $tSecurity = 0]] ) 以标准格式保存指定键及其子项和值到新文件. (需要: #include <WinAPIReg.au3>)
_WinAPI_RegSetValue ( $hKey, $sValueName, $iType, $tValueData, $iBytes ) 设置注册表项下指定值的数据和类型. (需要: #include <WinAPIReg.au3>)
_WinAPI_ReleaseCapture (  ) 释放当前线程中窗口的鼠标捕获, 并恢复正常的鼠标输入处理. (需要: #include <WinAPI.au3>)
_WinAPI_ReleaseDC ( $hWnd, $hDC ) 释放设备环境 (需要: #include <WinAPI.au3>)
_WinAPI_ReleaseMutex ( $hMutex ) 释放指定互斥对象的所有权. (需要: #include <WinAPIProc.au3>)
_WinAPI_ReleaseSemaphore ( $hSemaphore [, $iIncrease = 1] ) 由指定数量增加指定信号量对象的计数. (需要: #include <WinAPIProc.au3>)
_WinAPI_ReleaseStream ( $pStream ) 释放一个流对象. (需要: #include <WinAPICom.au3>)
_WinAPI_RemoveClipboardFormatListener ( $hWnd ) 删除系统维护剪贴板格式侦听器列表中的指定窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_RemoveDirectory ( $sDirPath ) 删除现有的空目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_RemoveFontMemResourceEx ( $hFont ) 删除内存映像中添加的字体. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RemoveFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] ) 删除系统字体表中指定文件的字体. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RemoveWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass ) 删除窗口的子类回调. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ReOpenFile ( $hFile, $iAccess, $iShare [, $iFlags = 0] ) 使用不同的访问权限, 共享模式, 和标志重新打开指定的文件系统对象. (需要: #include <WinAPIFiles.au3>)
_WinAPI_ReplaceFile ( $sReplacedFile, $sReplacementFile [, $sBackupFile = '' [, $iFlags = 0]] ) 替换文件为另一文件, 并创建原始文件的备份副本. (需要: #include <WinAPIFiles.au3>)
_WinAPI_ReplaceTextDlg ( $hOwner [, $sFindWhat = '' [, $sReplaceWith = '' [, $iFlags = 0 [, $pReplaceProc = 0 [, $lParam = 0]]]]] ) 创建系统定义的无模式对话框, 允许用户可以搜索和替换字符串. (需要: #include <WinAPIDlg.au3>)
_WinAPI_ResetEvent ( $hEvent ) 设置指定事件对象为无信号状态. (需要: #include <WinAPIProc.au3>)
_WinAPI_RestartDlg ( [$sText = '' [, $iFlags = 2 [, $hParent = 0]]] ) 显示系统重新启动对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_RestoreDC ( $hDC, $iID ) 还原设备环境(DC)到指定的状态. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RGB ( $iRed, $iGreen, $iBlue ) 创建红色, 绿色, 蓝色成分的 RGB 颜色值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RotatePoints ( ByRef $aPoint, $iXC, $iYC, $fAngle [, $iStart = 0 [, $iEnd = -1]] ) 旋转数组指定的角度点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_RoundRect ( $hDC, $tRECT, $iWidth, $iHeight ) 绘制圆角矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SaveDC ( $hDC ) 复制选定对象的数据描述与绘制模式到环境堆栈, 以保存指定设备环境(DC)的当前状态. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SaveFileDlg ( [$sTitle = "" [, $sInitDir = "" [, $sFilters = "" [, $iDefaultFilter = 0 [, $sDefaultFilePath = "" [, $sDefaultExt = "" [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] ) 创建允许用户指定驱动器, 目录和文件名的保存对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_SaveHBITMAPToFile ( $sFilePath, $hBitmap [, $iXPelsPerMeter = Default [, $iYPelsPerMeter = Default]] ) 保存指定位图到指定的 .bmp 文件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SaveHICONToFile ( $sFilePath, Const ByRef $vIcon [, $bCompress = 0 [, $iStart = 0 [, $iEnd = -1]]] ) 保存单个或多个图标(HICON)到指定的图标(.ico)文件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ScaleWindowExt ( $hDC, $iXNum, $iXDenom, $iYNum, $iYDenom ) 使用指定的 multiplicands(被乘数) 和 divisors(除数)形成的比率修改设备环境窗口. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ScreenToClient ( $hWnd, ByRef $tPoint ) 转换指定屏幕坐标为客户区坐标. (需要: #include <WinAPI.au3>)
_WinAPI_SearchPath ( $sFilePath [, $sSearchPath = ''] ) 搜索指定路径的指定文件. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SelectClipPath ( $hDC [, $iMode = 5] ) 选择当前路径作为裁剪区域, 并与任何现有的裁剪区域结合. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SelectClipRgn ( $hDC, $hRgn ) 选择指定设备环境的区域作为当前的剪贴区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SelectObject ( $hDC, $hGDIObj ) 选择对象到指定的设备环境. (需要: #include <WinAPI.au3>)
_WinAPI_SendMessageTimeout ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iTimeout = 1000 [, $iFlags = 0]]]] ) 发送指定消息到其它窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_SetActiveWindow ( $hWnd ) 激活指定的窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_SetArcDirection ( $hDC, $iDirection ) 设置绘制弧线的方向. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetBitmapBits ( $hBitmap, $iSize, $pBits ) 设置指定值的位图颜色数据位. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetBitmapDimensionEx ( $hBitmap, $iWidth, $iHeight ) 分配首选尺寸到兼容的位图. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetBkColor ( $hDC, $iColor ) 设置当前背景色为指定的颜色值. (需要: #include <WinAPI.au3>)
_WinAPI_SetBkMode ( $hDC, $iBkMode ) 设置指定设备环境的背景混合模式. (需要: #include <WinAPI.au3>)
_WinAPI_SetBoundsRect ( $hDC, $iFlags [, $tRECT = 0] ) 控制指定设备环境的边界矩形信息的积累. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetBrushOrg ( $hDC, $iX, $iY ) 设置 GDI 分配选择应用到指定设备环境的新画笔(brush)原点. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetCapture ( $hWnd ) 设置鼠标捕获当前线程的指定窗口. (需要: #include <WinAPI.au3>)
_WinAPI_SetCaretBlinkTime ( $iDuration ) 设置插入符的闪烁时间. (需要: #include <WinAPIRes.au3>)
_WinAPI_SetCaretPos ( $iX, $iY ) 移动插入符号到指定的坐标. (需要: #include <WinAPIRes.au3>)
_WinAPI_SetClassLongEx ( $hWnd, $iIndex, $iNewLong ) 替换指定窗口的指定值. (需要: #include <WinAPISys.au3>)
_WinAPI_SetColorAdjustment ( $hDC, $tAdjustment ) 设置设备环境(DC)的色彩调整. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetCompression ( $sFilePath, $iCompression ) 设置文件或目录的压缩状态. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetCurrentDirectory ( $sDir ) 更改当前进程的当前目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetCurrentProcessExplicitAppUserModelID ( $sAppID ) 指定应用程序定义的唯一用户模式 ID, 用于标识当前进程的任务栏. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_SetCursor ( $hCursor ) 建立光标形状. (需要: #include <WinAPI.au3>)
_WinAPI_SetDCBrushColor ( $hDC, $iRGB ) 设置当前设备环境(DC)画刷(brush)颜色为指定的颜色值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetDCPenColor ( $hDC, $iRGB ) 设置当前设备环境(DC)画笔(pen)颜色为指定的颜色值. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetDefaultPrinter ( $sPrinter ) 设置本地计算机当前用户的默认打印机. (需要: #include <WinAPI.au3>)
_WinAPI_SetDeviceGammaRamp ( $hDC, Const ByRef $aRamp ) 设置硬件支持下载伽玛斜面(gamma ramp)的直接彩色显示板. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetDIBColorTable ( $hBitmap, $tColorTable, $iColorCount ) 设置 DIB 区域位图的 RGB 颜色表. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBMI [, $iColorUse = 0] ) 使用 DIB 颜色数据设置兼容的位图像素 (需要: #include <WinAPI.au3>)
_WinAPI_SetDIBitsToDevice ( $hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, $tBITMAPINFO, $iUsage, $pBits ) 设置设备指定矩形的像素. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetDllDirectory ( [$sDirPath = Default] ) 添加应用程序 DLL 目录到搜索路径中. (需要: #include <WinAPISys.au3>)
_WinAPI_SetEndOfFile ( $hFile ) 设置当前位置指针指定文件的物理文件大小. (需要: #include <WinAPI.au3>)
_WinAPI_SetEnhMetaFileBits ( $pData, $iLength ) 创建基于内存指定数据格式的增强图元文件. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetErrorMode ( $iMode ) 确定控制系统或进程是否处理指定类型的严重错误. (需要: #include <WinAPIDiag.au3>)
_WinAPI_SetEvent ( $hEvent ) 设置指定事件对象的信号状态 (需要: #include <WinAPI.au3>)
_WinAPI_SetFileAttributes ( $sFilePath, $iAttributes ) 设置文件或目录的属性. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetFileInformationByHandleEx ( $hFile, $tFILEINFO ) 设置指定文件的文件信息. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetFilePointer ( $hFile, $iPos [, $iMethod = 0] ) 移动指定文件的文件指针. (需要: #include <WinAPI.au3>)
_WinAPI_SetFilePointerEx ( $hFile, $iPos [, $iMethod = 0] ) 移动指定文件的文件指针. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetFileShortName ( $hFile, $sShortName ) 设置指定文件的短名称. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetFileValidData ( $hFile, $iLength ) 设置指定文件的有效数据长度. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetFocus ( $hWnd ) 设置键盘焦点到指定的窗口. (需要: #include <WinAPI.au3>)
_WinAPI_SetFont ( $hWnd, $hFont [, $bRedraw = True] ) 设置窗口的字体. (需要: #include <WinAPI.au3>)
_WinAPI_SetForegroundWindow ( $hWnd ) 设置指定窗口到前台并激活. (需要: #include <WinAPISys.au3>)
_WinAPI_SetFRBuffer ( $iChars ) 设置 _WinAPI_FindTextDlg() 与 _WinAPI_ReplaceTextDlg() 函数使用的内部缓冲区大小. (需要: #include <WinAPIDlg.au3>)
_WinAPI_SetGraphicsMode ( $hDC, $iMode ) 设置指定设备环境的图形模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetHandleInformation ( $hObject, $iMask, $iFlags ) 设置对象句柄的属性. (需要: #include <WinAPI.au3>)
_WinAPI_SetInformationJobObject ( $hJob, $iJobObjectInfoClass, $tJobObjectInfo ) 设置作业对象的限制. (需要: #include <WinAPIProc.au3>)
_WinAPI_SetKeyboardLayout ( $hWnd, $iLanguage [, $iFlags = 0] ) 设置指定窗口的输入法区域标识符. (需要: #include <WinAPISys.au3>)
_WinAPI_SetKeyboardState ( $tState ) 拷贝键盘状态数组(256 字节)到调用进程的键盘输入状态表. (需要: #include <WinAPISys.au3>)
_WinAPI_SetLastError ( $iErrorCode ) 设置调用线程的最后错误代码. (需要: #include <WinAPI.au3>)
_WinAPI_SetLayeredWindowAttributes ( $hWnd, $iTransColor [, $iTransGUI = 255 [, $iFlags = 0x03 [, $bColorRef = False]]] ) 设置分层窗口(透明)属性. (需要: #include <WinAPI.au3>)
_WinAPI_SetLocaleInfo ( $iLCID, $iType, $sData ) 设置当前语言环境用户替换部分的项目信息. (需要: #include <WinAPILocale.au3>)
_WinAPI_SetMapMode ( $hDC, $iMode ) 设置指定设备环境的映射模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetMessageExtraInfo ( $lParam ) 设置当前线程的额外消息. (需要: #include <WinAPISys.au3>)
_WinAPI_SetParent ( $hWndChild, $hWndParent ) 更改指定子窗口的父窗口. (需要: #include <WinAPI.au3>)
_WinAPI_SetPixel ( $hDC, $iX, $iY, $iRGB ) 设置指定坐标的像素为指定颜色. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetPolyFillMode ( $hDC [, $iMode = 1] ) 设置多边形填充函数的填充模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetPriorityClass ( $iPriority [, $iPID = 0] ) 设置指定进程的优先级. (需要: #include <WinAPIProc.au3>)
_WinAPI_SetProcessAffinityMask ( $hProcess, $iMask ) 设置指定进程的线程处理的相似掩码 (需要: #include <WinAPI.au3>)
_WinAPI_SetProcessShutdownParameters ( $iLevel [, $bDialog = False] ) 设置系统进程相关的其它进程的关机(shutdown)顺序. (需要: #include <WinAPISys.au3>)
_WinAPI_SetProcessWindowStation ( $hStation ) 分配指定窗口站到调用进程. (需要: #include <WinAPISys.au3>)
_WinAPI_SetRectRgn ( $hRgn, $tRECT ) 转换区域指定坐标的矩形区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetROP2 ( $hDC, $iMode ) 检索指定设备环境的前台混合操作模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetSearchPathMode ( $iFlags ) 设置 _WinAPI_SearchPath() 函数查找文件时使用的每个进程的模式. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetStretchBltMode ( $hDC, $iMode ) 设置指定设备环境的位图拉伸模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetSysColors ( $vElements, $vColors ) 获取系统显示设备的信息 (需要: #include <WinAPI.au3>)
_WinAPI_SetSystemCursor ( $hCursor, $iID [, $bCopy = False] ) 允许应用程序定制系统光标. (需要: #include <WinAPIRes.au3>)
_WinAPI_SetTextAlign ( $hDC [, $iMode = 0] ) 设置指定设备环境的文本对齐标志. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetTextCharacterExtra ( $hDC, $iCharExtra ) 设置指定设备的字符间距. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetTextColor ( $hDC, $iColor ) 设置当前文本颜色为指定的颜色值 (需要: #include <WinAPI.au3>)
_WinAPI_SetTextJustification ( $hDC, $iBreakExtra, $iBreakCount ) 指定应添加到文本字符串的系统空间量. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetThemeAppProperties ( $iFlags ) 设置如何在调用应用程序中实现视觉样式的标志. (需要: #include <WinAPITheme.au3>)
_WinAPI_SetThreadDesktop ( $hDesktop ) 分配指定桌面到调用线程. (需要: #include <WinAPIProc.au3>)
_WinAPI_SetThreadErrorMode ( $iMode ) 控制系统是否处理指定类型的严重错误, 或是否调用线程处理. (需要: #include <WinAPIProc.au3>)
_WinAPI_SetThreadExecutionState ( $iFlags ) 防止应用程序运行时系统进入睡眠或关闭显示器. (需要: #include <WinAPIProc.au3>)
_WinAPI_SetThreadLocale ( $iLCID ) 设置调用线程的当前语言环境. (需要: #include <WinAPILocale.au3>)
_WinAPI_SetThreadUILanguage ( $iLanguage ) 设置当前线程的用户界面语言. (需要: #include <WinAPILocale.au3>)
_WinAPI_SetTimer ( $hWnd, $iTimerID, $iElapse, $pTimerFunc ) 创建指定超时值的计时器. (需要: #include <WinAPISys.au3>)
_WinAPI_SetUDFColorMode ( $iMode ) 设置 WinAPIEx 库的颜色模式. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetUserGeoID ( $iGEOID ) 设置用户的地理位置标识. (需要: #include <WinAPILocale.au3>)
_WinAPI_SetUserObjectInformation ( $hObject, $iIndex, $tData ) 设置指定窗口站或桌面对象的信息. (需要: #include <WinAPISys.au3>)
_WinAPI_SetVolumeMountPoint ( $sFilePath, $sGUID ) 驱动器号关联到卷或另一个卷的目录. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SetWindowDisplayAffinity ( $hWnd, $iAffinity ) 显示指定窗口存储在内核模式下的相似设置. (需要: #include <WinAPISys.au3>)
_WinAPI_SetWindowExt ( $hDC, $iXExtent, $iYExtent ) 设置窗口设备环境指定值的横向和纵向扩展. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetWindowLong ( $hWnd, $iIndex, $iValue ) 设置指定窗口的信息 (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowOrg ( $hDC, $iX, $iY ) 指定窗口点映射到视口原点 (0,0). (需要: #include <WinAPIGdi.au3>)
_WinAPI_SetWindowPlacement ( $hWnd, $tWindowPlacement ) 设置窗口的最小, 最大和正常位置 (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowPos ( $hWnd, $hAfter, $iX, $iY, $iCX, $iCY, $iFlags ) 变动子窗口, 弹出窗口, 或顶层窗口的大小, 位置和 Z 序 (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowRgn ( $hWnd, $hRgn [, $bRedraw = True] ) 设置窗口的窗口区域. (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowsHookEx ( $iHook, $pProc, $hDll [, $iThreadId = 0] ) 安装应用程序定义的钩子程序到钩子链. (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass [, $pData = 0] ) 安装或更新窗口子类回调. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_SetWindowText ( $hWnd, $sText ) 更改指定窗口的标题栏文本 (需要: #include <WinAPI.au3>)
_WinAPI_SetWindowTheme ( $hWnd [, $sName = 0 [, $sList = 0]] ) 设置窗口的不同视觉样式信息. (需要: #include <WinAPITheme.au3>)
_WinAPI_SetWinEventHook ( $iEventMin, $iEventMax, $pEventProc [, $iPID = 0 [, $iThreadId = 0 [, $iFlags = 0]]] ) 设置事件钩子函数的系列事件. (需要: #include <WinAPISys.au3>)
_WinAPI_SetWorldTransform ( $hDC, $tXFORM ) 设置指定设备环境通用空间和页面空间的二维线性变换. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SfcIsFileProtected ( $sFilePath ) 确定指定文件是否被保护. (需要: #include <WinAPIFiles.au3>)
_WinAPI_SfcIsKeyProtected ( $hKey [, $sSubKey = Default [, $iFlag = 0]] ) 确定指定注册表项是否被保护. (需要: #include <WinAPIReg.au3>)
_WinAPI_ShellAboutDlg ( $sTitle, $sName, $sText [, $hIcon = 0 [, $hParent = 0]] ) 显示 Windows 的关于对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_ShellAddToRecentDocs ( $sFilePath ) 添加文件到最近和经常使用的项目列表. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotify ( $iEvent, $iFlags [, $iItem1 = 0 [, $iItem2 = 0]] ) 通知系统应用程序已完成的事件. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotifyDeregister ( $iID ) 注销客户端窗口. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotifyRegister ( $hWnd, $iMsg, $iEvents, $iSources, $aPaths [, $bRecursive = False] ) 注册接收文件系统或 Shell 通知的窗口. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellCreateDirectory ( $sFilePath [, $hParent = 0 [, $tSecurity = 0]] ) 创建一个新的文件系统文件夹. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellEmptyRecycleBin ( [$sRoot = '' [, $iFlags = 0 [, $hParent = 0]]] ) 清空指定驱动器的回收站. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExecute ( $sFilePath [, $sArgs = '' [, $sDir = '' [, $sVerb = '' [, $iShow = 1 [, $hParent = 0]]]]] ) 执行指定文件的操作. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExecuteEx ( ByRef $tSHEXINFO ) 执行一个指定文件的操作. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExtractAssociatedIcon ( $sFilePath [, $bSmall = False] ) 返回指定文件关联的图标句柄. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExtractIcon ( $sIcon, $iIndex, $iWidth, $iHeight ) 提取指定文件与指定尺寸的图标. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellFileOperation ( $sFrom, $sTo, $iFunc, $iFlags [, $sTitle = '' [, $hParent = 0]] ) 复制, 移动, 重命名或删除文件系统对象. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellFlushSFCache (  ) 刷新特殊文件夹的缓存. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetFileInfo ( $sFilePath, $iFlags, $iAttributes, ByRef $tSHFILEINFO ) 检索文件系统中有关对象的信息. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetIconOverlayIndex ( $sIcon, $iIndex ) 检索系统图像列表覆盖图标的索引. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetImageList ( [$bSmall = False] ) 检索系统图像列表的大, 小图标. (需要: #include <WinAPIShPath.au3>)
_WinAPI_ShellGetKnownFolderIDList ( $sGUID [, $iFlags = 0 [, $hToken = 0]] ) 检索 ITEMIDLIST 结构已知文件夹的路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetKnownFolderPath ( $sGUID [, $iFlags = 0 [, $hToken = 0]] ) 检索已知文件夹的完整路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetLocalizedName ( $sFilePath ) 检索 Shell 文件夹文件的本地化名称. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetPathFromIDList ( $pPIDL ) 转换项目标识符列表到文件系统路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSetFolderCustomSettings ( $sFilePath, $iFlag, ByRef $tSHFCS ) 设置或检索自定义文件夹. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSettings ( $iFlags ) 检索处理程序(Shell)的状态设置. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSpecialFolderLocation ( $iCSIDL ) 检索特殊文件夹 ITEMIDLIST 结构(PIDL )的指针. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSpecialFolderPath ( $iCSIDL [, $bCreate = False] ) 检索特殊文件夹的路径. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetStockIconInfo ( $iSIID, $iFlags ) 检索系统定义的 Shell 图标信息. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellILCreateFromPath ( $sFilePath ) 创建路径中项目标识符列表(PIDL)的指针. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellNotifyIcon ( $iMessage, $tNOTIFYICONDATA ) 发送消息到任务栏的状态区域. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellNotifyIconGetRect ( $hWnd, $iID [, $tGUID = 0] ) 获取通知图标边界矩形的屏幕坐标. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellObjectProperties ( $sFilePath [, $iType = 2 [, $sProperty = '' [, $hParent = 0]]] ) 调用 Shell 对象属性上下文菜单命令. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellOpenFolderAndSelectItems ( $sFilePath [, $aNames = 0 [, $iStart = 0 [, $iEnd = -1 [, $iFlags = 0]]]] ) 打开 Windows 资源管理器窗口, 选择特定文件夹的指定的项目. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellOpenWithDlg ( $sFilePath [, $iFlags = 0 [, $hParent = 0]] ) 显示打开方式对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_ShellQueryRecycleBin ( [$sRoot = ''] ) 检索指定驱动器回收站的大小及其项目数量. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellQueryUserNotificationState (  ) 检查当前用户计算机的状态. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellRemoveLocalizedName ( $sFilePath ) 删除 Shell 文件夹文件的本地化名称. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellRestricted ( $iRestriction ) 确定指定管理员策略是否有效. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetKnownFolderPath ( $sGUID, $sFilePath [, $iFlags = 0 [, $hToken = 0]] ) 重定向已知文件夹到新的位置. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetLocalizedName ( $sFilePath, $sModule, $iResID ) 设置 Shell 文件夹文件的本地化名称. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetSettings ( $iFlags, $bSet ) 置位处理程序(Shell)的状态设置. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellStartNetConnectionDlg ( [$sRemote = '' [, $iFlags = 0 [, $hParent = 0]]] ) 显示网络资源连接的一般浏览对话框. (需要: #include <WinAPIDlg.au3>)
_WinAPI_ShellUpdateImage ( $sIcon, $iIndex, $iImage [, $iFlags = 0] ) 通知 Shell that 系统图像列表中的图像已更改. (需要: #include <WinAPIShellEx.au3>)
_WinAPI_ShellUserAuthenticationDlg ( $sCaption, $sMessage, $sUser, $sPassword, $sTarget [, $iFlags = 0 [, $iError = 0 [, $bSave = False [, $hBitmap = 0 [, $hParent = 0]]]]] ) 创建并显示一个可配置的对话框, 接受用户的凭据信息. (需要: #include <WinAPIDlg.au3>)
_WinAPI_ShellUserAuthenticationDlgEx ( $sCaption, $sMessage, $sUser, $sPassword [, $iFlags = 0 [, $iAuthError = 0 [, $bSave = False [, $iPackage = 0 [, $hParent = 0]]]]] ) 创建并显示一个可配置的对话框, 接受用户的凭据信息(Ex). (需要: #include <WinAPIDlg.au3>)
_WinAPI_ShortToWord ( $iValue ) 转换 SHORT 类型值为 WORD 类型值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_ShowCaret ( $hWnd ) 使插入符的当前位置在屏幕上可见. (需要: #include <WinAPIRes.au3>)
_WinAPI_ShowCursor ( $bShow ) 显示或隐藏光标. (需要: #include <WinAPI.au3>)
_WinAPI_ShowError ( $sText [, $bExit = True] ) 显示一个带有可选退出的错误消息(显示)框 (需要: #include <WinAPI.au3>)
_WinAPI_ShowLastError ( [$sText = '' [, $bAbort = False [, $iLanguage = 0]]] ) 显示上次错误代码和消息. (需要: #include <WinAPIDiag.au3>)
_WinAPI_ShowMsg ( $sText ) 显示一个"信息"消息框 (需要: #include <WinAPI.au3>)
_WinAPI_ShowOwnedPopups ( $hWnd, $bShow ) 显示或隐藏指定窗口拥有的所有弹出窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_ShowWindow ( $hWnd [, $iCmdShow = 5] ) 设置指定窗口的显示状态. (需要: #include <WinAPI.au3>)
_WinAPI_ShutdownBlockReasonCreate ( $hWnd, $sText ) 当系统无法关闭时, 设置显示给用户的故障原因字符串. (需要: #include <WinAPISys.au3>)
_WinAPI_ShutdownBlockReasonDestroy ( $hWnd ) 指示系统可以关机, 并释放解释原因的字符串. (需要: #include <WinAPISys.au3>)
_WinAPI_ShutdownBlockReasonQuery ( $hWnd ) 检索 _WinAPI_ShutdownBlockReasonCreate() 函数设置的(解释错误)原因的字符串. (需要: #include <WinAPISys.au3>)
_WinAPI_SizeOfResource ( $hInstance, $hResource ) 返回指定资源的字节大小值. (需要: #include <WinAPIRes.au3>)
_WinAPI_StretchBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop ) 复制源矩形位图到目标矩形, 如有必要, 拉伸或压缩位图以适应目标矩形的尺寸. (需要: #include <WinAPIGdi.au3>)
_WinAPI_StretchDIBits ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $tBITMAPINFO, $iUsage, $pBits, $iRop ) 复制 DIB, JPEG 或PNG 图像像素矩形的颜色数据到指定的目标矩形,如有必要, 使用指定的光栅操作拉伸或压缩行和列. (需要: #include <WinAPIGdi.au3>)
_WinAPI_StrFormatByteSize ( $iSize ) 转换数字值为字节, 千字节(KB), 兆字节(MB)或千兆字节(GB)的字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_StrFormatByteSizeEx ( $iSize ) 转换未分段字节数值字符串为分段字节数值字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_StrFormatKBSize ( $iSize ) 转换字节值字符串为千字节单位的字符串. (需要: #include <WinAPIMisc.au3>)
_WinAPI_StrFromTimeInterval ( $iTime [, $iDigits = 7] ) 转换数字格式时间为字符串格式的时间. (需要: #include <WinAPIMisc.au3>)
_WinAPI_StringFromGUID ( $tGUID ) 转换二进制 GUID 为字符串形式. (需要: #include <WinAPI.au3>)
_WinAPI_StringLenA ( Const ByRef $tString ) 计算 ANSI 字符串的大小. (需要: #include <WinAPI.au3>)
_WinAPI_StringLenW ( Const ByRef $tString ) 计算宽字符串的大小. (需要: #include <WinAPI.au3>)
_WinAPI_StrLen ( $pString [, $bUnicode = True] ) 返回指定字符串的长度. (需要: #include <WinAPIMisc.au3>)
_WinAPI_StrokeAndFillPath ( $hDC ) 关闭路径中任何打开的图形(figures), 描述路径的轮廓, 并填充内部. (需要: #include <WinAPIGdi.au3>)
_WinAPI_StrokePath ( $hDC ) 使用当前画笔(pen)呈现指定的路径. (需要: #include <WinAPIGdi.au3>)
_WinAPI_StructToArray ( $tStruct [, $iItems = 0] ) 转换结构为字符串数组. (需要: #include <WinAPIMisc.au3>)
_WinAPI_SubLangId ( $iLngID ) 从语言 ID 提取子语言 ID (需要: #include <WinAPI.au3>)
_WinAPI_SubtractRect ( $tRECT1, $tRECT2 ) 计算矩形减去另一个矩形后, 余下矩形的坐标. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SwapDWord ( $iValue ) 转换 little-endian(小端) ULONG 为 big-endian(大端), 反之亦然. (需要: #include <WinAPIMisc.au3>)
_WinAPI_SwapQWord ( $iValue ) 将 ULONGLONG 从大端(Big Endian)转换为小端(Little Endian), 反之亦然. (需要: #include <WinAPIMisc.au3>)
_WinAPI_SwapWord ( $iValue ) 将 USHORT 从大端(Big Endian)转换为小端(Little Endian), 反之亦然. (需要: #include <WinAPIMisc.au3>)
_WinAPI_SwitchColor ( $iColor ) 转换 BGR 颜色为 RGB 颜色, 或反之. (需要: #include <WinAPIGdi.au3>)
_WinAPI_SwitchDesktop ( $hDesktop ) 使指定的桌面可见并激活它. (需要: #include <WinAPISys.au3>)
_WinAPI_SwitchToThisWindow ( $hWnd [, $bAltTab = False] ) 切换焦点到指定窗口, 并将其置为前景窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_SystemParametersInfo ( $iAction [, $iParam = 0 [, $vParam = 0 [, $iWinIni = 0]]] ) 检索或设置全系统(system-wide)参数的值 (需要: #include <WinAPI.au3>)
_WinAPI_TabbedTextOut ( $hDC, $iX, $iY, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1 [, $iOrigin = 0]]]] ) 写指定位置的字符串, 并扩展制表符到指定的制表位位置. (需要: #include <WinAPIGdi.au3>)
_WinAPI_TerminateJobObject ( $hJob [, $iExitCode = 0] ) 终止目前与工作相关的所有进程. (需要: #include <WinAPIProc.au3>)
_WinAPI_TerminateProcess ( $hProcess [, $iExitCode = 0] ) 终止指定进程和它所有线程. (需要: #include <WinAPIProc.au3>)
_WinAPI_TextOut ( $hDC, $iX, $iY, $sText ) 使用当前选定字体, 背景颜色和文字颜色写入字符串到指定位置. (需要: #include <WinAPIGdi.au3>)
_WinAPI_TileWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] ) 平铺显示指定父窗口的子窗口. (需要: #include <WinAPISys.au3>)
_WinAPI_TrackMouseEvent ( $hWnd, $iFlags [, $iTime = -1] ) 发送鼠标离开或悬停窗口的指定时间量的消息. (需要: #include <WinAPISys.au3>)
_WinAPI_TransparentBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB ) 传输颜色数据位块到对应的像素矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_TwipsPerPixelX (  ) 检索一个像素的宽度, 以缇为单位. (需要: #include <WinAPI.au3>)
_WinAPI_TwipsPerPixelY (  ) 检索一个像素的高度，以缇为单位. (需要: #include <WinAPI.au3>)
_WinAPI_UnhookWindowsHookEx ( $hHook ) 移除 _WinAPI_SetWindowsHookEx 函数在钩子链中安装的钩子程序 (需要: #include <WinAPI.au3>)
_WinAPI_UnhookWinEvent ( $hEventHook ) 删除事件钩子函数. (需要: #include <WinAPISys.au3>)
_WinAPI_UnionRect ( $tRECT1, $tRECT2 ) 合并两个矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_UnionStruct ( $tStruct1, $tStruct2 [, $sStruct = ''] ) 创建两个结构的结构. (需要: #include <WinAPIMisc.au3>)
_WinAPI_UniqueHardwareID ( [$iFlags = 0] ) 生成本地计算机唯一硬件标识符(ID). (需要: #include <WinAPIDiag.au3>)
_WinAPI_UnloadKeyboardLayout ( $hLocale ) 卸载输入法区域设置标识符. (需要: #include <WinAPISys.au3>)
_WinAPI_UnlockFile ( $hFile, $iOffset, $iLength ) 解锁已打开文件的锁定区域. (需要: #include <WinAPIFiles.au3>)
_WinAPI_UnmapViewOfFile ( $pAddress ) 取消调用进程地址空间的文件映射视图. (需要: #include <WinAPIFiles.au3>)
_WinAPI_UnregisterApplicationRestart (  ) 删除重新启动列表中应用程序的有效实例. (需要: #include <WinAPIDiag.au3>)
_WinAPI_UnregisterClass ( $sClass [, $hInstance = 0] ) 注销窗口类, 释放类占用的内存. (需要: #include <WinAPISys.au3>)
_WinAPI_UnregisterHotKey ( $hWnd, $iID ) 释放以前调用线程注册的热键. (需要: #include <WinAPISys.au3>)
_WinAPI_UnregisterPowerSettingNotification ( $hNotify ) 注销电源设置通知. (需要: #include <WinAPISys.au3>)
_WinAPI_UpdateLayeredWindow ( $hWnd, $hDestDC, $tPTDest, $tSize, $hSrcDC, $tPTSrce, $iRGB, $tBlend, $iFlags ) 更新分层窗口的位置, 大小, 形状, 内容和半透明度. (需要: #include <WinAPI.au3>)
_WinAPI_UpdateLayeredWindowEx ( $hWnd, $iX, $iY, $hBitmap [, $iOpacity = 255 [, $bDelete = False]] ) 更新分层窗口半透明位图. (需要: #include <WinAPISys.au3>)
_WinAPI_UpdateLayeredWindowIndirect ( $hWnd, $tULWINFO ) 更新分层窗口的位置, 大小, 形状, 内容, 和半透明. (需要: #include <WinAPISys.au3>)
_WinAPI_UpdateResource ( $hUpdate, $sType, $sName, $iLanguage, $pData, $iSize ) 添加, 删除或替换可移植可执行(PE)文件的资源. (需要: #include <WinAPIRes.au3>)
_WinAPI_UpdateWindow ( $hWnd ) 发送 WM_PAINT 消息更新窗口的客户区 (需要: #include <WinAPI.au3>)
_WinAPI_UrlApplyScheme ( $sUrl [, $iFlags = 1] ) 确定指定 URL 字符串的方案, 并返回一个适当的前缀字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlCanonicalize ( $sUrl, $iFlags ) 转换 URL 字符串为规范形式. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlCombine ( $sUrl, $sPart [, $iFlags = 0] ) 结合基本相对 URL 的规范形式. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlCompare ( $sUrl1, $sUrl2 [, $bIgnoreSlash = False] ) 获取两个 URL 字符串区分大小写的比较. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlCreateFromPath ( $sFilePath ) 转换 Microsoft MS-DOS 路径到规范的 URL. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlFixup ( $sUrl ) 修正 URL 不正确的协议标识符. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlGetPart ( $sUrl, $iPart ) 检索 URL 的指定部分. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlHash ( $sUrl [, $iLength = 32] ) 哈希(Hashes) URL 字符串. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UrlIs ( $sUrl [, $iType = 0] ) 测试 URL 是否为指定的类型. (需要: #include <WinAPIShPath.au3>)
_WinAPI_UserHandleGrantAccess ( $hObject, $hJob, $bGrant ) 授予或拒绝访问用户对象工作句柄的用户界面限制. (需要: #include <WinAPIProc.au3>)
_WinAPI_ValidateRect ( $hWnd [, $tRECT = 0] ) 删除当前指定窗口更新区域中的一个矩形. (需要: #include <WinAPIGdi.au3>)
_WinAPI_ValidateRgn ( $hWnd [, $hRgn = 0] ) 删除当前指定窗口更新区域中一个区域. (需要: #include <WinAPIGdi.au3>)
_WinAPI_VerQueryRoot ( $pData ) 检索指定版本信息资源的固定版本信息. (需要: #include <WinAPIRes.au3>)
_WinAPI_VerQueryValue ( $pData [, $sValues = ''] ) 检索指定版本信息资源的非固定(字符串)版本信息. (需要: #include <WinAPIRes.au3>)
_WinAPI_VerQueryValueEx ( $hModule [, $sValues = '' [, $iLanguage = 0x0400]] ) 检索指定二进制模块的版本信息资源的文本信息. (需要: #include <WinAPIRes.au3>)
_WinAPI_WaitForInputIdle ( $hProcess [, $iTimeout = -1] ) 等待, 直到进程等待用户输入, 或没有输入挂起, 或超时 (需要: #include <WinAPI.au3>)
_WinAPI_WaitForMultipleObjects ( $iCount, $paHandles [, $bWaitAll = False [, $iTimeout = -1]] ) 等待, 直到一或所有指定对象处于信号状态. (需要: #include <WinAPI.au3>)
_WinAPI_WaitForSingleObject ( $hHandle [, $iTimeout = -1] ) 等待, 直到指定的对象是在信号状态. (需要: #include <WinAPI.au3>)
_WinAPI_WideCharToMultiByte ( $vUnicode [, $iCodePage = 0 [, $bRetString = True]] ) 转换 Unicode 字符串为多字节字符串. (需要: #include <WinAPI.au3>)
_WinAPI_WidenPath ( $hDC ) 重新定义将要绘制区域的当前路径. (需要: #include <WinAPIGdi.au3>)
_WinAPI_WindowFromDC ( $hDC ) 检索指定显示设备环境(DC)关联的窗口句柄. (需要: #include <WinAPIGdi.au3>)
_WinAPI_WindowFromPoint ( ByRef $tPoint ) 检索包含指定点的窗口句柄. (需要: #include <WinAPI.au3>)
_WinAPI_WordToShort ( $iValue ) 转换 WORD 类型值为 SHORT 类型值. (需要: #include <WinAPIMisc.au3>)
_WinAPI_Wow64EnableWow64FsRedirection ( $bEnable ) 启用或禁用调用线程的文件系统重定向. (需要: #include <WinAPIFiles.au3>)
_WinAPI_WriteConsole ( $hConsole, $sText ) 写字符串到控制台屏幕缓冲区. (需要: #include <WinAPI.au3>)
_WinAPI_WriteFile ( $hFile, $pBuffer, $iToWrite, ByRef $iWritten [, $tOverlapped = 0] ) 数据写入到文件, 写入位置由文件指针指定. (需要: #include <WinAPI.au3>)
_WinAPI_WriteProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iWritten [, $sBuffer = "ptr"] ) 写指定进程的内存. (需要: #include <WinAPI.au3>)
_WinAPI_ZeroMemory ( $pMemory, $iLength ) 用 0 填充内存块. (需要: #include <WinAPISys.au3>)
_WinNet_AddConnection ( $sLocalName, $sRemoteName [, $sPassword = 0] ) 连接本地设备到网络资源.(1) (需要: #include <WinNet.au3>)
_WinNet_AddConnection2 ( $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) 连接本地设备到网络资源.(2) (需要: #include <WinNet.au3>)
_WinNet_AddConnection3 ( $hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) 连接本地设备到网络资源.(3) (需要: #include <WinNet.au3>)
_WinNet_CancelConnection ( $sName [, $bForce = True] ) 取消现有的网络连接 (需要: #include <WinNet.au3>)
_WinNet_CancelConnection2 ( $sName [, $bUpdate = True [, $bForce = True]] ) 取消现有的网络连接(2) (需要: #include <WinNet.au3>)
_WinNet_CloseEnum ( $hEnum ) 结束调用 _WinNet_OpenEnum() 启动的网络资源枚举. (需要: #include <WinNet.au3>)
_WinNet_ConnectionDialog ( $hWnd ) 启动连接到网络资源的一般浏览对话框. (需要: #include <WinNet.au3>)
_WinNet_ConnectionDialog1 ( $hWnd [, $sRemoteName = "" [, $iFlags = 2]] ) 启动连接到网络资源的一般浏览对话框(1). (需要: #include <WinNet.au3>)
_WinNet_DisconnectDialog ( $hWnd ) 启动断开网络资源对话框.(1) (需要: #include <WinNet.au3>)
_WinNet_DisconnectDialog1 ( $hWnd, $sLocalName [, $sRemoteName = "" [, $iFlags = 1]] ) 启动断开网络资源对话框.(1) (需要: #include <WinNet.au3>)
_WinNet_EnumResource ( $hEnum, ByRef $iCount, $pBuffer, ByRef $iBufSize ) 继续枚举网络资源. (需要: #include <WinNet.au3>)
_WinNet_GetConnection ( $sLocalName ) 检索与本地设备相关的网络资源名称. (需要: #include <WinNet.au3>)
_WinNet_GetConnectionPerformance ( $sLocalName, $sRemoteName ) 返回资源网络连接的性能信息. (需要: #include <WinNet.au3>)
_WinNet_GetLastError ( ByRef $iError, ByRef $sError, ByRef $sName ) 检索最新的扩展错误. (需要: #include <WinNet.au3>)
_WinNet_GetNetworkInformation ( $sName ) 返回特定网络供应商扩展信息 (需要: #include <WinNet.au3>)
_WinNet_GetProviderName ( $iType ) 获取特定类型网络的供应商名称. (需要: #include <WinNet.au3>)
_WinNet_GetResourceInformation ( $sRemoteName [, $sProvider = "" [, $iType = 0]] ) 标识拥有网络资源的供应商. (需要: #include <WinNet.au3>)
_WinNet_GetResourceParent ( $sRemoteName, $sProvider [, $iType = 0] ) 返回网络浏览层次结构的父网络资源 (需要: #include <WinNet.au3>)
_WinNet_GetUniversalName ( $sLocalPath ) 转换驱动路径到通用格式. (需要: #include <WinNet.au3>)
_WinNet_GetUser ( $sName ) 检索默认的用户名, 或用于建立连接的用户名. (需要: #include <WinNet.au3>)
_WinNet_OpenEnum ( $iScope, $iType, $iUsage, $tResource, ByRef $hEnum ) 开始枚举网络资源或现有的连接. (需要: #include <WinNet.au3>)
_WinNet_RestoreConnection ( [$sDevice = "" [, $hWnd = 0 [, $bUseUI = True]]] ) 恢复网络资源的连接. (需要: #include <WinNet.au3>)
_WinNet_UseConnection ( $hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) 连接本地设备到网络资源.(4) (需要: #include <WinNet.au3>)
_Word_Create ( [$bVisible = True [, $bForceNew = False]] ) 连接到现有 Word 实例, 或创建一个新的 Word 应用对象 (需要: #include <Word.au3>)
_Word_DocAdd ( $oAppl [, $iDocumentType = $WdNewBlankDocument [, $sDocumentTemplate = "" [, $bNewTemplate = False]]] ) 添加一个新的或空的文件到指定的 Word 应用程序 (需要: #include <Word.au3>)
_Word_DocAttach ( $oAppl, $sString [, $sMode = "FilePath" [, $iCase = 0]] ) 根据所选择的模式附加字符串搜索到 Word 第一个文档实例, 搜索匹配字符串. (需要: #include <Word.au3>)
_Word_DocClose ( $oDoc [, $iSaveChanges = $WdDoNotSaveChanges [, $iOriginalFormat = $WdOriginalDocumentFormat]] ) 关闭指定的 Word 文档. (需要: #include <Word.au3>)
_Word_DocExport ( $oDoc, $sFileName [, $iFormat = $WdExportFormatPDF [, $iRange = $WdExportAllDocument [, $iFrom = Default [, $iTo = Default [, $bOpenAfterExport = False [, $bIncludeProperties = True [, $iCreateBookmarks = Default [, $bUseISO19005 = False]]]]]]]] ) 导出文档或指定范围为 PDF 或 XPS 文件. (需要: #include <Word.au3>)
_Word_DocFind ( $oDoc [, $sFindText = "" [, $vSearchRange = 0 [, $oFindRange = Default [, $bForward = True [, $bMatchCase = False [, $bMatchWholeWord = False [, $bMatchWildcards = False [, $bMatchSoundsLike = False [, $bMatchAllWordForms = False [, $bFormat = False]]]]]]]]]] ) 运行或重复指定的查找操作. (需要: #include <Word.au3>)
_Word_DocFindReplace ( $oDoc [, $sFindText = "" [, $sReplaceWith = "" [, $iReplace = $WdReplaceAll [, $vSearchRange = 0 [, $bMatchCase = False [, $bMatchWholeWord = False [, $bMatchWildcards = False [, $bMatchSoundsLike = False [, $bMatchAllWordForms = False [, $bForward = True [, $iWrap = $WdFindContinue [, $bFormat = False]]]]]]]]]]]] ) 运行指定的查找和替换操作. (需要: #include <Word.au3>)
_Word_DocGet ( $oAppl [, $vIndex = -1] ) 返回一个集合对象, 该对象包含所有文档或单个文档对象. (需要: #include <Word.au3>)
_Word_DocLinkAdd ( $oDoc [, $oAnchor = Default [, $sAddress = Default [, $sSubAddress = Default [, $sScreenTip = Default [, $sTextToDisplay = Default [, $sTarget = Default]]]]]] ) 添加一个超链接到文档中. (需要: #include <Word.au3>)
_Word_DocLinkGet ( $oDoc [, $iIndex = Default] ) 返回一个包含文档或单个链接对象所有链接的集合对象 (需要: #include <Word.au3>)
_Word_DocOpen ( $oAppl, $sFilePath [, $bConfirmConversions = False [, $iFormat = $WdOpenFormatAuto [, $bReadOnly = False [, $bRevert = False [, $bAddToRecentFiles = False [, $sOpenPassword = "" [, $sWritePassword = ""]]]]]]] ) 打开一个 Word 文档. (需要: #include <Word.au3>)
_Word_DocPictureAdd ( $oDoc, $sFilePath [, $bLinkToFile = False [, $bSaveWithDocument = False [, $oRange = 0]]] ) 添加图片到文档. (需要: #include <Word.au3>)
_Word_DocPrint ( $oDoc [, $bBackground = False [, $iCopies = 1 [, $iOrientation = -1 [, $bCollate = True [, $sPrinter = "" [, $iRange = $WdPrintAllDocument [, $vFrom = 0 [, $vTo = 0 [, $sPages = "" [, $iPageType = $WdPrintAllPages [, $iItem = $WdPrintDocumentContent]]]]]]]]]]] ) 打印指定文档的全部或部分. (需要: #include <Word.au3>)
_Word_DocRangeSet ( $oDoc, $vRange [, $iStartUnit = Default [, $iStartCount = Default [, $iEndUnit = Default [, $iEndCount = Default]]]] ) 设置或修改文档中的一个范围. (需要: #include <Word.au3>)
_Word_DocSave ( $oDoc ) 保存指定的 Word 文档. (需要: #include <Word.au3>)
_Word_DocSaveAs ( $oDoc [, $sFileName = Default [, $iFileFormat = $WdFormatDocument [, $bReadOnlyRecommended = False [, $bAddToRecentFiles = True [, $sPassword = "" [, $sWritePassword = ""]]]]]] ) 用新的名称或格式保存指定的 Word 文档. (需要: #include <Word.au3>)
_Word_DocTableRead ( $oDoc, $vTable [, $iIndexBase = Default [, $sDelimiter = Default]] ) 读取 Word 表格 并返回一个二维数组. (需要: #include <Word.au3>)
_Word_DocTableWrite ( $oRange, ByRef $aArray [, $iIndexBase = Default [, $sDelimiter = Default]] ) 一个一维或二维数组写入到 Word 表. (需要: #include <Word.au3>)
_Word_Quit ( $oAppl [, $iSaveChanges = $WdDoNotSaveChanges [, $iOriginalFormat = $WdWordDocument [, $bForceClose = False]]] ) 关闭所有的文档, Word 应用, 并删除对象引用. (需要: #include <Word.au3>)
