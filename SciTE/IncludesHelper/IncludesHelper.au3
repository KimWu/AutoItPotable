#NoTrayIcon
#Region ;**** 由 AccAu3Wrapper_GUI 创建指令 ****
#AutoIt3Wrapper_Icon=logo.ico
#AutoIt3Wrapper_OutFile=IncludesHelper.exe
#AutoIt3Wrapper_UseUpx=Y
#AutoIt3Wrapper_UseX64=n
#AutoIt3Wrapper_Res_Fileversion=1.5.0.0
#AutoIt3Wrapper_Res_Language=2052
#AutoIt3Wrapper_Res_requestedExecutionLevel=highestAvailable
#AutoIt3Wrapper_Antidecompile=y
#EndRegion ;**** 由 AccAu3Wrapper_GUI 创建指令 ****
#cs ----------------------------------------------------------------------------
AutoIt Version	: 3.3.8.0 - 3.3.10.2
Version			: 1.5
Author			: asdf8

#ce ----------------------------------------------------------------------------
;~ http://www.autoitscript.com/forum/topic/131491-includes-helper/
Opt('MustDeclareVars', 1)
#Region ;************ Includes ************
#Include <WindowsConstants.au3>
#Include <StaticConstants.au3>
#Include <GUIConstantsEx.au3>
#Include <EditConstants.au3>
#Include "MemoryDll.au3";http://www.autoitscript.com/forum/topic/99412-run-binary/
#Include <File.au3>
#Include <SendMessage.au3>
#EndRegion ;************ Includes ************

#Region Lang
Global $Lng_1, $Lng_2, $Lng_3, $Lng_4, $Lng_5, $Lng_6, $Lng_7, $Lng_8, $Lng_9, $Lng_10, $UserIntLang
Global $Lng_11, $Lng_12, $Lng_13, $Lng_14, $Lng_15, $Lng_16, $Lng_17, $Lng_18, $Lng_19, $Lng_20
;~ $Lng_1 = '! NOT AU3 FILE'
;~ $Lng_2 = '! NOT FOUND AUTOIT INCLUDE PATH'
;~ $Lng_3 = '"ESC" - exit'
;~ $Lng_4 = 'Source code analysis ...'
;~ $Lng_5 = '-> DO NOT NEED ANY INCLUDES'
;~ $Lng_6 = 'Check ads includes ...'
;~ $Lng_7 = 'Scan includes general ...'
;~ $Lng_8 = 'Scan includes in script dir ...'
;~ $Lng_9 = 'Creating a database ...'
;~ $Lng_10 = '! WARNING: EMPTY FILE IN FOLDER "INCLUDE" : '
;~ $Lng_11 = '! NOT FOUND AUTOIT INCLUDE FILES'
;~ $Lng_12 = '! NOT PROCESSING THE ARGUMENTS OF FUNCTIONS : (arguments in the form of a variable or expression)'
;~ $Lng_13 = '! EPTY SCRIPT'
;~ $Lng_14 = '! NOT FOUND AUTOIT INCLUDE FILES FOR :'
;~ $Lng_15 = 'Processing ...'
;~ $Lng_16 = '! NEED INCLUDED :'
;~ $Lng_17 = '! NEED INCLUDED : (placed in the clipboard)'
;~ $Lng_18 = '+ CORRECTLY INCLUDED :'
;~ $Lng_19 = '- NOT NEED INCLUDED :'
;~ $Lng_20 = '! NOT FOUND INFORMATION FOR :'
;~ If @OSLang = 0004 Then
	$Lng_1 = '! 不是AU3文件'
	$Lng_2 = '! 没有找到AUTOIT INCLUDE 库文件路径'
	$Lng_3 = '按"ESC" - 退出'
	$Lng_4 = '正在分析源代码 ...'
	$Lng_5 = '-> 不需要包含任何头文件'
	$Lng_6 = '正在检索用户自定义的头文件信息 ...'
	$Lng_7 = '正在检索常规文件包含信息 ...'
	$Lng_8 = '正在检索脚本文件夹的文件包含信息 ...'
	$Lng_9 = '正在创建数据库信息 ...'
	$Lng_10 = '! 警告: AutoIt头文件目录 "INCLUDE" 为空: '
	$Lng_11 = '! 没有找到AUTOIT头文件'
	$Lng_12 = '! 未处理函数的参数 : (当前的变量或表达式)'
	$Lng_13 = '! 脚本文件为空'
	$Lng_14 = '! 没有找到可供包含的AutoIt头文件:'
	$Lng_15 = '正在处理，请稍后 ...'
	$Lng_16 = '! 需要包含头文件 :'
	$Lng_17 = '! 需要包含头文件 : (已经将名称复制到剪切板)'
	$Lng_18 = '+ 已经正确包含头文件 :'
	$Lng_19 = '- 不需要包含头文件 :'
	$Lng_20 = '! 未能为以下内容找到对应信息 :'
;~ EndIf
#EndRegion Lang

Global $inpFile, $inclDir, $numFind, $aFind, $aIncl, $sSource, $iExit
Global $progressGui, $progressInf, $progressText
Global $AutoItPath, $ScriptDir, $d = '|'
Global $fDat = @ScriptDir & '\IncludesHelper.dat'
Global $fIni = @ScriptDir & '\IncludesHelper.ini'
Global $iShowOptimInfo, $iShowDetals, $iResultToSource
Global $hSciTE, $hCtrl1, $hCtrl2
Global $SciTE__Cmd, $h__SciTE_Director

HotKeySet('{Esc}', '_exit')

If $CmdLine[0] > 0 Then
	If $CmdLine[1] And FileExists($CmdLine[1]) Then ;au3, exe
		$inpFile = $CmdLine[1]
	ElseIf $CmdLine[0] > 1 And $CmdLine[2] And FileExists($CmdLine[2]) Then ;a3x
		$inpFile = $CmdLine[2]
	EndIf
EndIf

If Not $inpFile Or Not FileExists($inpFile) Then
	_ConsoleWrite('>Running: ' & @ScriptName & @CRLF & $Lng_1 & @CRLF, 1)
	Exit
EndIf

$hSciTE = EnvGet('SciteWnd')
If $hSciTE Then $hSciTE = HWnd($hSciTE)
If Not IsHWnd($hSciTE) Then
	$hSciTE = WinGetHandle('[Class:SciTEWindow]')
	If Not (StringInStr(WinGetTitle($hSciTE), StringRegExpReplace($inpFile, '.+\\(.+)', '\1')) And StringInStr(WinGetTitle($hSciTE), StringRegExpReplace($inpFile, '(.+)\\.+', '\1'))) Then
		$hSciTE = 0
	EndIf
EndIf
If $hSciTE Then
	$hCtrl1 = ControlGetHandle($hSciTE, '', '[CLASS:Scintilla; INSTANCE:1]')
	$hCtrl2 = ControlGetHandle($hSciTE, '', '[CLASS:Scintilla; INSTANCE:2]')
EndIf

$iShowOptimInfo = IniRead($fIni, 'General', 'ShowOptimInfo', 'Default')
If $iShowOptimInfo = 'Default' Then
	$iShowOptimInfo = 1
	IniWrite($fIni, 'General', 'ShowOptimInfo', '1')
Else
	$iShowOptimInfo = Number($iShowOptimInfo)
EndIf
$iShowDetals = IniRead($fIni, 'General', 'ShowDetals', 'Default')
If $iShowDetals = 'Default' Then
	$iShowDetals = 0
	IniWrite($fIni, 'General', 'ShowDetals', '0')
Else
	$iShowDetals = Number($iShowDetals)
EndIf
$iResultToSource = IniRead($fIni, 'General', 'ResultToSource', 'Default')
If $iResultToSource = 'Default' Then
	$iResultToSource = 1
	IniWrite($fIni, 'General', 'ResultToSource', '1')
Else
	$iResultToSource = Number($iResultToSource)
EndIf

#Region Data
Local $s
$s = "0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C01060020B20D4F0000000000000000E0000E210B01023200220000000C000000000000001000000010000000400000000000100010000000020000040000000000000004000000000000000080000000040000000000000300000000001000001000000000100000100000000000001000000010"
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s
$s &= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005251E8E9110000C35251E831120000C3FF250C510010FF2530510010FF2534510010FF2538510010CCCCCCCCCCCCCCCC568B74240885F6577D0233F68B4424105056E8A912000085F68BF8740E566A2057E8BAFFFFFF83C40C03FEC607005F5EC20800CCCCCCCCCCCCCCCCCCCCCCCCCC83EC18837C241C00B80040001075048944241C535556578B7C243085FF7506894424308BF88B742434"
$s &= "85F67506894424348BF08B5424388BC283E00189442410C74424385B3400107508C744243861340010837C243C007F08C744243C010000008BC78D58018A0883C00184C975F72BC38BD88BC68D68018A0883C00184C975F72BC5F6C2028BE8896C2414745E85DB0F84E60100008B44242C8B4C243C8D7408FF8BFE803F000F84CF0100008D49008B542430535256FF54244483C40C85C075158B442434555056E82913000083C40C03F503FBEB0683C60183C701803F0075CE5F5E5D5B83C418C218008B6C242C55E80A12000085C08944241C740D55E8F912000083C4048944242C57E8EF11000085C089442420740D57E8DE12000083C40489"
$s
$s
$s &= "3BC38BFE750E8D49000FBE4E0183C6013BCB74F52BF73BF5897424187D260FBE542FFF3BD38D442FFF750B0FBE48FF83E8013BCB74F58BD72BD08D442AFF03C62BE8EB0A33C08BC62BE8EB0233FF57E8950F00008BD88B44241C5055E8080F000085DB8BF0740853E8BC0F00008BF885FF74158B4C24185503CF5156E8C80F00005F5E5D5BC20C005FC606005E5D5BC20C00CCCCCCCCCCCCCC8B4424088B4C240450680440001051E82CFFFFFFC20800CCCCCCCCCCCCCCCCCC535556578B7C241457E8B20100008BF08B44241885C07D0233C03BF07E028BF057E80A0F00008BD88B44241C5056E87D0E000085DB8BE8740853E8310F00008BF8"
$s &= "85FF741385F67E0F565755E83F0F00005F5E5D5BC20C005F5EC64500005D5BC20C00CCCCCCCCCCCCCCCCCCCCCCCCCC53568B74240C5756E843010000568BD8E8AB0E00008BF88B4424145053E81E0E000085FF8BD8740857E8D20E00008BF085F674258BD38BC62BD68D9B000000008A08880C0283C00184C975F453FF15605100105F5E5BC208005F5EC603005BC20800CCCCCCCCCCCCCCCCCCCCCCCCCCCC518B4C24085633F685C9897424040F84BA0000008B44241085C00F84AE0000008039000F84A50000008038000F849C000000558BE983C10180390075F88B5424182BCD83FA017D07BA01000000EB073BD17E038D51018A4C2AFF84"
$s
$s &= "CCCCCCCCCCCCCCCCCCCCCC538B5C241085DB56577D0233DB8B7424105556E8D80C00008BE88B4424205053E84B0C000085ED8BF8740855E8FF0C00008BF085F65D74348B44241483F8017E10803E00742683E80183C60183F8017FF08A0684C0741585DB741183C60188078A0683C70183EB0184C075EB53E82E0D0000C607005F5E5BC21000CCCCCCCCCC8B54240485D2742D8BC2568D70018BFF8A0883C00184C975F78B4C2410518B4C24102BC62BC183C001505152E84FFFFFFF5EC20C008B54240C52E8010D0000C20C00CCCCCCCCCCCCCCCCCCCCCCCCCCCC8B442408535633DB85C057750AC744241420000000EB070FBE00894424148B"
$s &= "7C24105557E8F70B000085FF8BE8743E8A0F33D284C98BF78BC77432EB038D49000FBEC93B4C2418750D85D2750B8BF0BA01000000EB0233D28A480183C00183C30184C975DB85D274042BF003DE8B54241C5253E8280B000085ED8BF0740855E8DC0B00008BF885DB5D740E535756E8ED0B00005F5E5BC20C005FC606005E5BC20C00CCCCCCCCCCCCCCCCCCCCCCCCCCCC8B4424088B4C240450680440001051E83CFFFFFFC20800CCCCCCCCCCCCCCCCCC538B5C240C85DB577D0233DB8B7C240C85FF567426803F0074218BC78D5001908A0883C00184C975F72BC28BF03BF37E028BF32BDE790633DBEB0233F65557E80C0B00008BE88B4424"
$s &= "1C85C07507C644241820EB068A00884424188B4C2420518D141E52E8670A000085ED8BF8740855E81B0B0000EB048B44241485F65D7E0B565057E8BF0B000083C40C03FE85DB5E74118B442410535057E852F7FFFF83C40C03FBC607005F5BC21000CCCCCCCCCC6A0068001000006A00FF1530510010A398520010C3CCCCCCCCCCCCCCCCCCCCCCC3CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC8B54240885D28B442404568BF074148A0A84C9740E83C20188088A0A83C00184C975F2C600002BC65EC20800CCCCCCCC51568B74240C33C03946148944240475248B4E082B4E0C8B5604508D442408508B06515250FF153C5100108B4E088B44240489"
$s &= "4E0C5E59C20400CCCCCCCCCCCC578B7C240883FFFF7449A19C520010565750E81E0500008BF085F67435837E0400741956E897FFFFFF8B4E048B1588520010516A0052FF15405100108B0650FF15445100108B0D9C5200105751E80E0500005E5FC20400CCCCCCCCCCCCCCCCCCA19C52001050E874050000C3CCCCCCCC68702900106A106A18E818050000A39C520010C3CCCCCCCCCCCCCCCCCCCCCCCC51535556578BF08B4424188BD98B0D9C5200105051E82704000083FE018BF8751C6A0068800000006A036A0056680000008053FF15485100108BF0EB6383FE02751D6A0068800000006A046A006A0168000000C053FF15485100108BF0"
$s &= "EB4183FE0375388B2D485100106A0068800000006A026A006A0168000000C053FFD58BF083FEFF751F6A006A006A056A006A01680000004053FFD58BF0EB048B74241083FEFF745133DB3BF3744BA15C5000103BC374148B1588520010505352FF154C510010894704EB03895F04837C2418FF8937A15C500010894708895F0CC747140100000075088BC75F5E5D5B59C35F8BC65E5D5B59C3837C2418FF750D8B0D9C5200105751E8C60300005F5E5D33C05B59C3CCCCCCCCCCCCCCCCCCCCCCCCCCCC8B4424048B4C240850B801000000E8CDFEFFFF83C404C20800CCCCCCCCCCCCCC83EC088B44240C8B0D9C520010565051C744240C000000"
$s
$s &= "505100108A44241384C0740A8845008A44241383C5018B4C24188BF52BF73BF17C1E8B54242481C1001000005251894C2420E8680600008BF88A4424138D2C3E84C07468837C241400740C3C0D74083C0A0F8578FFFFFF83ED013C0D754E837B0400740F6A018D4424175053E85E000000EB178B036A008D4C2418516A018D54241F5250FF1550510010807C24130A741B837B0400740683430C01EB0F8B0B6A016A006AFF51FF15545100105E2BFD037C2414C645000057E8120700005F5D5B83C40CC20800CCCCCCCCCCCCCCCCCC53568B74240C837E140057751456E8FDFBFFFFC7461401000000C7460C000000008B5E0C8B7C24183BDF7C"
$s
$s &= "0C83FFFF75178B4424088B0883C1085183C00C50E8910100005959EB3F568B74240C3B7E087C228B46048B0E03C70FAFC851FF761C8946086A08FF3588520010FF155851001089461C8B461085C0740357FFD08B060FAFC703461C5E5FC208008B54240885D27C138B4C24043B51087D0A8B010FAFC203411CEB028BC285C07407833800750233C0C208008B54240885D28B4C24047C1B3B51087D168B01500FAFC203411C6A0050E81EF1FFFF83C40CEB0C5283C10C51E81B0100005959C2080056578B3D4C5100106A206A08FF3588520010FFD78B4C24148BF08B44240C83660C00894E108B4C241089060FAFC1506A08894E04894E08FF35"
$s
$s
$s &= "05BA4F50001009C97505B94F5000108A22428A014138C4750C08E475F2B80100000085C0C331C085C0C3CCCCCC558BEC83EC0C8955F4837DF40074358B45F450E80703000083C4048945F88B0D94520010518B55F852E8620100008945FC8B45F8508B4DF4518B55FC52E82E020000EB0EA158500010030594520010C600008BE55DC3CCCCCCCCCCCCCCCCCCCC558BEC5052837D080074138B4508506A008B0DA052001051FF15405100105A585DC20400CCCCCCCCCCCCCCCCCCCCCCCC558BEC51837D0C00743D8B450C50E87C02000083C4048945FC8B4DFC83C105516A008B15A052001052FF154C5100108B4D0889018B55FC528B450C508B"
$s
$s
$s &= "8BECA1945200102B4508A3945200105DC20400CCCCCCCCCCCCCCCCCCCCCCCC558BEC8B4508A3945200108B0D58500010034D08C601005DC20400FF2510510010FF2514510010FF2518510010FF251C510010FF2520510010FF2524510010FF2528510010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$s &= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000020"
$s
$s
$s
$s &= "006E5200000000000068510000BC510000C8510000D2510000DC510000E6510000EE510000F8510000000000007E5100008C5100009A510000025200000E5200001A5200002852000036520000425200004E52000060520000000000006E5200000000000099026D656D73657400004D53564352542E646C6C0000A402486561704372656174650000A5024865617044657374726F7900F7014765744D6F64756C6548616E646C654100004B45524E454C33322E646C6C0000C5015F7374726E69636D7000C0027374726E636D7000C1027374726E63707900BF015F737472647570005E0266726565000097026D656D6370790000BE02737472"
$s
$s
$s
$s
$s
$s
$s
$s &= "38BB38C538ED381D3927394F3970397A399F39CA39EF39083A123A1C3A273A353A603A7F3A893A933A9E3AAF3ABE3AC83AD23ADC3AE73AF53A053B2B3B313B3D3B493B553B5C3B623B0020000068000000123018301E3024307930B430BE302A34FF343E360A38DB38E03857397B399E39A839B139B739D139E139EF390F3A353A573A663AAC3AB63ABF3AD33AFF3A493BA63BC03B033C513CD73CF93CEB3D123E813E873E0A3F143F3F3FF73FFD3F0000003000007C000000513057306E307330793083308C3095309C30A130B530D130D830F430FB300931203135313E318031A531AB31D331DA3114321B327232793295329C32CB32D232F7"
$s &= "3203331A331F332933323339333E33433355337833803386339433B83324342C3447344D345D34633469346F3475347B348134"
#EndRegion Data

Global $iUseDll = 0, $DllHandle
If @AutoItX64 <> 1 Then
	$iUseDll = 1
	$DllHandle = MemoryDllOpen($s)
	OnAutoItExitRegister('_end')
EndIf

Global $iNewVersion = _CheckVersion()

_ConsoleWrite('>IncludesHelper虫子樱桃自用定制版' & @CRLF, 1)
_ConsoleWrite($inpFile & @CRLF & @CRLF)

$AutoItPath = EnvGet('AutoItPath')
If Not $AutoItPath Or Not FileExists($AutoItPath) Then
	If @OSArch = 'X86' Then
		$AutoItPath = RegRead('HKEY_LOCAL_MACHINE\SOFTWARE\AutoIt v3\AutoIt', 'InstallDir')
	Else
		$AutoItPath = RegRead('HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\AutoIt v3\AutoIt', 'InstallDir')
	EndIf
EndIf
$inclDir = $AutoItPath & '\Include\'
$ScriptDir = StringRegExpReplace($inpFile, '(.+)\\.+', '\1')

If Not $AutoItPath Or Not FileExists($inclDir) Then
	_ConsoleWrite($Lng_2 & @CRLF)
	Exit
EndIf

$progressGui = GUICreate("", 272, 62, -1, -1, $WS_POPUP, BitOR($WS_EX_TOOLWINDOW, $WS_EX_TOPMOST, $WS_EX_DLGMODALFRAME))
$progressText = GUICtrlCreateLabel('', 4, 8, 264, 17, $SS_CENTER, $GUI_WS_EX_PARENTDRAG)
GUICtrlSetFont(-1, 9, 400, 0, "微软雅黑")
GUICtrlSetTip(-1, $Lng_3)
GUICtrlSetCursor(-1, 9)
$progressInf = GUICtrlCreateProgress(4, 28, 264, 29)
GUISetState(@SW_SHOWNA)

_LoadDB()

_ProgressSet(1, $Lng_4)
$aFind = _PrepareScript($inpFile)

If Not IsArray($aFind) Then
	GUIDelete($progressGui)
	_ConsoleWrite($Lng_5 & @CRLF)
	If $iResultToSource Then _ResultToSource('', '', 1)
	Exit
EndIf

$numFind = UBound($aFind)

_ProgressSet(1, $Lng_6)
_CheckAdsIncludes($inpFile)
If Not $numFind Then _OutInfo()
_ProgressSet(1, $Lng_7)
_ScanIncludes() ;$AutoItPath & '\Include'
If Not $numFind Then _OutInfo()
_ProgressSet(1, $Lng_8)
_ScanIncludes($ScriptDir)
_OutInfo()

Func _LoadDB()
	Local $aTmp, $tmp, $i, $str, $file, $var, $flag = 1
	$aTmp = _FileList($AutoItPath & '\Include', '*.au3')
	If IsArray($aTmp) And $aTmp[0] > 0 Then
		If FileExists($fDat) Then
			$str = FileRead($fDat)
			$tmp = StringRegExp($str, '([^\a]+)', 3)
			If IsArray($tmp) And UBound($tmp) = $aTmp[0] Then
				Dim $aIncl[UBound($aTmp)][4]
				$aIncl[0][0] = $aTmp[0]
				For $i = 1 To $aTmp[0]
					$var = StringReplace($aTmp[$i], $inclDir, '') & FileGetTime($aTmp[$i], 0, 1)
					If $var = StringLeft($tmp[$i - 1], StringLen($var)) Then
						$aIncl[$i][0] = $aTmp[$i]
						$var = StringRegExp($tmp[$i - 1], '([^\r\n]+)', 3)
						If IsArray($var) And UBound($var) > 1 Then
							$aIncl[$i][1] = $var[1]
							If UBound($var) > 2 Then
								$aIncl[$i][2] = StringReplace($var[2], Chr(28), $inclDir)
							EndIf
						EndIf
					Else
						$flag = 0
						ExitLoop
					EndIf
				Next
				If $flag Then
					Return
				EndIf
			EndIf
		EndIf
		_ProgressSet(1, $Lng_9)
		$str = ''
		Dim $aIncl[UBound($aTmp)][4]
		$aIncl[0][0] = $aTmp[0]
		For $i = 1 To $aIncl[0][0]
			If $iExit Then Exit
			$aIncl[$i][0] = $aTmp[$i]
			$tmp = _GetInfo($aTmp[$i])
			If $tmp[1] Then $tmp[1] = _AllIncl($aTmp[$i])
			$aIncl[$i][1] = $tmp[0]
			$aIncl[$i][2] = $tmp[1]
			$aIncl[$i][3] = FileGetTime($aTmp[$i], 0, 1)
			$str &= Chr(7) & StringReplace($aIncl[$i][0], $inclDir, '') & $aIncl[$i][3] & @CRLF & $aIncl[$i][1] & @CRLF & StringReplace($aIncl[$i][2], $inclDir, Chr(28)) & @CRLF
			If Not $aIncl[$i][1] And Not $aIncl[$i][2] Then
				_ConsoleWrite($Lng_10 & StringReplace($aIncl[$i][0], $inclDir, '') & @CRLF)
			EndIf
			_ProgressSet(100 * $i / $aTmp[0])
		Next
		If $str Then
			$file = FileOpen($fDat, 2)
			FileWrite($file, $str)
			FileClose($file)
			_WinAPI_SetCompression($fDat, 1)
		EndIf
	Else
		_ConsoleWrite($Lng_11 & @CRLF)
		Exit
	EndIf
EndFunc

Func _GetInfoDB($sPath)
	Local $i, $aOut
	Dim $aOut[2]
	For $i = 1 To $aIncl[0][0]
		If $aIncl[$i][0] = $sPath Then
			$aOut[0] = $aIncl[$i][1]
			$aOut[1] = $aIncl[$i][2]
			Return $aOut
		EndIf
	Next
	Return SetError(1, 0, $aOut)
EndFunc

Func _PrepareScript($inpFile)
	Local $str, $path, $tmp, $tmp1, $tmp2, $tmp3, $var
	Local $ind1 = 0, $ind2 = 0, $ind3 = 0, $oDict, $oDictNoFind
	$str = FileRead($inpFile)
	$str = StringRegExpReplace($str, '(?i)(?<![a-z0-9_"'';~])(AdlibRegister|AdlibUnRegister|Call|OnAutoItExitRegister|OnAutoItExitUnRegister|DllCallbackRegister)[ \t]*\([ \t]*["'']([a-z0-9_]+)["''](?=[ \t]*[,\)])', 'SetError(\2()')
	$str = StringRegExpReplace($str, '(?i)(?<![a-z0-9_"'';~])(GUICtrlRegisterListViewSort|GUICtrlSetOnEvent|GUIRegisterMsg|GUISetOnEvent|HotKeySet|TrayItemSetOnEvent)[ \t]*\(([ \t]*[^,\)]+[ \t]*,)[ \t]*["'']([a-z0-9_]+)["''](?=[ \t]*[,\)])', 'SetError(\2\3()')
	$str = StringRegExpReplace($str, '(?i)(?<![a-z0-9_"'';~])ObjEvent[ \t]*\([ \t]*["'']AutoIt\.Error["''][ \t]*,[ \t]*["'']([a-z0-9_]+)["''][ \t]*\)', '\1()')
	$str = StringRegExpReplace($str, '(?i)(?<![a-z0-9_"'';~])(Assign|Eval)[ \t]*\([ \t]*["'']([a-z0-9_]+)["''](?=[ \t]*[,\)])', 'SetError($\2')
	$tmp = StringRegExp($str, '(?i)(?<![a-z0-9_"'';~])((?:assign|eval|adlibregister|adlibunregister|execute|call|guiregistermsg|guisetonevent|guictrlsetonevent|hotkeyset|trayitemsetonevent|objevent|onautoitexitregister|onautoitexitunregister|dllcallbackregister|guictrlregisterlistviewsort)[ \t]*\([^\r\n]+)', 3)
	If IsArray($tmp) Then
		Local $i, $sTmp = ''
		For $i = 0 To UBound($tmp) - 1
			Local $bExp = StringRegExp($tmp[$i], '(?i)^Adlib(Un)?Register[ \t]*\([ \t]*(["'']{2})?[ \t]*\)') Or _
					StringRegExp($tmp[$i], '(?i)^HotKeySet[ \t]*\([ \t]*["''][^"'']+["''][ \t]*\)') Or _
					StringRegExp($tmp[$i], '(?i)^ObjEvent[ \t]*\([ \t]*["'']AutoIt\.Error["''][ \t]*\)') Or _
					StringRegExp($tmp[$i], '(?i)^(GUIRegisterMsg|GUISetOnEvent|GUICtrlSetOnEvent|TrayItemSetOnEvent)[ \t]*\([^,\)]+,[ \t]*["'']{2}(?=[ \t]*[,\)])')
			If Not $bExp Then
				$sTmp &= $tmp[$i] & @CRLF
			EndIf
		Next
		If $sTmp Then
			_ConsoleWrite($Lng_12 & @CRLF & $sTmp & @CRLF)
		EndIf
	EndIf

	If $iUseDll Then
		Local $tmpFile = @TempDir & '\InclHlp.au3'
		Local $file = FileOpen($tmpFile, 10)
		FileWrite($file, $str)
		FileClose($file)
		$str = __DelComment($tmpFile)
		FileDelete($tmpFile)
	Else
		$str = _DelComment($str, 1)
	EndIf
	$str = StringRegExpReplace($str, '(?i)(?<=^|[\r\n])Volatile[ \t]+(Func)', '\1')

	$sSource = $str

	$str = StringRegExpReplace($str, '_[\r\n]+', '')
	$str = StringRegExpReplace($str, '(?i)\.[a-z_0-9]+', ' <<')
	$str = StringRegExpReplace($str, '(?i)([^\r\n]+[ \t]+Then)[ \t]+([^\r\n]+)', '\1' & @CRLF & '\2')
	$str = StringRegExpReplace($str, '(?i)(?<=[\r\n])[ \t]*Else[ \t]+', '')

	$oDict = ObjCreate("Scripting.Dictionary")
	$oDict.CompareMode = 1

	$oDictNoFind = ObjCreate("Scripting.Dictionary")
	$oDictNoFind.CompareMode = 1

	$path = ''

	If $hSciTE Then
		$path = -1
	EndIf

	If Not $path Then
		If FileExists($AutoItPath & '\SciTE\languages\au3.keywords.properties') Then
			$path = $AutoItPath & '\SciTE\languages\au3.keywords.properties'
		ElseIf FileExists($AutoItPath & '\SciTE\Properties\au3.keywords.properties') Then
			$path = $AutoItPath & '\SciTE\Properties\au3.keywords.properties'
		EndIf
	EndIf

	If $path Then ;ai functions
		If $path = -1 Then
			$tmp = StringReplace(_SciTE_Send_Command('askproperty:keywords2.$(au3)', 1000), 'macro:stringinfo:', '')
			$tmp = StringReplace(_SciTE_Send_Command('askproperty:' & StringRegExpReplace($tmp, '\$\(([^()$]+)\)', '\1'), 1000), 'macro:stringinfo:', '')
			$tmp = StringReplace($tmp, '\t', '')
		Else
; 			$tmp = StringRegExpReplace(FileRead($path), '(?s)^.*\.functions=([^\.]+).*$', '\1')
; 			$tmp = StringRegExpReplace($tmp, '(?s)(.+)[\r\n][^\r\n]*', '\1')
			$tmp = StringRegExp(FileRead($path), '(?i)\.functions=([a-z0-9_ \t\r\n\\]+)(?=[\r\n]|$)', 3)
			If IsArray($tmp) Then
				$tmp = $tmp[0]
			Else
				$tmp = ''
			EndIf
		EndIf

		$tmp = StringRegExp($tmp, '\w+', 3)
		If IsArray($tmp) Then
			For $i = 0 To UBound($tmp) - 1
				$oDictNoFind.Item($tmp[$i])
			Next
		EndIf

		If $path = -1 Then
			$tmp = StringReplace(_SciTE_Send_Command('askproperty:keywords.$(au3)', 1000), 'macro:stringinfo:', '')
			$tmp = StringReplace(_SciTE_Send_Command('askproperty:' & StringRegExpReplace($tmp, '\$\(([^()$]+)\)', '\1'), 1000), 'macro:stringinfo:', '')
			$tmp = StringReplace($tmp, '\t', '')
		Else
; 			$tmp = StringRegExpReplace(FileRead($path), '(?s)^.*\.keywords=([^\.]+).*$', '\1')
; 			$tmp = StringRegExpReplace($tmp, '(?s)(.+)[\r\n][^\r\n]*', '\1')
			$tmp = StringRegExp(FileRead($path), '(?i)\.keywords=([a-z0-9_ \t\r\n\\]+)(?=[\r\n]|$)', 3)
			If IsArray($tmp) Then
				$tmp = $tmp[0]
			Else
				$tmp = ''
			EndIf
		EndIf

		$tmp = StringRegExp($tmp, '\w+', 3)
		If IsArray($tmp) Then
			For $i = 0 To UBound($tmp) - 1
				$oDictNoFind.Item($tmp[$i])
			Next
		EndIf
	EndIf

	$tmp1 = StringRegExp($str, '(?i)(?:^|[\r\n])[ \t]*Func[ \t]+([0-9a-z_]+)[ \t]*\(', 3)
	$tmp2 = StringRegExp($str, '(?i)(\$[a-z0-9_]+)', 3)
	$tmp3 = StringRegExp($str, '([^\r\n]+)', 3)

	If $iExit Then Exit

	If IsArray($tmp1) Then $ind1 = UBound($tmp1)
	If IsArray($tmp2) Then $ind2 = UBound($tmp2)
	If IsArray($tmp3) Then $ind3 = UBound($tmp3)

	If IsArray($tmp1) Then
		For $i = 0 To UBound($tmp1) - 1
			$oDictNoFind.Item($tmp1[$i])
			_ProgressSet(100 * $i / ($ind1 + $ind2 + $ind3))
		Next
	EndIf

	If $iExit Then Exit

	If IsArray($tmp2) Then
		For $i = 0 To UBound($tmp2) - 1
			If $tmp2[$i] <> '$cmdlineraw' And $tmp2[$i] <> '$cmdline' Then
				$oDict.Item($tmp2[$i])
			EndIf
			_ProgressSet(100 * ($i + $ind1) / ($ind1 + $ind2 + $ind3))
		Next
	EndIf

	If $iExit Then Exit

	If IsArray($tmp3) Then
		For $i = 0 To UBound($tmp3) - 1
			If $iExit Then Exit
			If StringRegExp($tmp3[$i], '^#') Then ContinueLoop
			If StringRegExp($tmp3[$i], '(?i)^(Global|Local|Static|Const|Func|Dim)[ \t]') Then
				$tmp = $tmp3[$i]
				If StringInStr($tmp, '[') Then
					Do
						$tmp = StringRegExpReplace($tmp, '\[[^\[\]]*\]', ' ')
					Until Not @Extended
				EndIf
				If Not StringRegExp($tmp3[$i], '(?i)^Func[ \t]') And StringInStr($tmp, '(') Then
					Do
						$tmp = StringRegExpReplace($tmp, '\([^\(\)]*\)', ' ')
					Until Not @Extended
				EndIf
				$tmp = StringRegExpReplace($tmp, '=[^,]+', ' ')
				$tmp = StringRegExp($tmp, '(?i)(\$[a-z0-9_]+)', 3)
				If IsArray($tmp) Then
					For $j = 0 To UBound($tmp) - 1
						If $oDict.Exists($tmp[$j]) Then $oDict.Remove($tmp[$j])
					Next
				EndIf
			Else
				$tmp = StringRegExp($tmp3[$i], '(?i)^(?:[a-z]+[ \t]+)?(\$[a-z0-9_]+)[ \t]*=', 3)
				If IsArray($tmp) Then
					If $oDict.Exists($tmp[0]) Then $oDict.Remove($tmp[0])
				Else
					$tmp = StringRegExp($tmp3[$i], '(?i)^[ \t]*For[ \t]+(\$[a-z0-9_]+)', 3)
					If IsArray($tmp) Then
						If $oDict.Exists($tmp[0]) Then $oDict.Remove($tmp[0])
					EndIf
				EndIf
			EndIf
			$tmp = StringRegExp($tmp3[$i], '(?i)(?<=^|[^\$a-z0-9_])([a-z0-9_]+)[ \t]*\(', 3)
			If IsArray($tmp) Then
				For $j = 0 To UBound($tmp) - 1
					If Not $oDictNoFind.Exists($tmp[$j]) Then
						$oDict.Item($tmp[$j])
					EndIf
				Next
			EndIf
			_ProgressSet(1 + 100 * ($i + $ind1 + $ind2) / ($ind1 + $ind2 + $ind3))
		Next
	Else
		GUIDelete($progressGui)
		_ConsoleWrite($Lng_13 & @CRLF)
		Exit
	EndIf

	If $iExit Then Exit

	If $oDict.Count > 0 Then
		$tmp = $oDict.Keys()
		Dim $aFind[UBound($tmp)][3]
		For $i = 0 To UBound($tmp) - 1
			$aFind[$i][0] = $tmp[$i]
		Next
	EndIf
	Return $aFind
EndFunc

Func _CheckAdsIncludes($inpFile)
	Local $tmp, $aDat, $i, $j, $str
	$tmp = _AllIncl($inpFile)
	$tmp = StringRegExp($tmp, '([^|]+)', 3)
	If UBound($tmp) > 1 Then
		For $i = 1 To UBound($tmp) - 1
			If $iExit Then Exit
			$str = ''
			$aDat = _GetInfo($tmp[$i])
			If $aDat[0] Then
				For $j = 0 To UBound($aFind) - 1
					If $iExit Then Exit
					If StringInStr($aDat[0], $d & $aFind[$j][0] & $d) Then
						$aFind[$j][1] = $tmp[$i]
						If $iShowOptimInfo And $aDat[1] Then
							If Not $str Then $str = _AllIncl($tmp[$i])
							$aFind[$j][2] = $str
						EndIf
						$numFind -= 1
						If Not $numFind Then
							_ProgressSet(100)
							ExitLoop 2
						EndIf
					EndIf
				Next
			EndIf
			_ProgressSet(100 * ($i + 1) / UBound($tmp))
		Next
	EndIf
EndFunc

Func _ScanIncludes($path = '')
	Local $aTmp, $aInclTmp, $tmp, $i, $j, $aDat, $str
	If $path Then
		$aTmp = _FileList($path, '*.au3')
		If IsArray($aTmp) And $aTmp[0] > 0 Then
			For $i = 1 To $aTmp[0]
				If $iExit Then Exit
				If StringLower($inpFile) = StringLower($aTmp[$i]) Then ContinueLoop
				$str = ''
				$tmp = _GetInfo($aTmp[$i])
				For $j = 0 To UBound($aFind) - 1
					If $iExit Then Exit
					If Not $aFind[$j][1] Then
						If StringInStr($tmp[0], $d & $aFind[$j][0] & $d) Then
							$aFind[$j][1] = $aTmp[$i]
							If $iShowOptimInfo And $tmp[1] Then
								If Not $str Then $str = _AllIncl($aTmp[$i])
								$aFind[$j][2] = $str
							EndIf
							$numFind -= 1
							If Not $numFind Then
								_ProgressSet(100)
								ExitLoop 2
							EndIf
						EndIf
					EndIf
				Next
				_ProgressSet(100 * $i / $aTmp[0])
			Next
		Else
			_ConsoleWrite($Lng_14 & @CRLF & $path & @CRLF)
		EndIf
	Else
		For $i = 1 To $aIncl[0][0]
			If $iExit Then Exit
			For $j = 0 To UBound($aFind) - 1
				If Not $aFind[$j][1] Then
					If StringInStr($aIncl[$i][1], $d & $aFind[$j][0] & $d) Then
						$aFind[$j][1] = $aIncl[$i][0]
						$aFind[$j][2] = $aIncl[$i][2]
						$numFind -= 1
						If Not $numFind Then
							_ProgressSet(100)
							ExitLoop 2
						EndIf
					EndIf
				EndIf
			Next
			_ProgressSet(100 * $i / $aIncl[0][0])
		Next
	EndIf
EndFunc

Func _AllIncl($fullPath)
	Local $str, $tmp, $i, $j, $sCompare, $aPath, $var
	If $numFind And StringInStr($fullPath, $inclDir) Then
		$tmp = _GetInfoDB($fullPath)
		Return $tmp[1]
	Else
		$sCompare = $d & $fullPath & $d
		Dim $aPath[2]
		$aPath[0] = 1
		$aPath[1] = $fullPath
		$j = 1
		While $j <= $aPath[0]
			If $numFind And StringInStr($aPath[$j], $inclDir) Then
				$tmp = _GetInfoDB($aPath[$j])
				$tmp = StringRegExp($tmp[1], '([^\|]+)', 3)
				If IsArray($tmp) Then
					For $i = 0 To UBound($tmp) - 1
						If Not StringInStr($sCompare, $d & $tmp[$i] & $d) Then
							$sCompare &= $tmp[$i] & $d
							$aPath[0] += 1
							If UBound($aPath) <= $aPath[0] Then ReDim $aPath[2 * $aPath[0]]
							$aPath[$aPath[0]] = $tmp[$i]
						EndIf
					Next
				EndIf
			Else
				If $iUseDll Then
					$str = __DelComment($aPath[$j], 1)
				Else
					$str = FileRead($aPath[$j])
					$str = _DelComment($str)
				EndIf
				$str = StringRegExpReplace($str, '(?i)(?<=^|[\r\n])Volatile[ \t]+(Func)', '\1')

				$tmp = StringRegExp($str, '(?i)(?:^|[\r\n])[ \t]*#Include[ \t]*([<"''][^>"'']+)[>"'']', 3)
				If IsArray($tmp) Then
					For $i = 0 To UBound($tmp) - 1
						$var = ''
						If StringLeft($tmp[$i], 1) = '<' Then
							$tmp[$i] = StringTrimLeft($tmp[$i], 1)
							If Not StringInStr($tmp[$i], '\') And FileExists($inclDir & $tmp[$i]) Then
								$var = $inclDir & $tmp[$i]
							ElseIf FileExists(_PathFull($tmp[$i], StringRegExpReplace($aPath[$j], '(.+)\\.+', '\1'))) Then
								$var = _PathFull($tmp[$i], StringRegExpReplace($aPath[$j], '(.+)\\.+', '\1'))
							EndIf
						Else
							$tmp[$i] = StringTrimLeft($tmp[$i], 1)
							If FileExists(_PathFull($tmp[$i], StringRegExpReplace($aPath[$j], '(.+)\\.+', '\1'))) Then
								$var = _PathFull($tmp[$i], StringRegExpReplace($aPath[$j], '(.+)\\.+', '\1'))
							ElseIf Not StringInStr($tmp[$i], '\') And FileExists($inclDir & $tmp[$i]) Then
								$var = $inclDir & $tmp[$i]
							EndIf
						EndIf
						If $var And Not StringInStr($sCompare, $d & $var & $d) Then
							$sCompare &= $var & $d
							$aPath[0] += 1
							If UBound($aPath) <= $aPath[0] Then ReDim $aPath[2 * $aPath[0]]
							$aPath[$aPath[0]] = $var
						EndIf
					Next
				EndIf
			EndIf
			$j += 1
		WEnd
	EndIf
	Return $sCompare
EndFunc

Func _OutInfo()
	Local $sNeed, $sNoNeed, $sCorrect, $sNoInfo, $i, $j, $str, $tmp, $aNeed, $sInclExist
	If $iShowOptimInfo Then
		If UBound($aFind) > 0 Then
			$tmp = 1
			_ProgressSet(1, $Lng_15)
		Else
			GUIDelete($progressGui)
		EndIf
		For $i = 0 To UBound($aFind) - 1
			If $iExit Then Exit
			If $aFind[$i][1] Then
				If $i <> $j And $aFind[$i][2] Then
					For $j = 0 To UBound($aFind) - 1
						If $aFind[$j][1] And StringInStr($aFind[$i][2], $d & $aFind[$j][1] & $d) Then
							$aFind[$j][1] = $aFind[$i][1]
						EndIf
					Next
				EndIf
			Else
				$sNoInfo &= '!   ' & $aFind[$i][0] & @CRLF
			EndIf
			If $tmp Then _ProgressSet(100 * $i / UBound($aFind))
		Next
		If $tmp Then GUIDelete($progressGui)
	Else
		GUIDelete($progressGui)
	EndIf
	If $iExit Then Exit
	$tmp = $d
	For $i = 0 To UBound($aFind) - 1
		If Not StringInStr($tmp, $d & $aFind[$i][1] & $d) Then
			$tmp &= $aFind[$i][1] & $d
		EndIf
		If $iShowDetals And $aFind[$i][1] Then
			If StringInStr($aFind[$i][1], $inclDir) Then
				_ConsoleWrite(StringFormat('--- > %-45s :: %s\n', $aFind[$i][0], StringReplace($aFind[$i][1], $inclDir, '')))
			Else
				_ConsoleWrite(StringFormat('--- > %-45s :: %s\n', $aFind[$i][0], _PathGetRelative($ScriptDir, $aFind[$i][1])))
			EndIf
		EndIf
	Next
	$aNeed = StringRegExp($tmp, '([^\|]+)', 3)
; 	_ArrayDisplay($aFind)
	$tmp = StringRegExp($sSource, '(?i)(?:^|[\r\n])[ \t]*#Include[ \t]*[<"'']([^>"'']+)[>"'']', 3)
	If IsArray($tmp) Then
		If IsArray($aNeed) Then
			$sInclExist = $d
			For $i = 0 To UBound($tmp) - 1
				$sInclExist &= $tmp[$i] & $d
			Next
			For $i = 0 To UBound($aNeed) - 1
				If StringInStr($aNeed[$i], $inclDir) Then
					$str = StringReplace($aNeed[$i], $inclDir, '')
					If StringInStr($sInclExist, $d & $str & $d) Then
						$sCorrect &= '+   ' & $str & @CRLF
						$sInclExist = StringReplace($sInclExist, $d & $str & $d, $d)
					Else
						$sNeed &= '#Include <' & $str & '>' & @CRLF
					EndIf
				Else
					$str = _PathGetRelative($ScriptDir, $aNeed[$i])
					If StringInStr($sInclExist, $d & $str & $d) Then
						$sCorrect &= '+   ' & $str & @CRLF
						$sInclExist = StringReplace($sInclExist, $d & $str & $d, $d)
					Else
						$sNeed &= '#Include "' & $str & '"' & @CRLF
					EndIf
				EndIf
			Next
			$tmp = StringRegExp($sInclExist, '([^\|]+)', 3)
			If IsArray($tmp) Then
				For $i = 0 To UBound($tmp) - 1
					$sNoNeed &= '-   ' & $tmp[$i] & @CRLF
				Next
			EndIf
		Else
			For $i = 0 To UBound($tmp) - 1
				$sNoNeed &= '-   ' & $tmp[$i] & @CRLF
			Next
		EndIf
	Else
		If IsArray($aNeed) Then
			For $i = 0 To UBound($aNeed) - 1
				If StringInStr($aNeed[$i], $inclDir) Then
					$sNeed &= '#Include <' & StringReplace($aNeed[$i], $inclDir, '') & '>' & @CRLF
				Else
					$sNeed &= '#Include "' & _PathGetRelative($ScriptDir, $aNeed[$i]) & '"' & @CRLF
				EndIf
			Next
		EndIf
	EndIf
	If $iResultToSource Then _ResultToSource($sNeed, $sNoNeed)
	If $sNeed Then
		If $iResultToSource Then
			_ConsoleWrite($Lng_16 & @CRLF & $sNeed)
		Else
			_ConsoleWrite($Lng_17 & @CRLF & $sNeed)
			ClipPut($sNeed)
		EndIf
	EndIf
	If $sCorrect Then _ConsoleWrite($Lng_18 & @CRLF & $sCorrect)
	If $sNoNeed Then _ConsoleWrite($Lng_19 & @CRLF & $sNoNeed)
	If $sNoInfo Then _ConsoleWrite($Lng_20 & @CRLF & $sNoInfo)
	_ConsoleWrite(@CRLF)
	Exit
EndFunc

Func _ResultToSource($sNeed, $sNoNeed, $iNoNeedAll = 0)
	Local $str, $tmp, $tmp2, $i, $pos = 0, $iComment = 0, $sOut
	If Not $sNeed And Not $sNoNeed And Not $iNoNeedAll Then Return
	If Not $hSciTE Then
		$iResultToSource = 0
		Return
	EndIf
	$str = ControlGetText($hSciTE, '', $hCtrl1)
	If Not $iNewVersion Then $str = BinaryToString(StringToBinary($str, 2), 1)
	If Not StringInStr($str, FileRead($inpFile)) Then
		$iResultToSource = 0
		Return
	EndIf
	$tmp = StringRegExp($str, '([\r\n]*)([^\r\n]+)([\r\n]*)', 3)
	If Not IsArray($tmp) Then Return
	$str = ''
	For $i = 0 To UBound($tmp) - 1
		If $tmp[$i] Then
			If $iComment Then
				If StringRegExp($tmp[$i], '(?i)^[ \t]*#(cs|comments-start)') Then
					$iComment += 1
				ElseIf StringRegExp($tmp[$i], '(?i)^[ \t]*#(ce|comments-end)') Then
					$iComment -= 1
				EndIf
				$str &= StringRegExpReplace($tmp[$i], '(?s).', '.')
			Else
				If StringRegExp($tmp[$i], '(?i)^[ \t]*#(cs|comments-start)') Then
					$iComment = 1
				EndIf
				$str &= $tmp[$i]
			EndIf
		EndIf
	Next

	If $iNoNeedAll And Not StringRegExp($str, '(?i)(?<=^|[\r\n])([ \t]*#Include[^\r\n]+)') Then Return

	Local $sHead = ';☆☆☆☆☆☆☆使用IncludesHelper虫子樱桃自用定制版添加☆☆☆☆☆☆☆'
	$tmp = StringRegExp($str, '(?i)(?<=^|[\r\n])([;~ \t]*#Include[^\r\n]+|[ \t]*#(?:End)?Region[ ]*\Q' & $sHead & '\E[^\r\n]*)', 3)
	If IsArray($tmp) Then
		$pos = StringLen($str)
		For $i = UBound($tmp) - 1 To 0 Step -1
			Do
				$pos = StringInStr($str, $tmp[$i], 1, -1, $pos)
				If $pos < 2 Then ExitLoop
			Until StringRegExp(StringMid($str, $pos - 1, 1), '[\r\n]')

			_SendMessage($hCtrl1, $EM_SETSEL, $pos - 1, $pos + StringLen($tmp[$i]) + 1) ;+1 - 箐嚯栩?耱痤牦
			_SendMessage($hCtrl1, $EM_REPLACESEL, True, '', 0, "wparam", "wstr")
			If StringRegExp($tmp[$i], '(?i)^[;~ \t]*#Include') Then
				$tmp2 = StringRegExp($tmp[$i], '(?i)^[ \t]*#Include[ \t]*[<''"]([^>''"]+)[>''"]', 3)
				If IsArray($tmp2) Then
					If $iNoNeedAll Then
						$sOut = ';~ ' & $tmp[$i] & ';~~~' & @CRLF & $sOut
					Else
						If StringInStr($sNoNeed, '-   ' & $tmp2[0]) Then
							$sOut = ';~ ' & $tmp[$i] & ';~~~' & @CRLF & $sOut
							$sNoNeed = StringReplace($sNoNeed, '-   ' & $tmp2[0], '-   ')
						Else
							$sOut = $tmp[$i] & @CRLF & $sOut
						EndIf
					EndIf
				Else
					$sOut = $tmp[$i] & @CRLF & $sOut
				EndIf
			EndIf
		Next
	EndIf

	If $pos Then
		$pos -= 1
	Else
		$tmp = StringRegExp($str, '(?i)(?<=^|[\r\n])([;~ \t]*#NoTrayIcon[^\r\n]*(?:\r\n|\r|\n))', 3)
		If IsArray($tmp) Then
			$pos = StringInStr($str, $tmp[0], 1) + StringLen($tmp[0]) - 1
		EndIf
	EndIf

	$tmp = StringRegExp($sOut, '(?i)(?<=^|[\r\n])([ \t]*#include-once[^\r\n]*[\r\n]*)', 3)
	If IsArray($tmp) Then
		$sOut = StringReplace($sOut, $tmp[0], '')
		$sNeed = '#include-once' & @CRLF & $sNeed
	EndIf

	$sOut = '#Region    ' & $sHead & @CRLF & $sNeed & $sOut & '#EndRegion ' & $sHead & @CRLF
	If $sOut Then
		$sOut = StringToBinary($sOut, 1)
		$sOut &= StringRight('0000', Mod(StringLen($sOut), 4) + 2)
		$sOut = BinaryToString($sOut, 2)
		_SendMessage($hCtrl1, $EM_SETSEL, $pos, $pos)
		_SendMessage($hCtrl1, $EM_REPLACESEL, True, $sOut, 0, "wparam", "wstr")
	EndIf
EndFunc

Func _ProgressSet($percent, $text = 'Default')
	If $percent < 0 Then $percent = 0
	If $percent > 100 Then $percent = 100
	GUICtrlSetData($progressInf, $percent)
	If $text <> 'Default' Then GUICtrlSetData($progressText, $text)
EndFunc

Func _GetInfo($fullPath)
	Local $tmp, $i, $j, $aRet, $str, $var
	If $numFind And StringInStr($fullPath, $inclDir) Then
		$aRet = _GetInfoDB($fullPath)
	Else
		Dim $aRet[2]
		If $iUseDll Then
			$str = __DelComment($fullPath)
		Else
			$str = FileRead($fullPath)
			$str = _DelComment($str, 1)
		EndIf
		$str = StringRegExpReplace($str, '(?i)(?<=^|[\r\n])Volatile[ \t]+(Func)', '\1')

		$str = StringRegExpReplace($str, '_[\r\n]+', '')

		$tmp = StringRegExp($str, '(?i)(?:^|[\r\n])[ \t]*Func[ \t]+([0-9a-z_]+)[ \t]*\(', 3)
		If IsArray($tmp) Then ; functions
			$aRet[0] = $d
			For $j = 0 To UBound($tmp) - 1
				$aRet[0] &= $tmp[$j] & $d
			Next
		EndIf

		$tmp = StringRegExp($str, '(?i)(?<![a-z0-9_$.])Global[ \t]([^\r\n]+)', 3) ;'(?i)(?:^|[\r\n])[ \t]*Global[ \t]([^\r\n]+)'
		If IsArray($tmp) Then ; const and var
			If Not $aRet[0] Then $aRet[0] = $d
			For $j = 0 To UBound($tmp) - 1
				If StringInStr($tmp[$j], ',') Then
					If StringInStr($tmp[$j], '[') Then
						Do
							$tmp[$j] = StringRegExpReplace($tmp[$j], '\[[^\[\]]*\]', ' ')
						Until Not @Extended
					EndIf
					If StringInStr($tmp[$j], '(') Then
						Do
							$tmp[$j] = StringRegExpReplace($tmp[$j], '\([^\(\)]*\)', ' ')
						Until Not @Extended
					EndIf
					$tmp[$j] = StringRegExpReplace($tmp[$j], '=[^,]+', ' ')
					$var = StringRegExp($tmp[$j], '(\$\w+)', 3)
					If IsArray($var) Then
						For $i = 0 To UBound($var) - 1
							$aRet[0] &= $var[$i] & $d
						Next
					EndIf
				Else
					$var = StringRegExp($tmp[$j], '(\$\w+)', 3)
					If IsArray($var) Then
						$aRet[0] &= $var[0] & $d
					EndIf
				EndIf
			Next
		EndIf
		$tmp = StringRegExp($str, '(?i)(?:^|[\r\n])[ \t]*#Include[ \t]*([<"''][^>"'']+)[>"'']', 3)
		If IsArray($tmp) Then $aRet[1] = 1 ; include
	EndIf
	Return $aRet
EndFunc

Func __DelComment($sFile, $onlyINCL = 0)
	Local $var, $ret
	$var = MemoryDllCall($DllHandle, 'str', 'DelComment', 'str', $sFile, 'int', $onlyINCL)
	If IsArray($var) Then
		$ret = $var[0]
		If $ret = '-1' Then
			$ret = ''
			_ConsoleWrite('!> Not read file : ' & $sFile & @CRLF)
		EndIf
	EndIf
	Return $ret
EndFunc

Func _DelComment($str, $delAll = 0)
	Local $aTmp, $iComment = 0, $i
	$aTmp = StringRegExp($str, '([^\r\n]+)', 3)
	If IsArray($aTmp) Then
		$str = @CRLF
		For $i = 0 To UBound($aTmp) - 1
			If $iComment Then
				If StringRegExp($aTmp[$i], '(?i)^[ \t]*#(cs|comments-start)') Then
					$iComment += 1
				ElseIf StringRegExp($aTmp[$i], '(?i)^[ \t]*#(ce|comments-end)') Then
					$iComment -= 1
				EndIf
			Else
				If StringRegExp($aTmp[$i], '(?i)^[ \t]*#(cs|comments-start)') Then
					$iComment = 1
				Else
					$str &= $aTmp[$i] & @CRLF
				EndIf
			EndIf
		Next
	EndIf
	If $delAll Then
		$aTmp = StringRegExp($str, '(?i)[\r\n][ \t]*(#include[^\r\n;]+)', 3)
		$str = StringRegExpReplace($str, '(["'']).*?\1', '\1\1')
		$str = StringRegExpReplace($str, '[;#].*', '')
		If IsArray($aTmp) Then
			For $i = 0 To UBound($aTmp) - 1
				$str &= $aTmp[$i] & @CRLF
			Next
		EndIf
		$str = StringRegExpReplace($str, '(?<=[\r\n])[ \t]+', '')
		$str = StringRegExpReplace($str, '[ \t]+(?=[\r\n])', '')
		$str = StringRegExpReplace($str, '[ \t]{2,}', ' ')
	EndIf
	Return $str
EndFunc

Func _FileList($sPath, $filter = '*')
	Local $FolderList, $aOut, $i, $j, $tmp, $var
	Dim $FolderList[2]
	$FolderList[0] = 1
	$FolderList[1] = $sPath
	$tmp = _FileListToArray($FolderList[1], '*', 2)
	If IsArray($tmp) And $tmp[0] > 0 Then ; max 2 level
		ReDim $FolderList[$FolderList[0] + $tmp[0] + 1]
		For $i = 1 To $tmp[0]
			$FolderList[0] += 1
			$FolderList[$FolderList[0]] = $FolderList[1] & '\' & $tmp[$i]
		Next
		$var = $FolderList[0]
		For $i = 2 To $var
			$tmp = _FileListToArray($FolderList[$i], '*', 2)
			If IsArray($tmp) And $tmp[0] > 0 Then
				ReDim $FolderList[$FolderList[0] + $tmp[0] + 1]
				For $j = 1 To $tmp[0]
					$FolderList[0] += 1
					$FolderList[$FolderList[0]] = $FolderList[$i] & '\' & $tmp[$j]
				Next
			EndIf
		Next
	EndIf
	Dim $aOut[1]
	For $i = 1 To $FolderList[0]
		$tmp = _FileListToArray($FolderList[$i], $filter, 1)
		If IsArray($tmp) And $tmp[0] > 0 Then
			ReDim $aOut[$aOut[0] + $tmp[0] + 1]
			For $j = 1 To $tmp[0]
				$aOut[0] += 1
				$aOut[$aOut[0]] = $FolderList[$i] & '\' & $tmp[$j]
			Next
		EndIf
	Next
	Return $aOut
EndFunc

Func _ConsoleWrite($s_Text, $overwrite = 0)
	If Not $hSciTE Then
		ConsoleWrite($s_Text)
		Return
	EndIf
	If $s_Text Then
		$s_Text = StringToBinary($s_Text, 1)
		$s_Text &= StringRight('0000', Mod(StringLen($s_Text), 4) + 2)
		$s_Text = BinaryToString($s_Text, 2)
	EndIf
	If $overwrite <> 1 Then
		Local $iLength = _SendMessage($hCtrl2, $WM_GETTEXTLENGTH)
		_SendMessage($hCtrl2, $EM_SETSEL, $iLength, $iLength)
		_SendMessage($hCtrl2, $EM_REPLACESEL, True, $s_Text, 0, "wparam", "wstr")
	Else
		ControlSetText($hSciTE, '', $hCtrl2, $s_Text)
	EndIf
EndFunc

Func _exit()
	$iExit = 1
EndFunc

Func _WinAPI_SetCompression($sPath, $iCompression)
	If DriveGetFileSystem(StringLeft($sPath, 2)) <> 'NTFS' Then Return SetError(1)
	Local $hFile = DllCall('kernel32.dll', 'ptr', 'CreateFileW', 'wstr', $sPath, 'dword', 0xC0000000, 'dword', 0x03, 'ptr', DllStructGetPtr(0), 'dword', 3, 'dword', 0x02000000, 'ptr', 0)
	If @Error Or $hFile[0] = Ptr(-1) Then Return SetError(1)
	$hFile = $hFile[0]
	Local $Ret = DllCall('kernel32.dll', 'int', 'DeviceIoControl', 'ptr', $hFile, 'dword', 0x0009C040, 'ushort*', $iCompression, 'dword', 2, 'ptr', 0, 'dword', 0, 'dword*', 0, 'ptr', 0)
	If @Error Or Not $Ret[0] Then SetError(1)
	DllCall("kernel32.dll", "bool", "CloseHandle", "handle", $hFile)
EndFunc

Func _end()
	MemoryDllClose($DllHandle)
EndFunc

Func _CheckVersion()
	Local $iRet, $aTmp
	$aTmp = StringRegExp(@AutoItVersion, '(\d+)', 3)
	If IsArray($aTmp) And UBound($aTmp) > 2 Then
		If Number(StringFormat('%02d%02d%02d', $aTmp[0], $aTmp[1], $aTmp[2])) >= 30310 Then $iRet = 1
	EndIf
	Return $iRet
EndFunc

Func _SciTE_Send_Command($sCmd, $Wait_time = 0)
	If Not $hSciTE Then Return ''
	Local $ar, $i
	If Not $h__SciTE_Director Or Not HWnd($h__SciTE_Director) Then
		$ar = WinList('[Class:DirectorExtension; Title:DirectorExtension]')
		If IsArray($ar) And $ar[0][0] > 0 Then
			For $i = 1 To $ar[0][0]
				If WinGetProcess($ar[$i][1]) = WinGetProcess($hSciTE) Then
					$h__SciTE_Director = $ar[$i][1]
					ExitLoop
				EndIf
			Next
		EndIf
		If Not $h__SciTE_Director Then Return ''
	EndIf
	$sCmd = StringReplace($sCmd, "\", "\\")
	$sCmd = StringReplace($sCmd, @TAB, "\t")
	$sCmd = StringReplace($sCmd, @CRLF, "\r\n")

	Local $My_Hwnd = GUICreate('AutoIt3-SciTE interface') ; Create GUI to receive SciTE info
	If $Wait_time > 0 Then
		$SciTE__Cmd = ''
		GUIRegisterMsg(74, 'SciTE_WM_COPYDATA') ; $WM__COPYDATA
	EndIf
	$sCmd = ':' & Int($My_Hwnd) & ':' & $sCmd ; Add dec my gui handle to commandline to tell SciTE where to send the return info
	Local $CmdStruct = DllStructCreate('Char[' & StringLen($sCmd) + 1 & ']')
	DllStructSetData($CmdStruct, 1, $sCmd)
	Local $COPYDATA = DllStructCreate('Ptr;DWord;Ptr')
	DllStructSetData($COPYDATA, 2, StringLen($sCmd) + 1)
	DllStructSetData($COPYDATA, 3, DllStructGetPtr($CmdStruct))
	DllCall('User32.dll', 'None', 'SendMessage', 'HWnd', $h__SciTE_Director, _
			'Int', 74, 'HWnd', $My_Hwnd, _ ; $WM__COPYDATA
			'Ptr', DllStructGetPtr($COPYDATA))
	If $Wait_time > 0 Then
		Local $begin = TimerInit()
		While Not $SciTE__Cmd And TimerDiff($begin) < $Wait_time
			Sleep(10)
			If Not WinExists($h__SciTE_Director) Then ExitLoop
		WEnd
		GUIRegisterMsg(74, '') ; $WM__COPYDATA
		If $SciTE__Cmd Then
			$SciTE__Cmd = StringReplace($SciTE__Cmd, "\\", "\")
			$SciTE__Cmd = StringRegExpReplace($SciTE__Cmd, "^:[0-9]+:", "")
		EndIf
	EndIf
	GUIDelete($My_Hwnd)
	Return $SciTE__Cmd
EndFunc

Func SciTE_WM_COPYDATA($hWnd, $msg, $wParam, $lParam)
	Local $COPYDATA = DllStructCreate('Ptr;DWord;Ptr', $lParam)
	Local $SciTECmdLen = DllStructGetData($COPYDATA, 2)
	Local $CmdStruct = DllStructCreate('Char[' & $SciTECmdLen & ']', DllStructGetData($COPYDATA, 3))
	$SciTE__Cmd = DllStructGetData($CmdStruct, 1)
EndFunc
